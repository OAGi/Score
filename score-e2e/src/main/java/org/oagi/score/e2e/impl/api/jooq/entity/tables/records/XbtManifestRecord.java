/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.e2e.impl.api.jooq.entity.tables.records;


import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.XbtManifest;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class XbtManifestRecord extends UpdatableRecordImpl<XbtManifestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>oagi.xbt_manifest.xbt_manifest_id</code>.
     */
    public void setXbtManifestId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>oagi.xbt_manifest.xbt_manifest_id</code>.
     */
    public ULong getXbtManifestId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>oagi.xbt_manifest.release_id</code>.
     */
    public void setReleaseId(ULong value) {
        set(1, value);
    }

    /**
     * Getter for <code>oagi.xbt_manifest.release_id</code>.
     */
    public ULong getReleaseId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>oagi.xbt_manifest.xbt_id</code>.
     */
    public void setXbtId(ULong value) {
        set(2, value);
    }

    /**
     * Getter for <code>oagi.xbt_manifest.xbt_id</code>.
     */
    public ULong getXbtId() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>oagi.xbt_manifest.conflict</code>. This indicates that
     * there is a conflict between self and relationship.
     */
    public void setConflict(Byte value) {
        set(3, value);
    }

    /**
     * Getter for <code>oagi.xbt_manifest.conflict</code>. This indicates that
     * there is a conflict between self and relationship.
     */
    public Byte getConflict() {
        return (Byte) get(3);
    }

    /**
     * Setter for <code>oagi.xbt_manifest.log_id</code>. A foreign key pointed
     * to a log for the current record.
     */
    public void setLogId(ULong value) {
        set(4, value);
    }

    /**
     * Getter for <code>oagi.xbt_manifest.log_id</code>. A foreign key pointed
     * to a log for the current record.
     */
    public ULong getLogId() {
        return (ULong) get(4);
    }

    /**
     * Setter for <code>oagi.xbt_manifest.prev_xbt_manifest_id</code>.
     */
    public void setPrevXbtManifestId(ULong value) {
        set(5, value);
    }

    /**
     * Getter for <code>oagi.xbt_manifest.prev_xbt_manifest_id</code>.
     */
    public ULong getPrevXbtManifestId() {
        return (ULong) get(5);
    }

    /**
     * Setter for <code>oagi.xbt_manifest.next_xbt_manifest_id</code>.
     */
    public void setNextXbtManifestId(ULong value) {
        set(6, value);
    }

    /**
     * Getter for <code>oagi.xbt_manifest.next_xbt_manifest_id</code>.
     */
    public ULong getNextXbtManifestId() {
        return (ULong) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached XbtManifestRecord
     */
    public XbtManifestRecord() {
        super(XbtManifest.XBT_MANIFEST);
    }

    /**
     * Create a detached, initialised XbtManifestRecord
     */
    public XbtManifestRecord(ULong xbtManifestId, ULong releaseId, ULong xbtId, Byte conflict, ULong logId, ULong prevXbtManifestId, ULong nextXbtManifestId) {
        super(XbtManifest.XBT_MANIFEST);

        setXbtManifestId(xbtManifestId);
        setReleaseId(releaseId);
        setXbtId(xbtId);
        setConflict(conflict);
        setLogId(logId);
        setPrevXbtManifestId(prevXbtManifestId);
        setNextXbtManifestId(nextXbtManifestId);
        resetTouchedOnNotNull();
    }
}
