/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.e2e.impl.api.jooq.entity.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.e2e.impl.api.jooq.entity.Keys;
import org.oagi.score.e2e.impl.api.jooq.entity.Oagi;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.BiePackage.BiePackagePath;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.TopLevelAsbiep.TopLevelAsbiepPath;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.records.BiePackageTopLevelAsbiepRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BiePackageTopLevelAsbiep extends TableImpl<BiePackageTopLevelAsbiepRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.bie_package_top_level_asbiep</code>
     */
    public static final BiePackageTopLevelAsbiep BIE_PACKAGE_TOP_LEVEL_ASBIEP = new BiePackageTopLevelAsbiep();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BiePackageTopLevelAsbiepRecord> getRecordType() {
        return BiePackageTopLevelAsbiepRecord.class;
    }

    /**
     * The column
     * <code>oagi.bie_package_top_level_asbiep.bie_package_top_level_asbiep_id</code>.
     * The primary key of the BIE package-Top-Level ASBIEP record.
     */
    public final TableField<BiePackageTopLevelAsbiepRecord, ULong> BIE_PACKAGE_TOP_LEVEL_ASBIEP_ID = createField(DSL.name("bie_package_top_level_asbiep_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "The primary key of the BIE package-Top-Level ASBIEP record.");

    /**
     * The column <code>oagi.bie_package_top_level_asbiep.bie_package_id</code>.
     * A foreign key referring to the BIE package.
     */
    public final TableField<BiePackageTopLevelAsbiepRecord, ULong> BIE_PACKAGE_ID = createField(DSL.name("bie_package_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A foreign key referring to the BIE package.");

    /**
     * The column
     * <code>oagi.bie_package_top_level_asbiep.top_level_asbiep_id</code>. A
     * foreign key referring to the TOP_LEVEL_ASBIEP_ID which has linked to the
     * BIE package. The release ID of this record must be the same to the BIE
     * package's release ID.
     */
    public final TableField<BiePackageTopLevelAsbiepRecord, ULong> TOP_LEVEL_ASBIEP_ID = createField(DSL.name("top_level_asbiep_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A foreign key referring to the TOP_LEVEL_ASBIEP_ID which has linked to the BIE package. The release ID of this record must be the same to the BIE package's release ID.");

    /**
     * The column <code>oagi.bie_package_top_level_asbiep.created_by</code>. A
     * foreign key referring to the user who adds the record into the BIE
     * package.
     */
    public final TableField<BiePackageTopLevelAsbiepRecord, ULong> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A foreign key referring to the user who adds the record into the BIE package.");

    /**
     * The column
     * <code>oagi.bie_package_top_level_asbiep.creation_timestamp</code>.
     * Timestamp when this record was first created.
     */
    public final TableField<BiePackageTopLevelAsbiepRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Timestamp when this record was first created.");

    private BiePackageTopLevelAsbiep(Name alias, Table<BiePackageTopLevelAsbiepRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BiePackageTopLevelAsbiep(Name alias, Table<BiePackageTopLevelAsbiepRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.bie_package_top_level_asbiep</code> table
     * reference
     */
    public BiePackageTopLevelAsbiep(String alias) {
        this(DSL.name(alias), BIE_PACKAGE_TOP_LEVEL_ASBIEP);
    }

    /**
     * Create an aliased <code>oagi.bie_package_top_level_asbiep</code> table
     * reference
     */
    public BiePackageTopLevelAsbiep(Name alias) {
        this(alias, BIE_PACKAGE_TOP_LEVEL_ASBIEP);
    }

    /**
     * Create a <code>oagi.bie_package_top_level_asbiep</code> table reference
     */
    public BiePackageTopLevelAsbiep() {
        this(DSL.name("bie_package_top_level_asbiep"), null);
    }

    public <O extends Record> BiePackageTopLevelAsbiep(Table<O> path, ForeignKey<O, BiePackageTopLevelAsbiepRecord> childPath, InverseForeignKey<O, BiePackageTopLevelAsbiepRecord> parentPath) {
        super(path, childPath, parentPath, BIE_PACKAGE_TOP_LEVEL_ASBIEP);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BiePackageTopLevelAsbiepPath extends BiePackageTopLevelAsbiep implements Path<BiePackageTopLevelAsbiepRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BiePackageTopLevelAsbiepPath(Table<O> path, ForeignKey<O, BiePackageTopLevelAsbiepRecord> childPath, InverseForeignKey<O, BiePackageTopLevelAsbiepRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BiePackageTopLevelAsbiepPath(Name alias, Table<BiePackageTopLevelAsbiepRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BiePackageTopLevelAsbiepPath as(String alias) {
            return new BiePackageTopLevelAsbiepPath(DSL.name(alias), this);
        }

        @Override
        public BiePackageTopLevelAsbiepPath as(Name alias) {
            return new BiePackageTopLevelAsbiepPath(alias, this);
        }

        @Override
        public BiePackageTopLevelAsbiepPath as(Table<?> alias) {
            return new BiePackageTopLevelAsbiepPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<BiePackageTopLevelAsbiepRecord, ULong> getIdentity() {
        return (Identity<BiePackageTopLevelAsbiepRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<BiePackageTopLevelAsbiepRecord> getPrimaryKey() {
        return Keys.KEY_BIE_PACKAGE_TOP_LEVEL_ASBIEP_PRIMARY;
    }

    @Override
    public List<ForeignKey<BiePackageTopLevelAsbiepRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BIE_PACKAGE_TOP_LEVEL_ASBIEP_BIE_PACKAGE_ID_FK, Keys.BIE_PACKAGE_TOP_LEVEL_ASBIEP_TOP_LEVEL_ASBIEP_ID_FK);
    }

    private transient BiePackagePath _biePackage;

    /**
     * Get the implicit join path to the <code>oagi.bie_package</code> table.
     */
    public BiePackagePath biePackage() {
        if (_biePackage == null)
            _biePackage = new BiePackagePath(this, Keys.BIE_PACKAGE_TOP_LEVEL_ASBIEP_BIE_PACKAGE_ID_FK, null);

        return _biePackage;
    }

    private transient TopLevelAsbiepPath _topLevelAsbiep;

    /**
     * Get the implicit join path to the <code>oagi.top_level_asbiep</code>
     * table.
     */
    public TopLevelAsbiepPath topLevelAsbiep() {
        if (_topLevelAsbiep == null)
            _topLevelAsbiep = new TopLevelAsbiepPath(this, Keys.BIE_PACKAGE_TOP_LEVEL_ASBIEP_TOP_LEVEL_ASBIEP_ID_FK, null);

        return _topLevelAsbiep;
    }

    @Override
    public BiePackageTopLevelAsbiep as(String alias) {
        return new BiePackageTopLevelAsbiep(DSL.name(alias), this);
    }

    @Override
    public BiePackageTopLevelAsbiep as(Name alias) {
        return new BiePackageTopLevelAsbiep(alias, this);
    }

    @Override
    public BiePackageTopLevelAsbiep as(Table<?> alias) {
        return new BiePackageTopLevelAsbiep(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BiePackageTopLevelAsbiep rename(String name) {
        return new BiePackageTopLevelAsbiep(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BiePackageTopLevelAsbiep rename(Name name) {
        return new BiePackageTopLevelAsbiep(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BiePackageTopLevelAsbiep rename(Table<?> name) {
        return new BiePackageTopLevelAsbiep(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BiePackageTopLevelAsbiep where(Condition condition) {
        return new BiePackageTopLevelAsbiep(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BiePackageTopLevelAsbiep where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BiePackageTopLevelAsbiep where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BiePackageTopLevelAsbiep where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BiePackageTopLevelAsbiep where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BiePackageTopLevelAsbiep where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BiePackageTopLevelAsbiep where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BiePackageTopLevelAsbiep where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BiePackageTopLevelAsbiep whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BiePackageTopLevelAsbiep whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
