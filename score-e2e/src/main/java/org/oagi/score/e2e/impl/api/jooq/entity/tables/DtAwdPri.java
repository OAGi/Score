/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.e2e.impl.api.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.e2e.impl.api.jooq.entity.Keys;
import org.oagi.score.e2e.impl.api.jooq.entity.Oagi;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.AgencyIdListManifest.AgencyIdListManifestPath;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.CodeListManifest.CodeListManifestPath;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.Dt.DtPath;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.Release.ReleasePath;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.XbtManifest.XbtManifestPath;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.records.DtAwdPriRecord;


/**
 * This table captures the allowed primitives for a DT. The allowed primitives
 * are captured by three columns the XBT_MANIFEST_ID, CODE_LIST_MANIFEST_ID, and
 * AGENCY_ID_LIST_MANIFEST_ID. The first column specifies the primitive by the
 * built-in type of an expression language such as the XML Schema built-in type.
 * The second specifies the primitive, which is a code list, while the last one
 * specifies the primitive which is an agency identification list. Only one
 * column among the three can have a value in a particular record.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DtAwdPri extends TableImpl<DtAwdPriRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.dt_awd_pri</code>
     */
    public static final DtAwdPri DT_AWD_PRI = new DtAwdPri();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DtAwdPriRecord> getRecordType() {
        return DtAwdPriRecord.class;
    }

    /**
     * The column <code>oagi.dt_awd_pri.dt_awd_pri_id</code>. Primary, internal
     * database key.
     */
    public final TableField<DtAwdPriRecord, ULong> DT_AWD_PRI_ID = createField(DSL.name("dt_awd_pri_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary, internal database key.");

    /**
     * The column <code>oagi.dt_awd_pri.release_id</code>. Foreign key to the
     * RELEASE table.
     */
    public final TableField<DtAwdPriRecord, ULong> RELEASE_ID = createField(DSL.name("release_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the RELEASE table.");

    /**
     * The column <code>oagi.dt_awd_pri.dt_id</code>. Foreign key to the DT
     * table.
     */
    public final TableField<DtAwdPriRecord, ULong> DT_ID = createField(DSL.name("dt_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the DT table.");

    /**
     * The column <code>oagi.dt_awd_pri.xbt_manifest_id</code>. This is a
     * foreign key to the XBT_MANIFEST table.
     */
    public final TableField<DtAwdPriRecord, ULong> XBT_MANIFEST_ID = createField(DSL.name("xbt_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "This is a foreign key to the XBT_MANIFEST table.");

    /**
     * The column <code>oagi.dt_awd_pri.code_list_manifest_id</code>. Foreign
     * key to the CODE_LIST_MANIFEST table.
     */
    public final TableField<DtAwdPriRecord, ULong> CODE_LIST_MANIFEST_ID = createField(DSL.name("code_list_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "Foreign key to the CODE_LIST_MANIFEST table.");

    /**
     * The column <code>oagi.dt_awd_pri.agency_id_list_manifest_id</code>. This
     * is a foreign key to the AGENCY_ID_LIST_MANIFEST table.
     */
    public final TableField<DtAwdPriRecord, ULong> AGENCY_ID_LIST_MANIFEST_ID = createField(DSL.name("agency_id_list_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "This is a foreign key to the AGENCY_ID_LIST_MANIFEST table.");

    /**
     * The column <code>oagi.dt_awd_pri.is_default</code>. It indicates the most
     * generic primitive for the data type.
     */
    public final TableField<DtAwdPriRecord, Byte> IS_DEFAULT = createField(DSL.name("is_default"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "It indicates the most generic primitive for the data type.");

    private DtAwdPri(Name alias, Table<DtAwdPriRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DtAwdPri(Name alias, Table<DtAwdPriRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("This table captures the allowed primitives for a DT. The allowed primitives are captured by three columns the XBT_MANIFEST_ID, CODE_LIST_MANIFEST_ID, and AGENCY_ID_LIST_MANIFEST_ID. The first column specifies the primitive by the built-in type of an expression language such as the XML Schema built-in type. The second specifies the primitive, which is a code list, while the last one specifies the primitive which is an agency identification list. Only one column among the three can have a value in a particular record."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.dt_awd_pri</code> table reference
     */
    public DtAwdPri(String alias) {
        this(DSL.name(alias), DT_AWD_PRI);
    }

    /**
     * Create an aliased <code>oagi.dt_awd_pri</code> table reference
     */
    public DtAwdPri(Name alias) {
        this(alias, DT_AWD_PRI);
    }

    /**
     * Create a <code>oagi.dt_awd_pri</code> table reference
     */
    public DtAwdPri() {
        this(DSL.name("dt_awd_pri"), null);
    }

    public <O extends Record> DtAwdPri(Table<O> path, ForeignKey<O, DtAwdPriRecord> childPath, InverseForeignKey<O, DtAwdPriRecord> parentPath) {
        super(path, childPath, parentPath, DT_AWD_PRI);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DtAwdPriPath extends DtAwdPri implements Path<DtAwdPriRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> DtAwdPriPath(Table<O> path, ForeignKey<O, DtAwdPriRecord> childPath, InverseForeignKey<O, DtAwdPriRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DtAwdPriPath(Name alias, Table<DtAwdPriRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DtAwdPriPath as(String alias) {
            return new DtAwdPriPath(DSL.name(alias), this);
        }

        @Override
        public DtAwdPriPath as(Name alias) {
            return new DtAwdPriPath(alias, this);
        }

        @Override
        public DtAwdPriPath as(Table<?> alias) {
            return new DtAwdPriPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<DtAwdPriRecord, ULong> getIdentity() {
        return (Identity<DtAwdPriRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<DtAwdPriRecord> getPrimaryKey() {
        return Keys.KEY_DT_AWD_PRI_PRIMARY;
    }

    @Override
    public List<ForeignKey<DtAwdPriRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DT_AWD_PRI_AGENCY_ID_LIST_MANIFEST_ID_FK, Keys.DT_AWD_PRI_CODE_LIST_MANIFEST_ID_FK, Keys.DT_AWD_PRI_DT_ID_FK, Keys.DT_AWD_PRI_RELEASE_ID_FK, Keys.DT_AWD_PRI_XBT_MANIFEST_ID_FK);
    }

    private transient AgencyIdListManifestPath _agencyIdListManifest;

    /**
     * Get the implicit join path to the
     * <code>oagi.agency_id_list_manifest</code> table.
     */
    public AgencyIdListManifestPath agencyIdListManifest() {
        if (_agencyIdListManifest == null)
            _agencyIdListManifest = new AgencyIdListManifestPath(this, Keys.DT_AWD_PRI_AGENCY_ID_LIST_MANIFEST_ID_FK, null);

        return _agencyIdListManifest;
    }

    private transient CodeListManifestPath _codeListManifest;

    /**
     * Get the implicit join path to the <code>oagi.code_list_manifest</code>
     * table.
     */
    public CodeListManifestPath codeListManifest() {
        if (_codeListManifest == null)
            _codeListManifest = new CodeListManifestPath(this, Keys.DT_AWD_PRI_CODE_LIST_MANIFEST_ID_FK, null);

        return _codeListManifest;
    }

    private transient DtPath _dt;

    /**
     * Get the implicit join path to the <code>oagi.dt</code> table.
     */
    public DtPath dt() {
        if (_dt == null)
            _dt = new DtPath(this, Keys.DT_AWD_PRI_DT_ID_FK, null);

        return _dt;
    }

    private transient ReleasePath _release;

    /**
     * Get the implicit join path to the <code>oagi.release</code> table.
     */
    public ReleasePath release() {
        if (_release == null)
            _release = new ReleasePath(this, Keys.DT_AWD_PRI_RELEASE_ID_FK, null);

        return _release;
    }

    private transient XbtManifestPath _xbtManifest;

    /**
     * Get the implicit join path to the <code>oagi.xbt_manifest</code> table.
     */
    public XbtManifestPath xbtManifest() {
        if (_xbtManifest == null)
            _xbtManifest = new XbtManifestPath(this, Keys.DT_AWD_PRI_XBT_MANIFEST_ID_FK, null);

        return _xbtManifest;
    }

    @Override
    public DtAwdPri as(String alias) {
        return new DtAwdPri(DSL.name(alias), this);
    }

    @Override
    public DtAwdPri as(Name alias) {
        return new DtAwdPri(alias, this);
    }

    @Override
    public DtAwdPri as(Table<?> alias) {
        return new DtAwdPri(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DtAwdPri rename(String name) {
        return new DtAwdPri(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DtAwdPri rename(Name name) {
        return new DtAwdPri(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DtAwdPri rename(Table<?> name) {
        return new DtAwdPri(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DtAwdPri where(Condition condition) {
        return new DtAwdPri(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DtAwdPri where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DtAwdPri where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DtAwdPri where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DtAwdPri where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DtAwdPri where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DtAwdPri where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DtAwdPri where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DtAwdPri whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DtAwdPri whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
