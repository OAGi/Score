/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.e2e.impl.api.jooq.entity.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.e2e.impl.api.jooq.entity.Keys;
import org.oagi.score.e2e.impl.api.jooq.entity.Oagi;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.records.BizCtxValueRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This table represents business context values for business contexts. It
 * provides the associations between a business context and a context scheme
 * value.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class BizCtxValue extends TableImpl<BizCtxValueRecord> {

    /**
     * The reference instance of <code>oagi.biz_ctx_value</code>
     */
    public static final BizCtxValue BIZ_CTX_VALUE = new BizCtxValue();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>oagi.biz_ctx_value.biz_ctx_value_id</code>. Primary,
     * internal database key.
     */
    public final TableField<BizCtxValueRecord, ULong> BIZ_CTX_VALUE_ID = createField(DSL.name("biz_ctx_value_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary, internal database key.");
    /**
     * The column <code>oagi.biz_ctx_value.biz_ctx_id</code>. Foreign key to the
     * biz_ctx table.
     */
    public final TableField<BizCtxValueRecord, ULong> BIZ_CTX_ID = createField(DSL.name("biz_ctx_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the biz_ctx table.");
    /**
     * The column <code>oagi.biz_ctx_value.ctx_scheme_value_id</code>. Foreign
     * key to the CTX_SCHEME_VALUE table.
     */
    public final TableField<BizCtxValueRecord, ULong> CTX_SCHEME_VALUE_ID = createField(DSL.name("ctx_scheme_value_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the CTX_SCHEME_VALUE table.");
    private transient BizCtx _bizCtx;
    private transient CtxSchemeValue _ctxSchemeValue;

    private BizCtxValue(Name alias, Table<BizCtxValueRecord> aliased) {
        this(alias, aliased, null);
    }

    private BizCtxValue(Name alias, Table<BizCtxValueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("This table represents business context values for business contexts. It provides the associations between a business context and a context scheme value."), TableOptions.table());
    }

    /**
     * Create an aliased <code>oagi.biz_ctx_value</code> table reference
     */
    public BizCtxValue(String alias) {
        this(DSL.name(alias), BIZ_CTX_VALUE);
    }

    /**
     * Create an aliased <code>oagi.biz_ctx_value</code> table reference
     */
    public BizCtxValue(Name alias) {
        this(alias, BIZ_CTX_VALUE);
    }

    /**
     * Create a <code>oagi.biz_ctx_value</code> table reference
     */
    public BizCtxValue() {
        this(DSL.name("biz_ctx_value"), null);
    }

    public <O extends Record> BizCtxValue(Table<O> child, ForeignKey<O, BizCtxValueRecord> key) {
        super(child, key, BIZ_CTX_VALUE);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BizCtxValueRecord> getRecordType() {
        return BizCtxValueRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<BizCtxValueRecord, ULong> getIdentity() {
        return (Identity<BizCtxValueRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<BizCtxValueRecord> getPrimaryKey() {
        return Keys.KEY_BIZ_CTX_VALUE_PRIMARY;
    }

    @Override
    public List<ForeignKey<BizCtxValueRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BIZ_CTX_VALUE_BIZ_CTX_ID_FK, Keys.BIZ_CTX_VALUE_CTX_SCHEME_VALUE_ID_FK);
    }

    /**
     * Get the implicit join path to the <code>oagi.biz_ctx</code> table.
     */
    public BizCtx bizCtx() {
        if (_bizCtx == null)
            _bizCtx = new BizCtx(this, Keys.BIZ_CTX_VALUE_BIZ_CTX_ID_FK);

        return _bizCtx;
    }

    /**
     * Get the implicit join path to the <code>oagi.ctx_scheme_value</code>
     * table.
     */
    public CtxSchemeValue ctxSchemeValue() {
        if (_ctxSchemeValue == null)
            _ctxSchemeValue = new CtxSchemeValue(this, Keys.BIZ_CTX_VALUE_CTX_SCHEME_VALUE_ID_FK);

        return _ctxSchemeValue;
    }

    @Override
    public BizCtxValue as(String alias) {
        return new BizCtxValue(DSL.name(alias), this);
    }

    @Override
    public BizCtxValue as(Name alias) {
        return new BizCtxValue(alias, this);
    }

    @Override
    public BizCtxValue as(Table<?> alias) {
        return new BizCtxValue(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BizCtxValue rename(String name) {
        return new BizCtxValue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BizCtxValue rename(Name name) {
        return new BizCtxValue(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BizCtxValue rename(Table<?> name) {
        return new BizCtxValue(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<ULong, ULong, ULong> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super ULong, ? super ULong, ? super ULong, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super ULong, ? super ULong, ? super ULong, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
