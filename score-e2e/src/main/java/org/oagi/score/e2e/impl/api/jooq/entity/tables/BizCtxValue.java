/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.e2e.impl.api.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.e2e.impl.api.jooq.entity.Keys;
import org.oagi.score.e2e.impl.api.jooq.entity.Oagi;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.BizCtx.BizCtxPath;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.CtxSchemeValue.CtxSchemeValuePath;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.records.BizCtxValueRecord;


/**
 * This table represents business context values for business contexts. It
 * provides the associations between a business context and a context scheme
 * value.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BizCtxValue extends TableImpl<BizCtxValueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.biz_ctx_value</code>
     */
    public static final BizCtxValue BIZ_CTX_VALUE = new BizCtxValue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BizCtxValueRecord> getRecordType() {
        return BizCtxValueRecord.class;
    }

    /**
     * The column <code>oagi.biz_ctx_value.biz_ctx_value_id</code>. Primary,
     * internal database key.
     */
    public final TableField<BizCtxValueRecord, ULong> BIZ_CTX_VALUE_ID = createField(DSL.name("biz_ctx_value_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary, internal database key.");

    /**
     * The column <code>oagi.biz_ctx_value.biz_ctx_id</code>. Foreign key to the
     * biz_ctx table.
     */
    public final TableField<BizCtxValueRecord, ULong> BIZ_CTX_ID = createField(DSL.name("biz_ctx_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the biz_ctx table.");

    /**
     * The column <code>oagi.biz_ctx_value.ctx_scheme_value_id</code>. Foreign
     * key to the CTX_SCHEME_VALUE table.
     */
    public final TableField<BizCtxValueRecord, ULong> CTX_SCHEME_VALUE_ID = createField(DSL.name("ctx_scheme_value_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the CTX_SCHEME_VALUE table.");

    private BizCtxValue(Name alias, Table<BizCtxValueRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BizCtxValue(Name alias, Table<BizCtxValueRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("This table represents business context values for business contexts. It provides the associations between a business context and a context scheme value."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.biz_ctx_value</code> table reference
     */
    public BizCtxValue(String alias) {
        this(DSL.name(alias), BIZ_CTX_VALUE);
    }

    /**
     * Create an aliased <code>oagi.biz_ctx_value</code> table reference
     */
    public BizCtxValue(Name alias) {
        this(alias, BIZ_CTX_VALUE);
    }

    /**
     * Create a <code>oagi.biz_ctx_value</code> table reference
     */
    public BizCtxValue() {
        this(DSL.name("biz_ctx_value"), null);
    }

    public <O extends Record> BizCtxValue(Table<O> path, ForeignKey<O, BizCtxValueRecord> childPath, InverseForeignKey<O, BizCtxValueRecord> parentPath) {
        super(path, childPath, parentPath, BIZ_CTX_VALUE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BizCtxValuePath extends BizCtxValue implements Path<BizCtxValueRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BizCtxValuePath(Table<O> path, ForeignKey<O, BizCtxValueRecord> childPath, InverseForeignKey<O, BizCtxValueRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BizCtxValuePath(Name alias, Table<BizCtxValueRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BizCtxValuePath as(String alias) {
            return new BizCtxValuePath(DSL.name(alias), this);
        }

        @Override
        public BizCtxValuePath as(Name alias) {
            return new BizCtxValuePath(alias, this);
        }

        @Override
        public BizCtxValuePath as(Table<?> alias) {
            return new BizCtxValuePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<BizCtxValueRecord, ULong> getIdentity() {
        return (Identity<BizCtxValueRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<BizCtxValueRecord> getPrimaryKey() {
        return Keys.KEY_BIZ_CTX_VALUE_PRIMARY;
    }

    @Override
    public List<ForeignKey<BizCtxValueRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BIZ_CTX_VALUE_BIZ_CTX_ID_FK, Keys.BIZ_CTX_VALUE_CTX_SCHEME_VALUE_ID_FK);
    }

    private transient BizCtxPath _bizCtx;

    /**
     * Get the implicit join path to the <code>oagi.biz_ctx</code> table.
     */
    public BizCtxPath bizCtx() {
        if (_bizCtx == null)
            _bizCtx = new BizCtxPath(this, Keys.BIZ_CTX_VALUE_BIZ_CTX_ID_FK, null);

        return _bizCtx;
    }

    private transient CtxSchemeValuePath _ctxSchemeValue;

    /**
     * Get the implicit join path to the <code>oagi.ctx_scheme_value</code>
     * table.
     */
    public CtxSchemeValuePath ctxSchemeValue() {
        if (_ctxSchemeValue == null)
            _ctxSchemeValue = new CtxSchemeValuePath(this, Keys.BIZ_CTX_VALUE_CTX_SCHEME_VALUE_ID_FK, null);

        return _ctxSchemeValue;
    }

    @Override
    public BizCtxValue as(String alias) {
        return new BizCtxValue(DSL.name(alias), this);
    }

    @Override
    public BizCtxValue as(Name alias) {
        return new BizCtxValue(alias, this);
    }

    @Override
    public BizCtxValue as(Table<?> alias) {
        return new BizCtxValue(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BizCtxValue rename(String name) {
        return new BizCtxValue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BizCtxValue rename(Name name) {
        return new BizCtxValue(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BizCtxValue rename(Table<?> name) {
        return new BizCtxValue(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BizCtxValue where(Condition condition) {
        return new BizCtxValue(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BizCtxValue where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BizCtxValue where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BizCtxValue where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BizCtxValue where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BizCtxValue where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BizCtxValue where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BizCtxValue where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BizCtxValue whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BizCtxValue whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
