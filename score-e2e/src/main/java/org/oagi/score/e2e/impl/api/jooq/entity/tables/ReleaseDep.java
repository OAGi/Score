/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.e2e.impl.api.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.e2e.impl.api.jooq.entity.Keys;
import org.oagi.score.e2e.impl.api.jooq.entity.Oagi;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.Release.ReleasePath;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.records.ReleaseDepRecord;


/**
 * This table stores release dependency information.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ReleaseDep extends TableImpl<ReleaseDepRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.release_dep</code>
     */
    public static final ReleaseDep RELEASE_DEP = new ReleaseDep();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReleaseDepRecord> getRecordType() {
        return ReleaseDepRecord.class;
    }

    /**
     * The column <code>oagi.release_dep.release_dep_id</code>. Primary,
     * internal database key.
     */
    public final TableField<ReleaseDepRecord, ULong> RELEASE_DEP_ID = createField(DSL.name("release_dep_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary, internal database key.");

    /**
     * The column <code>oagi.release_dep.release_id</code>. A foreign key
     * pointing to a release record.
     */
    public final TableField<ReleaseDepRecord, ULong> RELEASE_ID = createField(DSL.name("release_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A foreign key pointing to a release record.");

    /**
     * The column <code>oagi.release_dep.depend_on_release_id</code>. A foreign
     * key pointing to dependent release records of the release specified in
     * release_id.
     */
    public final TableField<ReleaseDepRecord, ULong> DEPEND_ON_RELEASE_ID = createField(DSL.name("depend_on_release_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A foreign key pointing to dependent release records of the release specified in release_id.");

    private ReleaseDep(Name alias, Table<ReleaseDepRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ReleaseDep(Name alias, Table<ReleaseDepRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("This table stores release dependency information."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.release_dep</code> table reference
     */
    public ReleaseDep(String alias) {
        this(DSL.name(alias), RELEASE_DEP);
    }

    /**
     * Create an aliased <code>oagi.release_dep</code> table reference
     */
    public ReleaseDep(Name alias) {
        this(alias, RELEASE_DEP);
    }

    /**
     * Create a <code>oagi.release_dep</code> table reference
     */
    public ReleaseDep() {
        this(DSL.name("release_dep"), null);
    }

    public <O extends Record> ReleaseDep(Table<O> path, ForeignKey<O, ReleaseDepRecord> childPath, InverseForeignKey<O, ReleaseDepRecord> parentPath) {
        super(path, childPath, parentPath, RELEASE_DEP);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ReleaseDepPath extends ReleaseDep implements Path<ReleaseDepRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ReleaseDepPath(Table<O> path, ForeignKey<O, ReleaseDepRecord> childPath, InverseForeignKey<O, ReleaseDepRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ReleaseDepPath(Name alias, Table<ReleaseDepRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ReleaseDepPath as(String alias) {
            return new ReleaseDepPath(DSL.name(alias), this);
        }

        @Override
        public ReleaseDepPath as(Name alias) {
            return new ReleaseDepPath(alias, this);
        }

        @Override
        public ReleaseDepPath as(Table<?> alias) {
            return new ReleaseDepPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<ReleaseDepRecord, ULong> getIdentity() {
        return (Identity<ReleaseDepRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<ReleaseDepRecord> getPrimaryKey() {
        return Keys.KEY_RELEASE_DEP_PRIMARY;
    }

    @Override
    public List<ForeignKey<ReleaseDepRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RELEASE_DEP_DEPEND_ON_RELEASE_ID_FK, Keys.RELEASE_DEP_RELEASE_ID_FK);
    }

    private transient ReleasePath _releaseDepDependOnReleaseIdFk;

    /**
     * Get the implicit join path to the <code>oagi.release</code> table, via
     * the <code>release_dep_depend_on_release_id_fk</code> key.
     */
    public ReleasePath releaseDepDependOnReleaseIdFk() {
        if (_releaseDepDependOnReleaseIdFk == null)
            _releaseDepDependOnReleaseIdFk = new ReleasePath(this, Keys.RELEASE_DEP_DEPEND_ON_RELEASE_ID_FK, null);

        return _releaseDepDependOnReleaseIdFk;
    }

    private transient ReleasePath _releaseDepReleaseIdFk;

    /**
     * Get the implicit join path to the <code>oagi.release</code> table, via
     * the <code>release_dep_release_id_fk</code> key.
     */
    public ReleasePath releaseDepReleaseIdFk() {
        if (_releaseDepReleaseIdFk == null)
            _releaseDepReleaseIdFk = new ReleasePath(this, Keys.RELEASE_DEP_RELEASE_ID_FK, null);

        return _releaseDepReleaseIdFk;
    }

    @Override
    public ReleaseDep as(String alias) {
        return new ReleaseDep(DSL.name(alias), this);
    }

    @Override
    public ReleaseDep as(Name alias) {
        return new ReleaseDep(alias, this);
    }

    @Override
    public ReleaseDep as(Table<?> alias) {
        return new ReleaseDep(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReleaseDep rename(String name) {
        return new ReleaseDep(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReleaseDep rename(Name name) {
        return new ReleaseDep(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReleaseDep rename(Table<?> name) {
        return new ReleaseDep(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReleaseDep where(Condition condition) {
        return new ReleaseDep(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReleaseDep where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReleaseDep where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReleaseDep where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReleaseDep where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReleaseDep where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReleaseDep where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReleaseDep where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReleaseDep whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReleaseDep whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
