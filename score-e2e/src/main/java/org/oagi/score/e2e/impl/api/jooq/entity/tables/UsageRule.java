/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.e2e.impl.api.jooq.entity.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.e2e.impl.api.jooq.entity.Keys;
import org.oagi.score.e2e.impl.api.jooq.entity.Oagi;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.BieUsageRule.BieUsageRulePath;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.DtUsageRule.DtUsageRulePath;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.UsageRuleExpression.UsageRuleExpressionPath;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.records.UsageRuleRecord;


/**
 * This table captures a usage rule information. A usage rule may be expressed
 * in multiple expressions. Each expression is captured in the
 * USAGE_RULE_EXPRESSION table. To capture a description of a usage rule, create
 * a usage rule expression with the unstructured constraint type.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsageRule extends TableImpl<UsageRuleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.usage_rule</code>
     */
    public static final UsageRule USAGE_RULE = new UsageRule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsageRuleRecord> getRecordType() {
        return UsageRuleRecord.class;
    }

    /**
     * The column <code>oagi.usage_rule.usage_rule_id</code>. Primary key of the
     * usage rule.
     */
    public final TableField<UsageRuleRecord, ULong> USAGE_RULE_ID = createField(DSL.name("usage_rule_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key of the usage rule.");

    /**
     * The column <code>oagi.usage_rule.name</code>. Short nmenomic name of the
     * usage rule.
     */
    public final TableField<UsageRuleRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "Short nmenomic name of the usage rule.");

    /**
     * The column <code>oagi.usage_rule.condition_type</code>. Condition type
     * according to the CC specification. It is a value list column. 0 =
     * pre-condition, 1 = post-condition, 2 = invariant.
     */
    public final TableField<UsageRuleRecord, Integer> CONDITION_TYPE = createField(DSL.name("condition_type"), SQLDataType.INTEGER.nullable(false), this, "Condition type according to the CC specification. It is a value list column. 0 = pre-condition, 1 = post-condition, 2 = invariant.");

    private UsageRule(Name alias, Table<UsageRuleRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UsageRule(Name alias, Table<UsageRuleRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("This table captures a usage rule information. A usage rule may be expressed in multiple expressions. Each expression is captured in the USAGE_RULE_EXPRESSION table. To capture a description of a usage rule, create a usage rule expression with the unstructured constraint type."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.usage_rule</code> table reference
     */
    public UsageRule(String alias) {
        this(DSL.name(alias), USAGE_RULE);
    }

    /**
     * Create an aliased <code>oagi.usage_rule</code> table reference
     */
    public UsageRule(Name alias) {
        this(alias, USAGE_RULE);
    }

    /**
     * Create a <code>oagi.usage_rule</code> table reference
     */
    public UsageRule() {
        this(DSL.name("usage_rule"), null);
    }

    public <O extends Record> UsageRule(Table<O> path, ForeignKey<O, UsageRuleRecord> childPath, InverseForeignKey<O, UsageRuleRecord> parentPath) {
        super(path, childPath, parentPath, USAGE_RULE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UsageRulePath extends UsageRule implements Path<UsageRuleRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UsageRulePath(Table<O> path, ForeignKey<O, UsageRuleRecord> childPath, InverseForeignKey<O, UsageRuleRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UsageRulePath(Name alias, Table<UsageRuleRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UsageRulePath as(String alias) {
            return new UsageRulePath(DSL.name(alias), this);
        }

        @Override
        public UsageRulePath as(Name alias) {
            return new UsageRulePath(alias, this);
        }

        @Override
        public UsageRulePath as(Table<?> alias) {
            return new UsageRulePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<UsageRuleRecord, ULong> getIdentity() {
        return (Identity<UsageRuleRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<UsageRuleRecord> getPrimaryKey() {
        return Keys.KEY_USAGE_RULE_PRIMARY;
    }

    private transient BieUsageRulePath _bieUsageRule;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.bie_usage_rule</code> table
     */
    public BieUsageRulePath bieUsageRule() {
        if (_bieUsageRule == null)
            _bieUsageRule = new BieUsageRulePath(this, null, Keys.BIE_USAGE_RULE_ASSIGNED_USAGE_RULE_ID_FK.getInverseKey());

        return _bieUsageRule;
    }

    private transient DtUsageRulePath _dtUsageRule;

    /**
     * Get the implicit to-many join path to the <code>oagi.dt_usage_rule</code>
     * table
     */
    public DtUsageRulePath dtUsageRule() {
        if (_dtUsageRule == null)
            _dtUsageRule = new DtUsageRulePath(this, null, Keys.DT_USAGE_RULE_ASSIGNED_USAGE_RULE_ID_FK.getInverseKey());

        return _dtUsageRule;
    }

    private transient UsageRuleExpressionPath _usageRuleExpression;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.usage_rule_expression</code> table
     */
    public UsageRuleExpressionPath usageRuleExpression() {
        if (_usageRuleExpression == null)
            _usageRuleExpression = new UsageRuleExpressionPath(this, null, Keys.USAGE_RULE_EXPRESSION_REPRESENTED_USAGE_RULE_ID_FK.getInverseKey());

        return _usageRuleExpression;
    }

    @Override
    public UsageRule as(String alias) {
        return new UsageRule(DSL.name(alias), this);
    }

    @Override
    public UsageRule as(Name alias) {
        return new UsageRule(alias, this);
    }

    @Override
    public UsageRule as(Table<?> alias) {
        return new UsageRule(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsageRule rename(String name) {
        return new UsageRule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsageRule rename(Name name) {
        return new UsageRule(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsageRule rename(Table<?> name) {
        return new UsageRule(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsageRule where(Condition condition) {
        return new UsageRule(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsageRule where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsageRule where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsageRule where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UsageRule where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UsageRule where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UsageRule where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UsageRule where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsageRule whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsageRule whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
