/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.e2e.impl.api.jooq.entity.tables.records;


import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.Library;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LibraryRecord extends UpdatableRecordImpl<LibraryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>oagi.library.library_id</code>. Internal, primary
     * database key.
     */
    public void setLibraryId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>oagi.library.library_id</code>. Internal, primary
     * database key.
     */
    public ULong getLibraryId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>oagi.library.name</code>. A library name.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>oagi.library.name</code>. A library name.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>oagi.library.type</code>. A type of the library.
     */
    public void setType(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>oagi.library.type</code>. A type of the library.
     */
    public String getType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>oagi.library.organization</code>. The name of the
     * organization responsible for maintaining or managing the library.
     */
    public void setOrganization(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>oagi.library.organization</code>. The name of the
     * organization responsible for maintaining or managing the library.
     */
    public String getOrganization() {
        return (String) get(3);
    }

    /**
     * Setter for <code>oagi.library.description</code>. A brief summary or
     * overview of the library's purpose and functionality.
     */
    public void setDescription(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>oagi.library.description</code>. A brief summary or
     * overview of the library's purpose and functionality.
     */
    public String getDescription() {
        return (String) get(4);
    }

    /**
     * Setter for <code>oagi.library.link</code>. A URL directing to the
     * library's homepage, documentation, or repository for further details.
     */
    public void setLink(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>oagi.library.link</code>. A URL directing to the
     * library's homepage, documentation, or repository for further details.
     */
    public String getLink() {
        return (String) get(5);
    }

    /**
     * Setter for <code>oagi.library.domain</code>. Specifies the area of focus
     * or application domain of the library (e.g., agriculture, finance, or
     * aerospace).
     */
    public void setDomain(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>oagi.library.domain</code>. Specifies the area of focus
     * or application domain of the library (e.g., agriculture, finance, or
     * aerospace).
     */
    public String getDomain() {
        return (String) get(6);
    }

    /**
     * Setter for <code>oagi.library.state</code>. Current state of the library.
     */
    public void setState(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>oagi.library.state</code>. Current state of the library.
     */
    public String getState() {
        return (String) get(7);
    }

    /**
     * Setter for <code>oagi.library.is_read_only</code>. Indicates if the
     * library is read-only (0 = False, 1 = True).
     */
    public void setIsReadOnly(Byte value) {
        set(8, value);
    }

    /**
     * Getter for <code>oagi.library.is_read_only</code>. Indicates if the
     * library is read-only (0 = False, 1 = True).
     */
    public Byte getIsReadOnly() {
        return (Byte) get(8);
    }

    /**
     * Setter for <code>oagi.library.created_by</code>. Foreign key to the
     * APP_USER table referring to the user who creates the record.
     */
    public void setCreatedBy(ULong value) {
        set(9, value);
    }

    /**
     * Getter for <code>oagi.library.created_by</code>. Foreign key to the
     * APP_USER table referring to the user who creates the record.
     */
    public ULong getCreatedBy() {
        return (ULong) get(9);
    }

    /**
     * Setter for <code>oagi.library.last_updated_by</code>. Foreign key to the
     * APP_USER table referring to the last user who updated the record.
     */
    public void setLastUpdatedBy(ULong value) {
        set(10, value);
    }

    /**
     * Getter for <code>oagi.library.last_updated_by</code>. Foreign key to the
     * APP_USER table referring to the last user who updated the record.
     */
    public ULong getLastUpdatedBy() {
        return (ULong) get(10);
    }

    /**
     * Setter for <code>oagi.library.creation_timestamp</code>. Timestamp when
     * the record was created.
     */
    public void setCreationTimestamp(LocalDateTime value) {
        set(11, value);
    }

    /**
     * Getter for <code>oagi.library.creation_timestamp</code>. Timestamp when
     * the record was created.
     */
    public LocalDateTime getCreationTimestamp() {
        return (LocalDateTime) get(11);
    }

    /**
     * Setter for <code>oagi.library.last_update_timestamp</code>. Timestamp
     * when the record was last updated.
     */
    public void setLastUpdateTimestamp(LocalDateTime value) {
        set(12, value);
    }

    /**
     * Getter for <code>oagi.library.last_update_timestamp</code>. Timestamp
     * when the record was last updated.
     */
    public LocalDateTime getLastUpdateTimestamp() {
        return (LocalDateTime) get(12);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LibraryRecord
     */
    public LibraryRecord() {
        super(Library.LIBRARY);
    }

    /**
     * Create a detached, initialised LibraryRecord
     */
    public LibraryRecord(ULong libraryId, String name, String type, String organization, String description, String link, String domain, String state, Byte isReadOnly, ULong createdBy, ULong lastUpdatedBy, LocalDateTime creationTimestamp, LocalDateTime lastUpdateTimestamp) {
        super(Library.LIBRARY);

        setLibraryId(libraryId);
        setName(name);
        setType(type);
        setOrganization(organization);
        setDescription(description);
        setLink(link);
        setDomain(domain);
        setState(state);
        setIsReadOnly(isReadOnly);
        setCreatedBy(createdBy);
        setLastUpdatedBy(lastUpdatedBy);
        setCreationTimestamp(creationTimestamp);
        setLastUpdateTimestamp(lastUpdateTimestamp);
        resetTouchedOnNotNull();
    }
}
