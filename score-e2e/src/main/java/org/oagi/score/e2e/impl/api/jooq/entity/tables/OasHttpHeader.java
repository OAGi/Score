/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.e2e.impl.api.jooq.entity.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.e2e.impl.api.jooq.entity.Keys;
import org.oagi.score.e2e.impl.api.jooq.entity.Oagi;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.records.OasHttpHeaderRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OasHttpHeader extends TableImpl<OasHttpHeaderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.oas_http_header</code>
     */
    public static final OasHttpHeader OAS_HTTP_HEADER = new OasHttpHeader();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OasHttpHeaderRecord> getRecordType() {
        return OasHttpHeaderRecord.class;
    }

    /**
     * The column <code>oagi.oas_http_header.oas_http_header_id</code>. The
     * primary key of the record.
     */
    public final TableField<OasHttpHeaderRecord, ULong> OAS_HTTP_HEADER_ID = createField(DSL.name("oas_http_header_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "The primary key of the record.");

    /**
     * The column <code>oagi.oas_http_header.guid</code>. The GUID of the
     * record.
     */
    public final TableField<OasHttpHeaderRecord, String> GUID = createField(DSL.name("guid"), SQLDataType.VARCHAR(41).nullable(false), this, "The GUID of the record.");

    /**
     * The column <code>oagi.oas_http_header.header</code>. REQUIRED. The name
     * of the header. Header names are case sensitive. 
     */
    public final TableField<OasHttpHeaderRecord, String> HEADER = createField(DSL.name("header"), SQLDataType.VARCHAR(200).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "REQUIRED. The name of the header. Header names are case sensitive. ");

    /**
     * The column <code>oagi.oas_http_header.description</code>. A brief
     * description of the header. This could contain examples of use. CommonMark
     * syntax MAY be used for rich text representation.
     */
    public final TableField<OasHttpHeaderRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "A brief description of the header. This could contain examples of use. CommonMark syntax MAY be used for rich text representation.");

    /**
     * The column <code>oagi.oas_http_header.agency_id_list_value_id</code>. A
     * reference of the agency id list value
     */
    public final TableField<OasHttpHeaderRecord, ULong> AGENCY_ID_LIST_VALUE_ID = createField(DSL.name("agency_id_list_value_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A reference of the agency id list value");

    /**
     * The column <code>oagi.oas_http_header.schema_type_reference</code>.
     * REQUIRED. The schema defining the type used for the header using the
     * reference string, $ref.
     */
    public final TableField<OasHttpHeaderRecord, String> SCHEMA_TYPE_REFERENCE = createField(DSL.name("schema_type_reference"), SQLDataType.CLOB.nullable(false), this, "REQUIRED. The schema defining the type used for the header using the reference string, $ref.");

    /**
     * The column <code>oagi.oas_http_header.owner_user_id</code>. The user who
     * owns the record.
     */
    public final TableField<OasHttpHeaderRecord, ULong> OWNER_USER_ID = createField(DSL.name("owner_user_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The user who owns the record.");

    /**
     * The column <code>oagi.oas_http_header.created_by</code>. The user who
     * creates the record.
     */
    public final TableField<OasHttpHeaderRecord, ULong> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The user who creates the record.");

    /**
     * The column <code>oagi.oas_http_header.last_updated_by</code>. The user
     * who last updates the record.
     */
    public final TableField<OasHttpHeaderRecord, ULong> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The user who last updates the record.");

    /**
     * The column <code>oagi.oas_http_header.creation_timestamp</code>. The
     * timestamp when the record is created.
     */
    public final TableField<OasHttpHeaderRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "The timestamp when the record is created.");

    /**
     * The column <code>oagi.oas_http_header.last_update_timestamp</code>. The
     * timestamp when the record is last updated.
     */
    public final TableField<OasHttpHeaderRecord, LocalDateTime> LAST_UPDATE_TIMESTAMP = createField(DSL.name("last_update_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "The timestamp when the record is last updated.");

    private OasHttpHeader(Name alias, Table<OasHttpHeaderRecord> aliased) {
        this(alias, aliased, null);
    }

    private OasHttpHeader(Name alias, Table<OasHttpHeaderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>oagi.oas_http_header</code> table reference
     */
    public OasHttpHeader(String alias) {
        this(DSL.name(alias), OAS_HTTP_HEADER);
    }

    /**
     * Create an aliased <code>oagi.oas_http_header</code> table reference
     */
    public OasHttpHeader(Name alias) {
        this(alias, OAS_HTTP_HEADER);
    }

    /**
     * Create a <code>oagi.oas_http_header</code> table reference
     */
    public OasHttpHeader() {
        this(DSL.name("oas_http_header"), null);
    }

    public <O extends Record> OasHttpHeader(Table<O> child, ForeignKey<O, OasHttpHeaderRecord> key) {
        super(child, key, OAS_HTTP_HEADER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<OasHttpHeaderRecord, ULong> getIdentity() {
        return (Identity<OasHttpHeaderRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<OasHttpHeaderRecord> getPrimaryKey() {
        return Keys.KEY_OAS_HTTP_HEADER_PRIMARY;
    }

    @Override
    public List<ForeignKey<OasHttpHeaderRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OAS_HTTP_HEADER_AGENCY_ID_LIST_VALUE_ID_FK, Keys.OAS_HTTP_HEADER_OWNER_USER_ID_FK, Keys.OAS_HTTP_HEADER_CREATED_BY_FK, Keys.OAS_HTTP_HEADER_LAST_UPDATED_BY_FK);
    }

    private transient AgencyIdListValue _agencyIdListValue;
    private transient AppUser _oasHttpHeaderOwnerUserIdFk;
    private transient AppUser _oasHttpHeaderCreatedByFk;
    private transient AppUser _oasHttpHeaderLastUpdatedByFk;

    /**
     * Get the implicit join path to the <code>oagi.agency_id_list_value</code>
     * table.
     */
    public AgencyIdListValue agencyIdListValue() {
        if (_agencyIdListValue == null)
            _agencyIdListValue = new AgencyIdListValue(this, Keys.OAS_HTTP_HEADER_AGENCY_ID_LIST_VALUE_ID_FK);

        return _agencyIdListValue;
    }

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>oas_http_header_owner_user_id_fk</code> key.
     */
    public AppUser oasHttpHeaderOwnerUserIdFk() {
        if (_oasHttpHeaderOwnerUserIdFk == null)
            _oasHttpHeaderOwnerUserIdFk = new AppUser(this, Keys.OAS_HTTP_HEADER_OWNER_USER_ID_FK);

        return _oasHttpHeaderOwnerUserIdFk;
    }

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>oas_http_header_created_by_fk</code> key.
     */
    public AppUser oasHttpHeaderCreatedByFk() {
        if (_oasHttpHeaderCreatedByFk == null)
            _oasHttpHeaderCreatedByFk = new AppUser(this, Keys.OAS_HTTP_HEADER_CREATED_BY_FK);

        return _oasHttpHeaderCreatedByFk;
    }

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>oas_http_header_last_updated_by_fk</code> key.
     */
    public AppUser oasHttpHeaderLastUpdatedByFk() {
        if (_oasHttpHeaderLastUpdatedByFk == null)
            _oasHttpHeaderLastUpdatedByFk = new AppUser(this, Keys.OAS_HTTP_HEADER_LAST_UPDATED_BY_FK);

        return _oasHttpHeaderLastUpdatedByFk;
    }

    @Override
    public OasHttpHeader as(String alias) {
        return new OasHttpHeader(DSL.name(alias), this);
    }

    @Override
    public OasHttpHeader as(Name alias) {
        return new OasHttpHeader(alias, this);
    }

    @Override
    public OasHttpHeader as(Table<?> alias) {
        return new OasHttpHeader(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OasHttpHeader rename(String name) {
        return new OasHttpHeader(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OasHttpHeader rename(Name name) {
        return new OasHttpHeader(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OasHttpHeader rename(Table<?> name) {
        return new OasHttpHeader(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<ULong, String, String, String, ULong, String, ULong, ULong, ULong, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super ULong, ? super String, ? super String, ? super String, ? super ULong, ? super String, ? super ULong, ? super ULong, ? super ULong, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super ULong, ? super String, ? super String, ? super String, ? super ULong, ? super String, ? super ULong, ? super ULong, ? super ULong, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
