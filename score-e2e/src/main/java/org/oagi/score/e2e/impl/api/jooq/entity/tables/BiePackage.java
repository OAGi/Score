/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.e2e.impl.api.jooq.entity.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.e2e.impl.api.jooq.entity.Keys;
import org.oagi.score.e2e.impl.api.jooq.entity.Oagi;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.AppUser.AppUserPath;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.BiePackage.BiePackagePath;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.BiePackageTopLevelAsbiep.BiePackageTopLevelAsbiepPath;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.records.BiePackageRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BiePackage extends TableImpl<BiePackageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.bie_package</code>
     */
    public static final BiePackage BIE_PACKAGE = new BiePackage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BiePackageRecord> getRecordType() {
        return BiePackageRecord.class;
    }

    /**
     * The column <code>oagi.bie_package.bie_package_id</code>. The primary key
     * of the BIE package record.
     */
    public final TableField<BiePackageRecord, ULong> BIE_PACKAGE_ID = createField(DSL.name("bie_package_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "The primary key of the BIE package record.");

    /**
     * The column <code>oagi.bie_package.version_id</code>. A text field used
     * for containing the release package version ID value (ex: CDM_1.1.0). All
     * BIEs released as part of the same CDM package should have the same
     * package version value.
     */
    public final TableField<BiePackageRecord, String> VERSION_ID = createField(DSL.name("version_id"), SQLDataType.VARCHAR(100).nullable(false), this, "A text field used for containing the release package version ID value (ex: CDM_1.1.0). All BIEs released as part of the same CDM package should have the same package version value.");

    /**
     * The column <code>oagi.bie_package.version_name</code>. A text field used
     * for containing the release package version name value (ex: 2024 Common
     * Data Model Package Release). All BIEs released as part of the same CDM
     * package should have the same package version value.
     */
    public final TableField<BiePackageRecord, String> VERSION_NAME = createField(DSL.name("version_name"), SQLDataType.VARCHAR(200).nullable(false), this, "A text field used for containing the release package version name value (ex: 2024 Common Data Model Package Release). All BIEs released as part of the same CDM package should have the same package version value.");

    /**
     * The column <code>oagi.bie_package.description</code>. A text field used
     * for containing a short description of the release package.  All BIEs
     * released as part of the same CDM package should have the same package
     * description value.
     */
    public final TableField<BiePackageRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "A text field used for containing a short description of the release package.  All BIEs released as part of the same CDM package should have the same package description value.");

    /**
     * The column <code>oagi.bie_package.state</code>. WIP, QA, Production. This
     * the revision life cycle state of the BIE package.
     */
    public final TableField<BiePackageRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(20).defaultValue(DSL.field(DSL.raw("'WIP'"), SQLDataType.VARCHAR)), this, "WIP, QA, Production. This the revision life cycle state of the BIE package.");

    /**
     * The column <code>oagi.bie_package.owner_user_id</code>. Foreign key to
     * the BIE package. This is the user who owns the entity, is allowed to edit
     * the entity, and who can transfer the ownership to another user.
     */
    public final TableField<BiePackageRecord, ULong> OWNER_USER_ID = createField(DSL.name("owner_user_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the BIE package. This is the user who owns the entity, is allowed to edit the entity, and who can transfer the ownership to another user.");

    /**
     * The column <code>oagi.bie_package.created_by</code>. A foreign key
     * referring to the user who creates the BIE package. The creator of the BIE
     * package is also its owner by default.
     */
    public final TableField<BiePackageRecord, ULong> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A foreign key referring to the user who creates the BIE package. The creator of the BIE package is also its owner by default.");

    /**
     * The column <code>oagi.bie_package.last_updated_by</code>. A foreign key
     * referring to the last user who has updated the BIE package record. This
     * may be the user who is in the same group as the creator.
     */
    public final TableField<BiePackageRecord, ULong> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A foreign key referring to the last user who has updated the BIE package record. This may be the user who is in the same group as the creator.");

    /**
     * The column <code>oagi.bie_package.creation_timestamp</code>. Timestamp
     * when the BIE package record was first created.
     */
    public final TableField<BiePackageRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Timestamp when the BIE package record was first created.");

    /**
     * The column <code>oagi.bie_package.last_update_timestamp</code>. The
     * timestamp when the BIE package was last updated.
     */
    public final TableField<BiePackageRecord, LocalDateTime> LAST_UPDATE_TIMESTAMP = createField(DSL.name("last_update_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "The timestamp when the BIE package was last updated.");

    /**
     * The column <code>oagi.bie_package.source_bie_package_id</code>. A foreign
     * key referring to the source BIE_PACKAGE_ID which has linked to this
     * record.
     */
    public final TableField<BiePackageRecord, ULong> SOURCE_BIE_PACKAGE_ID = createField(DSL.name("source_bie_package_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "A foreign key referring to the source BIE_PACKAGE_ID which has linked to this record.");

    /**
     * The column <code>oagi.bie_package.source_action</code>. An action that
     * had used to create a reference from the source (e.g., 'Copy' or
     * 'Uplift'.)
     */
    public final TableField<BiePackageRecord, String> SOURCE_ACTION = createField(DSL.name("source_action"), SQLDataType.VARCHAR(20).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "An action that had used to create a reference from the source (e.g., 'Copy' or 'Uplift'.)");

    /**
     * The column <code>oagi.bie_package.source_timestamp</code>. A timestamp
     * when a source reference had been made.
     */
    public final TableField<BiePackageRecord, LocalDateTime> SOURCE_TIMESTAMP = createField(DSL.name("source_timestamp"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "A timestamp when a source reference had been made.");

    private BiePackage(Name alias, Table<BiePackageRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BiePackage(Name alias, Table<BiePackageRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.bie_package</code> table reference
     */
    public BiePackage(String alias) {
        this(DSL.name(alias), BIE_PACKAGE);
    }

    /**
     * Create an aliased <code>oagi.bie_package</code> table reference
     */
    public BiePackage(Name alias) {
        this(alias, BIE_PACKAGE);
    }

    /**
     * Create a <code>oagi.bie_package</code> table reference
     */
    public BiePackage() {
        this(DSL.name("bie_package"), null);
    }

    public <O extends Record> BiePackage(Table<O> path, ForeignKey<O, BiePackageRecord> childPath, InverseForeignKey<O, BiePackageRecord> parentPath) {
        super(path, childPath, parentPath, BIE_PACKAGE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BiePackagePath extends BiePackage implements Path<BiePackageRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BiePackagePath(Table<O> path, ForeignKey<O, BiePackageRecord> childPath, InverseForeignKey<O, BiePackageRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BiePackagePath(Name alias, Table<BiePackageRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BiePackagePath as(String alias) {
            return new BiePackagePath(DSL.name(alias), this);
        }

        @Override
        public BiePackagePath as(Name alias) {
            return new BiePackagePath(alias, this);
        }

        @Override
        public BiePackagePath as(Table<?> alias) {
            return new BiePackagePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<BiePackageRecord, ULong> getIdentity() {
        return (Identity<BiePackageRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<BiePackageRecord> getPrimaryKey() {
        return Keys.KEY_BIE_PACKAGE_PRIMARY;
    }

    @Override
    public List<ForeignKey<BiePackageRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BIE_PACKAGE_OWNER_USER_ID_FK, Keys.BIE_PACKAGE_CREATED_BY_FK, Keys.BIE_PACKAGE_LAST_UPDATED_BY_FK, Keys.BIE_PACKAGE_SOURCE_BIE_PACKAGE_ID_FK);
    }

    private transient AppUserPath _biePackageOwnerUserIdFk;

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>bie_package_owner_user_id_fk</code> key.
     */
    public AppUserPath biePackageOwnerUserIdFk() {
        if (_biePackageOwnerUserIdFk == null)
            _biePackageOwnerUserIdFk = new AppUserPath(this, Keys.BIE_PACKAGE_OWNER_USER_ID_FK, null);

        return _biePackageOwnerUserIdFk;
    }

    private transient AppUserPath _biePackageCreatedByFk;

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>bie_package_created_by_fk</code> key.
     */
    public AppUserPath biePackageCreatedByFk() {
        if (_biePackageCreatedByFk == null)
            _biePackageCreatedByFk = new AppUserPath(this, Keys.BIE_PACKAGE_CREATED_BY_FK, null);

        return _biePackageCreatedByFk;
    }

    private transient AppUserPath _biePackageLastUpdatedByFk;

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>bie_package_last_updated_by_fk</code> key.
     */
    public AppUserPath biePackageLastUpdatedByFk() {
        if (_biePackageLastUpdatedByFk == null)
            _biePackageLastUpdatedByFk = new AppUserPath(this, Keys.BIE_PACKAGE_LAST_UPDATED_BY_FK, null);

        return _biePackageLastUpdatedByFk;
    }

    private transient BiePackagePath _biePackage;

    /**
     * Get the implicit join path to the <code>oagi.bie_package</code> table.
     */
    public BiePackagePath biePackage() {
        if (_biePackage == null)
            _biePackage = new BiePackagePath(this, Keys.BIE_PACKAGE_SOURCE_BIE_PACKAGE_ID_FK, null);

        return _biePackage;
    }

    private transient BiePackageTopLevelAsbiepPath _biePackageTopLevelAsbiep;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.bie_package_top_level_asbiep</code> table
     */
    public BiePackageTopLevelAsbiepPath biePackageTopLevelAsbiep() {
        if (_biePackageTopLevelAsbiep == null)
            _biePackageTopLevelAsbiep = new BiePackageTopLevelAsbiepPath(this, null, Keys.BIE_PACKAGE_TOP_LEVEL_ASBIEP_BIE_PACKAGE_ID_FK.getInverseKey());

        return _biePackageTopLevelAsbiep;
    }

    @Override
    public BiePackage as(String alias) {
        return new BiePackage(DSL.name(alias), this);
    }

    @Override
    public BiePackage as(Name alias) {
        return new BiePackage(alias, this);
    }

    @Override
    public BiePackage as(Table<?> alias) {
        return new BiePackage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BiePackage rename(String name) {
        return new BiePackage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BiePackage rename(Name name) {
        return new BiePackage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BiePackage rename(Table<?> name) {
        return new BiePackage(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BiePackage where(Condition condition) {
        return new BiePackage(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BiePackage where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BiePackage where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BiePackage where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BiePackage where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BiePackage where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BiePackage where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BiePackage where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BiePackage whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BiePackage whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
