/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.e2e.impl.api.jooq.entity.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.e2e.impl.api.jooq.entity.Keys;
import org.oagi.score.e2e.impl.api.jooq.entity.Oagi;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.records.ConfigurationRecord;

import java.util.function.Function;


/**
 * The table stores configuration properties of the application.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Configuration extends TableImpl<ConfigurationRecord> {

    /**
     * The reference instance of <code>oagi.configuration</code>
     */
    public static final Configuration CONFIGURATION = new Configuration();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>oagi.configuration.configuration_id</code>. Primary key
     * column.
     */
    public final TableField<ConfigurationRecord, ULong> CONFIGURATION_ID = createField(DSL.name("configuration_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key column.");
    /**
     * The column <code>oagi.configuration.name</code>. The name of
     * configuration property.
     */
    public final TableField<ConfigurationRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100), this, "The name of configuration property.");
    /**
     * The column <code>oagi.configuration.type</code>. The type of
     * configuration property.
     */
    public final TableField<ConfigurationRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(100), this, "The type of configuration property.");
    /**
     * The column <code>oagi.configuration.value</code>. The value of
     * configuration property.
     */
    public final TableField<ConfigurationRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR(100), this, "The value of configuration property.");

    private Configuration(Name alias, Table<ConfigurationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Configuration(Name alias, Table<ConfigurationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("The table stores configuration properties of the application. "), TableOptions.table());
    }

    /**
     * Create an aliased <code>oagi.configuration</code> table reference
     */
    public Configuration(String alias) {
        this(DSL.name(alias), CONFIGURATION);
    }

    /**
     * Create an aliased <code>oagi.configuration</code> table reference
     */
    public Configuration(Name alias) {
        this(alias, CONFIGURATION);
    }

    /**
     * Create a <code>oagi.configuration</code> table reference
     */
    public Configuration() {
        this(DSL.name("configuration"), null);
    }

    public <O extends Record> Configuration(Table<O> child, ForeignKey<O, ConfigurationRecord> key) {
        super(child, key, CONFIGURATION);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConfigurationRecord> getRecordType() {
        return ConfigurationRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<ConfigurationRecord, ULong> getIdentity() {
        return (Identity<ConfigurationRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<ConfigurationRecord> getPrimaryKey() {
        return Keys.KEY_CONFIGURATION_PRIMARY;
    }

    @Override
    public Configuration as(String alias) {
        return new Configuration(DSL.name(alias), this);
    }

    @Override
    public Configuration as(Name alias) {
        return new Configuration(alias, this);
    }

    @Override
    public Configuration as(Table<?> alias) {
        return new Configuration(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Configuration rename(String name) {
        return new Configuration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Configuration rename(Name name) {
        return new Configuration(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Configuration rename(Table<?> name) {
        return new Configuration(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<ULong, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super ULong, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super ULong, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
