/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.e2e.impl.api.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.e2e.impl.api.jooq.entity.Keys;
import org.oagi.score.e2e.impl.api.jooq.entity.Oagi;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.records.ConfigurationRecord;


/**
 * The table stores configuration properties of the application.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Configuration extends TableImpl<ConfigurationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.configuration</code>
     */
    public static final Configuration CONFIGURATION = new Configuration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConfigurationRecord> getRecordType() {
        return ConfigurationRecord.class;
    }

    /**
     * The column <code>oagi.configuration.configuration_id</code>. Primary key
     * column.
     */
    public final TableField<ConfigurationRecord, ULong> CONFIGURATION_ID = createField(DSL.name("configuration_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key column.");

    /**
     * The column <code>oagi.configuration.name</code>. The name of
     * configuration property.
     */
    public final TableField<ConfigurationRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "The name of configuration property.");

    /**
     * The column <code>oagi.configuration.type</code>. The type of
     * configuration property.
     */
    public final TableField<ConfigurationRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "The type of configuration property.");

    /**
     * The column <code>oagi.configuration.value</code>. The value of
     * configuration property.
     */
    public final TableField<ConfigurationRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "The value of configuration property.");

    private Configuration(Name alias, Table<ConfigurationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Configuration(Name alias, Table<ConfigurationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("The table stores configuration properties of the application."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.configuration</code> table reference
     */
    public Configuration(String alias) {
        this(DSL.name(alias), CONFIGURATION);
    }

    /**
     * Create an aliased <code>oagi.configuration</code> table reference
     */
    public Configuration(Name alias) {
        this(alias, CONFIGURATION);
    }

    /**
     * Create a <code>oagi.configuration</code> table reference
     */
    public Configuration() {
        this(DSL.name("configuration"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<ConfigurationRecord, ULong> getIdentity() {
        return (Identity<ConfigurationRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<ConfigurationRecord> getPrimaryKey() {
        return Keys.KEY_CONFIGURATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<ConfigurationRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CONFIGURATION_CONFIGURATION_UK1);
    }

    @Override
    public Configuration as(String alias) {
        return new Configuration(DSL.name(alias), this);
    }

    @Override
    public Configuration as(Name alias) {
        return new Configuration(alias, this);
    }

    @Override
    public Configuration as(Table<?> alias) {
        return new Configuration(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Configuration rename(String name) {
        return new Configuration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Configuration rename(Name name) {
        return new Configuration(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Configuration rename(Table<?> name) {
        return new Configuration(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Configuration where(Condition condition) {
        return new Configuration(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Configuration where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Configuration where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Configuration where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Configuration where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Configuration where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Configuration where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Configuration where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Configuration whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Configuration whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
