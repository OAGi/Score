/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.e2e.impl.api.jooq.entity.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.e2e.impl.api.jooq.entity.Keys;
import org.oagi.score.e2e.impl.api.jooq.entity.Oagi;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.records.UserTenantRecord;


/**
 * This table captures the tenant roles of the user
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserTenant extends TableImpl<UserTenantRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.user_tenant</code>
     */
    public static final UserTenant USER_TENANT = new UserTenant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserTenantRecord> getRecordType() {
        return UserTenantRecord.class;
    }

    /**
     * The column <code>oagi.user_tenant.user_tenant_id</code>. Primary key
     * column.
     */
    public final TableField<UserTenantRecord, ULong> USER_TENANT_ID = createField(DSL.name("user_tenant_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key column.");

    /**
     * The column <code>oagi.user_tenant.tenant_id</code>. Assigned tenant to
     * the user.
     */
    public final TableField<UserTenantRecord, ULong> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Assigned tenant to the user.");

    /**
     * The column <code>oagi.user_tenant.app_user_id</code>. Application user.
     */
    public final TableField<UserTenantRecord, ULong> APP_USER_ID = createField(DSL.name("app_user_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Application user.");

    private UserTenant(Name alias, Table<UserTenantRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserTenant(Name alias, Table<UserTenantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("This table captures the tenant roles of the user"), TableOptions.table());
    }

    /**
     * Create an aliased <code>oagi.user_tenant</code> table reference
     */
    public UserTenant(String alias) {
        this(DSL.name(alias), USER_TENANT);
    }

    /**
     * Create an aliased <code>oagi.user_tenant</code> table reference
     */
    public UserTenant(Name alias) {
        this(alias, USER_TENANT);
    }

    /**
     * Create a <code>oagi.user_tenant</code> table reference
     */
    public UserTenant() {
        this(DSL.name("user_tenant"), null);
    }

    public <O extends Record> UserTenant(Table<O> child, ForeignKey<O, UserTenantRecord> key) {
        super(child, key, USER_TENANT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<UserTenantRecord, ULong> getIdentity() {
        return (Identity<UserTenantRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserTenantRecord> getPrimaryKey() {
        return Keys.KEY_USER_TENANT_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserTenantRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_USER_TENANT_USER_TENANT_PAIR);
    }

    @Override
    public List<ForeignKey<UserTenantRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_TENANT_TENANT_ID_FK, Keys.USER_TENANT_TENANT_ID_APP_USER_ID_FK);
    }

    private transient Tenant _tenant;
    private transient AppUser _appUser;

    /**
     * Get the implicit join path to the <code>oagi.tenant</code> table.
     */
    public Tenant tenant() {
        if (_tenant == null)
            _tenant = new Tenant(this, Keys.USER_TENANT_TENANT_ID_FK);

        return _tenant;
    }

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table.
     */
    public AppUser appUser() {
        if (_appUser == null)
            _appUser = new AppUser(this, Keys.USER_TENANT_TENANT_ID_APP_USER_ID_FK);

        return _appUser;
    }

    @Override
    public UserTenant as(String alias) {
        return new UserTenant(DSL.name(alias), this);
    }

    @Override
    public UserTenant as(Name alias) {
        return new UserTenant(alias, this);
    }

    @Override
    public UserTenant as(Table<?> alias) {
        return new UserTenant(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserTenant rename(String name) {
        return new UserTenant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserTenant rename(Name name) {
        return new UserTenant(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserTenant rename(Table<?> name) {
        return new UserTenant(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<ULong, ULong, ULong> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super ULong, ? super ULong, ? super ULong, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super ULong, ? super ULong, ? super ULong, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
