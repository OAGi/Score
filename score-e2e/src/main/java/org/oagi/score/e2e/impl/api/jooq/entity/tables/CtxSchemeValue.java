/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.e2e.impl.api.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.e2e.impl.api.jooq.entity.Keys;
import org.oagi.score.e2e.impl.api.jooq.entity.Oagi;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.BizCtxValue.BizCtxValuePath;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.CtxScheme.CtxSchemePath;
import org.oagi.score.e2e.impl.api.jooq.entity.tables.records.CtxSchemeValueRecord;


/**
 * This table stores the context scheme values for a particular context scheme
 * in the CTX_SCHEME table.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CtxSchemeValue extends TableImpl<CtxSchemeValueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.ctx_scheme_value</code>
     */
    public static final CtxSchemeValue CTX_SCHEME_VALUE = new CtxSchemeValue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CtxSchemeValueRecord> getRecordType() {
        return CtxSchemeValueRecord.class;
    }

    /**
     * The column <code>oagi.ctx_scheme_value.ctx_scheme_value_id</code>.
     * Primary, internal database key.
     */
    public final TableField<CtxSchemeValueRecord, ULong> CTX_SCHEME_VALUE_ID = createField(DSL.name("ctx_scheme_value_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary, internal database key.");

    /**
     * The column <code>oagi.ctx_scheme_value.guid</code>. A globally unique
     * identifier (GUID).
     */
    public final TableField<CtxSchemeValueRecord, String> GUID = createField(DSL.name("guid"), SQLDataType.CHAR(32).nullable(false), this, "A globally unique identifier (GUID).");

    /**
     * The column <code>oagi.ctx_scheme_value.value</code>. A short value for
     * the scheme value similar to the code list value.
     */
    public final TableField<CtxSchemeValueRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.field(DSL.raw("''"), SQLDataType.VARCHAR)), this, "A short value for the scheme value similar to the code list value.");

    /**
     * The column <code>oagi.ctx_scheme_value.meaning</code>. The description,
     * explanatiion of the scheme value.
     */
    public final TableField<CtxSchemeValueRecord, String> MEANING = createField(DSL.name("meaning"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "The description, explanatiion of the scheme value.");

    /**
     * The column <code>oagi.ctx_scheme_value.owner_ctx_scheme_id</code>.
     * Foreign key to the CTX_SCHEME table. It identifies the context scheme, to
     * which this scheme value belongs.
     */
    public final TableField<CtxSchemeValueRecord, ULong> OWNER_CTX_SCHEME_ID = createField(DSL.name("owner_ctx_scheme_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the CTX_SCHEME table. It identifies the context scheme, to which this scheme value belongs.");

    private CtxSchemeValue(Name alias, Table<CtxSchemeValueRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CtxSchemeValue(Name alias, Table<CtxSchemeValueRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("This table stores the context scheme values for a particular context scheme in the CTX_SCHEME table."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.ctx_scheme_value</code> table reference
     */
    public CtxSchemeValue(String alias) {
        this(DSL.name(alias), CTX_SCHEME_VALUE);
    }

    /**
     * Create an aliased <code>oagi.ctx_scheme_value</code> table reference
     */
    public CtxSchemeValue(Name alias) {
        this(alias, CTX_SCHEME_VALUE);
    }

    /**
     * Create a <code>oagi.ctx_scheme_value</code> table reference
     */
    public CtxSchemeValue() {
        this(DSL.name("ctx_scheme_value"), null);
    }

    public <O extends Record> CtxSchemeValue(Table<O> path, ForeignKey<O, CtxSchemeValueRecord> childPath, InverseForeignKey<O, CtxSchemeValueRecord> parentPath) {
        super(path, childPath, parentPath, CTX_SCHEME_VALUE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CtxSchemeValuePath extends CtxSchemeValue implements Path<CtxSchemeValueRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CtxSchemeValuePath(Table<O> path, ForeignKey<O, CtxSchemeValueRecord> childPath, InverseForeignKey<O, CtxSchemeValueRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CtxSchemeValuePath(Name alias, Table<CtxSchemeValueRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CtxSchemeValuePath as(String alias) {
            return new CtxSchemeValuePath(DSL.name(alias), this);
        }

        @Override
        public CtxSchemeValuePath as(Name alias) {
            return new CtxSchemeValuePath(alias, this);
        }

        @Override
        public CtxSchemeValuePath as(Table<?> alias) {
            return new CtxSchemeValuePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<CtxSchemeValueRecord, ULong> getIdentity() {
        return (Identity<CtxSchemeValueRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CtxSchemeValueRecord> getPrimaryKey() {
        return Keys.KEY_CTX_SCHEME_VALUE_PRIMARY;
    }

    @Override
    public List<UniqueKey<CtxSchemeValueRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CTX_SCHEME_VALUE_CTX_SCHEME_VALUE_UK1);
    }

    @Override
    public List<ForeignKey<CtxSchemeValueRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CTX_SCHEME_VALUE_OWNER_CTX_SCHEME_ID_FK);
    }

    private transient CtxSchemePath _ctxScheme;

    /**
     * Get the implicit join path to the <code>oagi.ctx_scheme</code> table.
     */
    public CtxSchemePath ctxScheme() {
        if (_ctxScheme == null)
            _ctxScheme = new CtxSchemePath(this, Keys.CTX_SCHEME_VALUE_OWNER_CTX_SCHEME_ID_FK, null);

        return _ctxScheme;
    }

    private transient BizCtxValuePath _bizCtxValue;

    /**
     * Get the implicit to-many join path to the <code>oagi.biz_ctx_value</code>
     * table
     */
    public BizCtxValuePath bizCtxValue() {
        if (_bizCtxValue == null)
            _bizCtxValue = new BizCtxValuePath(this, null, Keys.BIZ_CTX_VALUE_CTX_SCHEME_VALUE_ID_FK.getInverseKey());

        return _bizCtxValue;
    }

    @Override
    public CtxSchemeValue as(String alias) {
        return new CtxSchemeValue(DSL.name(alias), this);
    }

    @Override
    public CtxSchemeValue as(Name alias) {
        return new CtxSchemeValue(alias, this);
    }

    @Override
    public CtxSchemeValue as(Table<?> alias) {
        return new CtxSchemeValue(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CtxSchemeValue rename(String name) {
        return new CtxSchemeValue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CtxSchemeValue rename(Name name) {
        return new CtxSchemeValue(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CtxSchemeValue rename(Table<?> name) {
        return new CtxSchemeValue(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CtxSchemeValue where(Condition condition) {
        return new CtxSchemeValue(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CtxSchemeValue where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CtxSchemeValue where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CtxSchemeValue where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CtxSchemeValue where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CtxSchemeValue where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CtxSchemeValue where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CtxSchemeValue where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CtxSchemeValue whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CtxSchemeValue whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
