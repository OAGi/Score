import { DataSource } from '@angular/cdk/collections';
import { BehaviorSubject } from 'rxjs';
export class MatMultiSortTableDataSource extends DataSource {
    constructor(sort, clientSideSorting = false) {
        super();
        this._data = new BehaviorSubject([]);
        this.sort = sort;
        this.clientSideSorting = clientSideSorting;
    }
    set data(data) {
        this._data.next(data);
    }
    get data() {
        return this._data.value;
    }
    connect() {
        return this._data;
    }
    disconnect() {
        this._data.complete();
    }
    orderData() {
        this._data.next(this.sortData(this._data.value, this.sort.actives, this.sort.directions));
    }
    sortData(data, actives, directions) {
        const _data = Object.assign(new Array(), data);
        if (this.clientSideSorting) {
            return _data.sort((i1, i2) => {
                return this._sortData(i1, i2, actives, directions);
            });
        }
        return _data;
    }
    _sortData(d1, d2, params, dirs) {
        // @ts-ignore -- need a typesafe way to express these accessor operations, ts-ignore could be a solution
        // if there's not a suitable solution offered by typescript
        if (d1[params[0]] > d2[params[0]]) {
            return dirs[0] === 'asc' ? 1 : -1;
            // @ts-ignore
        }
        else if (d1[params[0]] < d2[params[0]]) {
            return dirs[0] === 'asc' ? -1 : 1;
        }
        else {
            if (params.length > 1) {
                params = params.slice(1, params.length);
                dirs = dirs.slice(1, dirs.length);
                return this._sortData(d1, d2, params, dirs);
            }
            else {
                return 0;
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LW11bHRpLXNvcnQtZGF0YS1zb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9tYXQtbXVsdGktc29ydC9zcmMvbGliL21hdC1tdWx0aS1zb3J0LWRhdGEtc291cmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBR3ZDLE1BQU0sT0FBTywyQkFBK0IsU0FBUSxVQUFhO0lBSzdELFlBQVksSUFBa0IsRUFBRSxpQkFBaUIsR0FBRyxLQUFLO1FBQ3JELEtBQUssRUFBRSxDQUFDO1FBTEosVUFBSyxHQUF5QixJQUFJLGVBQWUsQ0FBTSxFQUFFLENBQUMsQ0FBQztRQU0vRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7SUFDL0MsQ0FBQztJQUVELElBQVcsSUFBSSxDQUFDLElBQVM7UUFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNYLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFDNUIsQ0FBQztJQUVELE9BQU87UUFDSCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELFVBQVU7UUFDTixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxTQUFTO1FBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDOUYsQ0FBQztJQUVELFFBQVEsQ0FBQyxJQUFTLEVBQUUsT0FBaUIsRUFBRSxVQUFvQjtRQUN2RCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxFQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEQsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDeEIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFO2dCQUN6QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDdkQsQ0FBQyxDQUFDLENBQUM7U0FDTjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxTQUFTLENBQUMsRUFBSyxFQUFFLEVBQUssRUFBRSxNQUFnQixFQUFFLElBQWM7UUFDcEQsd0dBQXdHO1FBQ3hHLDJEQUEyRDtRQUMzRCxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDL0IsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RDLGFBQWE7U0FDWjthQUFNLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN0QyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDckM7YUFBTTtZQUNILElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ25CLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3hDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ2xDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQzthQUMvQztpQkFBTTtnQkFDSCxPQUFPLENBQUMsQ0FBQzthQUNaO1NBQ0o7SUFDTCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRhU291cmNlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvbGxlY3Rpb25zJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTWF0TXVsdGlTb3J0IH0gZnJvbSAnLi9tYXQtbXVsdGktc29ydC5kaXJlY3RpdmUnO1xuXG5leHBvcnQgY2xhc3MgTWF0TXVsdGlTb3J0VGFibGVEYXRhU291cmNlPFQ+IGV4dGVuZHMgRGF0YVNvdXJjZTxUPiB7XG4gICAgcHJpdmF0ZSBfZGF0YTogQmVoYXZpb3JTdWJqZWN0PFRbXT4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFRbXT4oW10pO1xuICAgIHByaXZhdGUgY2xpZW50U2lkZVNvcnRpbmc7XG4gICAgc29ydDogTWF0TXVsdGlTb3J0O1xuXG4gICAgY29uc3RydWN0b3Ioc29ydDogTWF0TXVsdGlTb3J0LCBjbGllbnRTaWRlU29ydGluZyA9IGZhbHNlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc29ydCA9IHNvcnQ7XG4gICAgICAgIHRoaXMuY2xpZW50U2lkZVNvcnRpbmcgPSBjbGllbnRTaWRlU29ydGluZztcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IGRhdGEoZGF0YTogVFtdKSB7XG4gICAgICAgIHRoaXMuX2RhdGEubmV4dChkYXRhKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGRhdGEoKTogVFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGEudmFsdWU7XG4gICAgfVxuXG4gICAgY29ubmVjdCgpOiBCZWhhdmlvclN1YmplY3Q8VFtdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICAgIH1cblxuICAgIGRpc2Nvbm5lY3QoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2RhdGEuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICBvcmRlckRhdGEoKSB7XG4gICAgICAgIHRoaXMuX2RhdGEubmV4dCh0aGlzLnNvcnREYXRhKHRoaXMuX2RhdGEudmFsdWUsIHRoaXMuc29ydC5hY3RpdmVzLCB0aGlzLnNvcnQuZGlyZWN0aW9ucykpO1xuICAgIH1cblxuICAgIHNvcnREYXRhKGRhdGE6IFRbXSwgYWN0aXZlczogc3RyaW5nW10sIGRpcmVjdGlvbnM6IHN0cmluZ1tdKTogVFtdIHtcbiAgICAgICAgY29uc3QgX2RhdGEgPSBPYmplY3QuYXNzaWduKG5ldyBBcnJheTxUPigpLCBkYXRhKTtcbiAgICAgICAgaWYgKHRoaXMuY2xpZW50U2lkZVNvcnRpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBfZGF0YS5zb3J0KChpMSwgaTIpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc29ydERhdGEoaTEsIGkyLCBhY3RpdmVzLCBkaXJlY3Rpb25zKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfZGF0YTtcbiAgICB9XG5cbiAgICBfc29ydERhdGEoZDE6IFQsIGQyOiBULCBwYXJhbXM6IHN0cmluZ1tdLCBkaXJzOiBzdHJpbmdbXSk6IG51bWJlciB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgLS0gbmVlZCBhIHR5cGVzYWZlIHdheSB0byBleHByZXNzIHRoZXNlIGFjY2Vzc29yIG9wZXJhdGlvbnMsIHRzLWlnbm9yZSBjb3VsZCBiZSBhIHNvbHV0aW9uXG4gICAgICAgIC8vIGlmIHRoZXJlJ3Mgbm90IGEgc3VpdGFibGUgc29sdXRpb24gb2ZmZXJlZCBieSB0eXBlc2NyaXB0XG4gICAgICAgIGlmIChkMVtwYXJhbXNbMF1dID4gZDJbcGFyYW1zWzBdXSkge1xuICAgICAgICAgICAgcmV0dXJuIGRpcnNbMF0gPT09ICdhc2MnID8gMSA6IC0xO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIH0gZWxzZSBpZiAoZDFbcGFyYW1zWzBdXSA8IGQyW3BhcmFtc1swXV0pIHtcbiAgICAgICAgICAgIHJldHVybiBkaXJzWzBdID09PSAnYXNjJyA/IC0xIDogMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwYXJhbXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIHBhcmFtcyA9IHBhcmFtcy5zbGljZSgxLCBwYXJhbXMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBkaXJzID0gZGlycy5zbGljZSgxLCBkaXJzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NvcnREYXRhKGQxLCBkMiwgcGFyYW1zLCBkaXJzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=