/*
 * This file is generated by jOOQ.
 */
package org.oagi.srt.entity.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.srt.entity.jooq.Indexes;
import org.oagi.srt.entity.jooq.Keys;
import org.oagi.srt.entity.jooq.Oagi;
import org.oagi.srt.entity.jooq.tables.records.BieUsageRuleRecord;


/**
 * This is an intersection table. Per CCTS, a usage rule may be reused. This 
 * table allows m-m relationships between the usage rule and all kinds of 
 * BIEs. In a particular record, either only one of the TARGET_ABIE_ID, TARGET_ASBIE_ID, 
 * TARGET_ASBIEP_ID, TARGET_BBIE_ID, or TARGET_BBIEP_ID.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BieUsageRule extends TableImpl<BieUsageRuleRecord> {

    private static final long serialVersionUID = -1892349724;

    /**
     * The reference instance of <code>oagi.bie_usage_rule</code>
     */
    public static final BieUsageRule BIE_USAGE_RULE = new BieUsageRule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BieUsageRuleRecord> getRecordType() {
        return BieUsageRuleRecord.class;
    }

    /**
     * The column <code>oagi.bie_usage_rule.bie_usage_rule_id</code>. Primary key of the table.
     */
    public final TableField<BieUsageRuleRecord, ULong> BIE_USAGE_RULE_ID = createField(DSL.name("bie_usage_rule_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key of the table.");

    /**
     * The column <code>oagi.bie_usage_rule.assigned_usage_rule_id</code>. Foreign key to the USAGE_RULE table indicating the usage rule assigned to a BIE.
     */
    public final TableField<BieUsageRuleRecord, ULong> ASSIGNED_USAGE_RULE_ID = createField(DSL.name("assigned_usage_rule_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the USAGE_RULE table indicating the usage rule assigned to a BIE.");

    /**
     * The column <code>oagi.bie_usage_rule.target_abie_id</code>. Foreign key to the ABIE table indicating the ABIE, to which the usage rule is applied.
     */
    public final TableField<BieUsageRuleRecord, ULong> TARGET_ABIE_ID = createField(DSL.name("target_abie_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "Foreign key to the ABIE table indicating the ABIE, to which the usage rule is applied.");

    /**
     * The column <code>oagi.bie_usage_rule.target_asbie_id</code>. Foreign key to the ASBIE table indicating the ASBIE, to which the usage rule is applied.
     */
    public final TableField<BieUsageRuleRecord, ULong> TARGET_ASBIE_ID = createField(DSL.name("target_asbie_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "Foreign key to the ASBIE table indicating the ASBIE, to which the usage rule is applied.");

    /**
     * The column <code>oagi.bie_usage_rule.target_asbiep_id</code>. Foreign key to the ASBIEP table indicating the ASBIEP, to which the usage rule is applied.
     */
    public final TableField<BieUsageRuleRecord, ULong> TARGET_ASBIEP_ID = createField(DSL.name("target_asbiep_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "Foreign key to the ASBIEP table indicating the ASBIEP, to which the usage rule is applied.");

    /**
     * The column <code>oagi.bie_usage_rule.target_bbie_id</code>. Foreign key to the BBIE table indicating the BBIE, to which the usage rule is applied.
     */
    public final TableField<BieUsageRuleRecord, ULong> TARGET_BBIE_ID = createField(DSL.name("target_bbie_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "Foreign key to the BBIE table indicating the BBIE, to which the usage rule is applied.");

    /**
     * The column <code>oagi.bie_usage_rule.target_bbiep_id</code>. Foreign key to the BBIEP table indicating the ABIEP, to which the usage rule is applied.
     */
    public final TableField<BieUsageRuleRecord, ULong> TARGET_BBIEP_ID = createField(DSL.name("target_bbiep_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "Foreign key to the BBIEP table indicating the ABIEP, to which the usage rule is applied.");

    /**
     * Create a <code>oagi.bie_usage_rule</code> table reference
     */
    public BieUsageRule() {
        this(DSL.name("bie_usage_rule"), null);
    }

    /**
     * Create an aliased <code>oagi.bie_usage_rule</code> table reference
     */
    public BieUsageRule(String alias) {
        this(DSL.name(alias), BIE_USAGE_RULE);
    }

    /**
     * Create an aliased <code>oagi.bie_usage_rule</code> table reference
     */
    public BieUsageRule(Name alias) {
        this(alias, BIE_USAGE_RULE);
    }

    private BieUsageRule(Name alias, Table<BieUsageRuleRecord> aliased) {
        this(alias, aliased, null);
    }

    private BieUsageRule(Name alias, Table<BieUsageRuleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("This is an intersection table. Per CCTS, a usage rule may be reused. This table allows m-m relationships between the usage rule and all kinds of BIEs. In a particular record, either only one of the TARGET_ABIE_ID, TARGET_ASBIE_ID, TARGET_ASBIEP_ID, TARGET_BBIE_ID, or TARGET_BBIEP_ID."));
    }

    public <O extends Record> BieUsageRule(Table<O> child, ForeignKey<O, BieUsageRuleRecord> key) {
        super(child, key, BIE_USAGE_RULE);
    }

    @Override
    public Schema getSchema() {
        return Oagi.OAGI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BIE_USAGE_RULE_BIE_USAGE_RULE_ASSIGNED_USAGE_RULE_ID_FK, Indexes.BIE_USAGE_RULE_BIE_USAGE_RULE_TARGET_ABIE_ID_FK, Indexes.BIE_USAGE_RULE_BIE_USAGE_RULE_TARGET_ASBIEP_ID_FK, Indexes.BIE_USAGE_RULE_BIE_USAGE_RULE_TARGET_ASBIE_ID_FK, Indexes.BIE_USAGE_RULE_BIE_USAGE_RULE_TARGET_BBIEP_ID_FK, Indexes.BIE_USAGE_RULE_BIE_USAGE_RULE_TARGET_BBIE_ID_FK, Indexes.BIE_USAGE_RULE_PRIMARY);
    }

    @Override
    public Identity<BieUsageRuleRecord, ULong> getIdentity() {
        return Keys.IDENTITY_BIE_USAGE_RULE;
    }

    @Override
    public UniqueKey<BieUsageRuleRecord> getPrimaryKey() {
        return Keys.KEY_BIE_USAGE_RULE_PRIMARY;
    }

    @Override
    public List<UniqueKey<BieUsageRuleRecord>> getKeys() {
        return Arrays.<UniqueKey<BieUsageRuleRecord>>asList(Keys.KEY_BIE_USAGE_RULE_PRIMARY);
    }

    @Override
    public List<ForeignKey<BieUsageRuleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BieUsageRuleRecord, ?>>asList(Keys.BIE_USAGE_RULE_ASSIGNED_USAGE_RULE_ID_FK, Keys.BIE_USAGE_RULE_TARGET_ABIE_ID_FK, Keys.BIE_USAGE_RULE_TARGET_ASBIE_ID_FK, Keys.BIE_USAGE_RULE_TARGET_ASBIEP_ID_FK, Keys.BIE_USAGE_RULE_TARGET_BBIE_ID_FK, Keys.BIE_USAGE_RULE_TARGET_BBIEP_ID_FK);
    }

    public UsageRule usageRule() {
        return new UsageRule(this, Keys.BIE_USAGE_RULE_ASSIGNED_USAGE_RULE_ID_FK);
    }

    public Abie abie() {
        return new Abie(this, Keys.BIE_USAGE_RULE_TARGET_ABIE_ID_FK);
    }

    public Asbie asbie() {
        return new Asbie(this, Keys.BIE_USAGE_RULE_TARGET_ASBIE_ID_FK);
    }

    public Asbiep asbiep() {
        return new Asbiep(this, Keys.BIE_USAGE_RULE_TARGET_ASBIEP_ID_FK);
    }

    public Bbie bbie() {
        return new Bbie(this, Keys.BIE_USAGE_RULE_TARGET_BBIE_ID_FK);
    }

    public Bbiep bbiep() {
        return new Bbiep(this, Keys.BIE_USAGE_RULE_TARGET_BBIEP_ID_FK);
    }

    @Override
    public BieUsageRule as(String alias) {
        return new BieUsageRule(DSL.name(alias), this);
    }

    @Override
    public BieUsageRule as(Name alias) {
        return new BieUsageRule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BieUsageRule rename(String name) {
        return new BieUsageRule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BieUsageRule rename(Name name) {
        return new BieUsageRule(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<ULong, ULong, ULong, ULong, ULong, ULong, ULong> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
