/*
 * This file is generated by jOOQ.
 */
package org.oagi.srt.entity.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.srt.entity.jooq.Indexes;
import org.oagi.srt.entity.jooq.Keys;
import org.oagi.srt.entity.jooq.Oagi;
import org.oagi.srt.entity.jooq.tables.records.NamespaceRecord;


/**
 * This table stores information about a namespace. Namespace is the namespace 
 * as in the XML schema specification.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Namespace extends TableImpl<NamespaceRecord> {

    private static final long serialVersionUID = -706921607;

    /**
     * The reference instance of <code>oagi.namespace</code>
     */
    public static final Namespace NAMESPACE = new Namespace();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NamespaceRecord> getRecordType() {
        return NamespaceRecord.class;
    }

    /**
     * The column <code>oagi.namespace.namespace_id</code>. Primary, internal database key.
     */
    public final TableField<NamespaceRecord, ULong> NAMESPACE_ID = createField(DSL.name("namespace_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary, internal database key.");

    /**
     * The column <code>oagi.namespace.uri</code>. This is the URI of the namespace.
     */
    public final TableField<NamespaceRecord, String> URI = createField(DSL.name("uri"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "This is the URI of the namespace.");

    /**
     * The column <code>oagi.namespace.prefix</code>. This is a default short name to represent the URI. It may be overridden during the expression generation. Null or empty means the same thing like the default prefix in an XML schema.
     */
    public final TableField<NamespaceRecord, String> PREFIX = createField(DSL.name("prefix"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "This is a default short name to represent the URI. It may be overridden during the expression generation. Null or empty means the same thing like the default prefix in an XML schema.");

    /**
     * The column <code>oagi.namespace.description</code>. Description or explanation about the namespace or use of the namespace.
     */
    public final TableField<NamespaceRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB, this, "Description or explanation about the namespace or use of the namespace.");

    /**
     * The column <code>oagi.namespace.is_std_nmsp</code>. This indicates whether the namespace is reserved for standard used (i.e., whether it is an OAGIS namespace). If it is true, then end users cannot user the namespace for the end user CCs.
     */
    public final TableField<NamespaceRecord, Byte> IS_STD_NMSP = createField(DSL.name("is_std_nmsp"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "This indicates whether the namespace is reserved for standard used (i.e., whether it is an OAGIS namespace). If it is true, then end users cannot user the namespace for the end user CCs.");

    /**
     * The column <code>oagi.namespace.owner_user_id</code>. Foreign key to the APP_USER table identifying the user who can update or delete the record.
     */
    public final TableField<NamespaceRecord, ULong> OWNER_USER_ID = createField(DSL.name("owner_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the APP_USER table identifying the user who can update or delete the record.");

    /**
     * The column <code>oagi.namespace.created_by</code>. Foreign key to the APP_USER table identifying user who created the namespace.
     */
    public final TableField<NamespaceRecord, ULong> CREATED_BY = createField(DSL.name("created_by"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the APP_USER table identifying user who created the namespace.");

    /**
     * The column <code>oagi.namespace.last_updated_by</code>. Foreign key to the APP_USER table identifying the user who last updated the record.
     */
    public final TableField<NamespaceRecord, ULong> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the APP_USER table identifying the user who last updated the record.");

    /**
     * The column <code>oagi.namespace.creation_timestamp</code>. The timestamp when the record was first created.
     */
    public final TableField<NamespaceRecord, Timestamp> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "The timestamp when the record was first created.");

    /**
     * The column <code>oagi.namespace.last_update_timestamp</code>. The timestamp when the record was last updated.
     */
    public final TableField<NamespaceRecord, Timestamp> LAST_UPDATE_TIMESTAMP = createField(DSL.name("last_update_timestamp"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "The timestamp when the record was last updated.");

    /**
     * Create a <code>oagi.namespace</code> table reference
     */
    public Namespace() {
        this(DSL.name("namespace"), null);
    }

    /**
     * Create an aliased <code>oagi.namespace</code> table reference
     */
    public Namespace(String alias) {
        this(DSL.name(alias), NAMESPACE);
    }

    /**
     * Create an aliased <code>oagi.namespace</code> table reference
     */
    public Namespace(Name alias) {
        this(alias, NAMESPACE);
    }

    private Namespace(Name alias, Table<NamespaceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Namespace(Name alias, Table<NamespaceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("This table stores information about a namespace. Namespace is the namespace as in the XML schema specification."));
    }

    public <O extends Record> Namespace(Table<O> child, ForeignKey<O, NamespaceRecord> key) {
        super(child, key, NAMESPACE);
    }

    @Override
    public Schema getSchema() {
        return Oagi.OAGI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NAMESPACE_NAMESPACE_CREATED_BY_FK, Indexes.NAMESPACE_NAMESPACE_LAST_UPDATED_BY_FK, Indexes.NAMESPACE_NAMESPACE_OWNER_USER_ID_FK, Indexes.NAMESPACE_PRIMARY);
    }

    @Override
    public Identity<NamespaceRecord, ULong> getIdentity() {
        return Keys.IDENTITY_NAMESPACE;
    }

    @Override
    public UniqueKey<NamespaceRecord> getPrimaryKey() {
        return Keys.KEY_NAMESPACE_PRIMARY;
    }

    @Override
    public List<UniqueKey<NamespaceRecord>> getKeys() {
        return Arrays.<UniqueKey<NamespaceRecord>>asList(Keys.KEY_NAMESPACE_PRIMARY);
    }

    @Override
    public List<ForeignKey<NamespaceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NamespaceRecord, ?>>asList(Keys.NAMESPACE_OWNER_USER_ID_FK, Keys.NAMESPACE_CREATED_BY_FK, Keys.NAMESPACE_LAST_UPDATED_BY_FK);
    }

    public AppUser namespaceOwnerUserIdFk() {
        return new AppUser(this, Keys.NAMESPACE_OWNER_USER_ID_FK);
    }

    public AppUser namespaceCreatedByFk() {
        return new AppUser(this, Keys.NAMESPACE_CREATED_BY_FK);
    }

    public AppUser namespaceLastUpdatedByFk() {
        return new AppUser(this, Keys.NAMESPACE_LAST_UPDATED_BY_FK);
    }

    @Override
    public Namespace as(String alias) {
        return new Namespace(DSL.name(alias), this);
    }

    @Override
    public Namespace as(Name alias) {
        return new Namespace(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Namespace rename(String name) {
        return new Namespace(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Namespace rename(Name name) {
        return new Namespace(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<ULong, String, String, String, Byte, ULong, ULong, ULong, Timestamp, Timestamp> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
