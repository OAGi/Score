/*
 * This file is generated by jOOQ.
 */
package org.oagi.srt.entity.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.srt.entity.jooq.Indexes;
import org.oagi.srt.entity.jooq.Keys;
import org.oagi.srt.entity.jooq.Oagi;
import org.oagi.srt.entity.jooq.tables.records.BlobContentRecord;


/**
 * This table stores schemas whose content is only imported as a whole and 
 * is represented in Blob.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BlobContent extends TableImpl<BlobContentRecord> {

    private static final long serialVersionUID = 2144532286;

    /**
     * The reference instance of <code>oagi.blob_content</code>
     */
    public static final BlobContent BLOB_CONTENT = new BlobContent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlobContentRecord> getRecordType() {
        return BlobContentRecord.class;
    }

    /**
     * The column <code>oagi.blob_content.blob_content_id</code>. Primary, internal database key.
     */
    public final TableField<BlobContentRecord, ULong> BLOB_CONTENT_ID = createField(DSL.name("blob_content_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary, internal database key.");

    /**
     * The column <code>oagi.blob_content.content</code>. The Blob content of the schema file.
     */
    public final TableField<BlobContentRecord, byte[]> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "The Blob content of the schema file.");

    /**
     * The column <code>oagi.blob_content.release_id</code>. The release to which this file/content belongs/published.
     */
    public final TableField<BlobContentRecord, ULong> RELEASE_ID = createField(DSL.name("release_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The release to which this file/content belongs/published.");

    /**
     * The column <code>oagi.blob_content.module_id</code>. Foreign key to the module table indicating the physical file the blob content should be output to when generating/serializing the content.
     */
    public final TableField<BlobContentRecord, ULong> MODULE_ID = createField(DSL.name("module_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the module table indicating the physical file the blob content should be output to when generating/serializing the content.");

    /**
     * Create a <code>oagi.blob_content</code> table reference
     */
    public BlobContent() {
        this(DSL.name("blob_content"), null);
    }

    /**
     * Create an aliased <code>oagi.blob_content</code> table reference
     */
    public BlobContent(String alias) {
        this(DSL.name(alias), BLOB_CONTENT);
    }

    /**
     * Create an aliased <code>oagi.blob_content</code> table reference
     */
    public BlobContent(Name alias) {
        this(alias, BLOB_CONTENT);
    }

    private BlobContent(Name alias, Table<BlobContentRecord> aliased) {
        this(alias, aliased, null);
    }

    private BlobContent(Name alias, Table<BlobContentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("This table stores schemas whose content is only imported as a whole and is represented in Blob."));
    }

    public <O extends Record> BlobContent(Table<O> child, ForeignKey<O, BlobContentRecord> key) {
        super(child, key, BLOB_CONTENT);
    }

    @Override
    public Schema getSchema() {
        return Oagi.OAGI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BLOB_CONTENT_BLOB_CONTENT_MODULE_ID_FK, Indexes.BLOB_CONTENT_BLOB_CONTENT_RELEASE_ID_FK, Indexes.BLOB_CONTENT_PRIMARY);
    }

    @Override
    public Identity<BlobContentRecord, ULong> getIdentity() {
        return Keys.IDENTITY_BLOB_CONTENT;
    }

    @Override
    public UniqueKey<BlobContentRecord> getPrimaryKey() {
        return Keys.KEY_BLOB_CONTENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<BlobContentRecord>> getKeys() {
        return Arrays.<UniqueKey<BlobContentRecord>>asList(Keys.KEY_BLOB_CONTENT_PRIMARY);
    }

    @Override
    public List<ForeignKey<BlobContentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BlobContentRecord, ?>>asList(Keys.BLOB_CONTENT_RELEASE_ID_FK, Keys.BLOB_CONTENT_MODULE_ID_FK);
    }

    public Release release() {
        return new Release(this, Keys.BLOB_CONTENT_RELEASE_ID_FK);
    }

    public Module module() {
        return new Module(this, Keys.BLOB_CONTENT_MODULE_ID_FK);
    }

    @Override
    public BlobContent as(String alias) {
        return new BlobContent(DSL.name(alias), this);
    }

    @Override
    public BlobContent as(Name alias) {
        return new BlobContent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BlobContent rename(String name) {
        return new BlobContent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BlobContent rename(Name name) {
        return new BlobContent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<ULong, byte[], ULong, ULong> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
