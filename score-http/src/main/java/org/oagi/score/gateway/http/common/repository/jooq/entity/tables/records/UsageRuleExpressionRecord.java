/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.gateway.http.common.repository.jooq.entity.tables.records;


import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;
import org.oagi.score.gateway.http.common.repository.jooq.entity.tables.UsageRuleExpression;


/**
 * The USAGE_RULE_EXPRESSION provides a representation of a usage rule in a
 * particular syntax indicated by the CONSTRAINT_TYPE column. One of the
 * syntaxes can be unstructured, which works a description of the usage rule.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UsageRuleExpressionRecord extends UpdatableRecordImpl<UsageRuleExpressionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>oagi.usage_rule_expression.usage_rule_expression_id</code>. Primary
     * key of the usage rule expression
     */
    public void setUsageRuleExpressionId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>oagi.usage_rule_expression.usage_rule_expression_id</code>. Primary
     * key of the usage rule expression
     */
    public ULong getUsageRuleExpressionId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>oagi.usage_rule_expression.constraint_type</code>.
     * Constraint type according to the CC spec. It represents the expression
     * language (syntax) used in the CONSTRAINT column. It is a value list
     * column. 0 = 'Unstructured' which is basically a description of the rule,
     * 1 = 'Schematron'.
     */
    public void setConstraintType(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>oagi.usage_rule_expression.constraint_type</code>.
     * Constraint type according to the CC spec. It represents the expression
     * language (syntax) used in the CONSTRAINT column. It is a value list
     * column. 0 = 'Unstructured' which is basically a description of the rule,
     * 1 = 'Schematron'.
     */
    public Integer getConstraintType() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>oagi.usage_rule_expression.constraint_text</code>. This
     * column capture the constraint expressing the usage rule. In other words,
     * this is the expression.
     */
    public void setConstraintText(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>oagi.usage_rule_expression.constraint_text</code>. This
     * column capture the constraint expressing the usage rule. In other words,
     * this is the expression.
     */
    public String getConstraintText() {
        return (String) get(2);
    }

    /**
     * Setter for
     * <code>oagi.usage_rule_expression.represented_usage_rule_id</code>. The
     * usage rule which the expression represents
     */
    public void setRepresentedUsageRuleId(ULong value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>oagi.usage_rule_expression.represented_usage_rule_id</code>. The
     * usage rule which the expression represents
     */
    public ULong getRepresentedUsageRuleId() {
        return (ULong) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UsageRuleExpressionRecord
     */
    public UsageRuleExpressionRecord() {
        super(UsageRuleExpression.USAGE_RULE_EXPRESSION);
    }

    /**
     * Create a detached, initialised UsageRuleExpressionRecord
     */
    public UsageRuleExpressionRecord(ULong usageRuleExpressionId, Integer constraintType, String constraintText, ULong representedUsageRuleId) {
        super(UsageRuleExpression.USAGE_RULE_EXPRESSION);

        setUsageRuleExpressionId(usageRuleExpressionId);
        setConstraintType(constraintType);
        setConstraintText(constraintText);
        setRepresentedUsageRuleId(representedUsageRuleId);
        resetTouchedOnNotNull();
    }
}
