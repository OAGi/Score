/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.gateway.http.common.repository.jooq.entity.tables.records;


import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;
import org.oagi.score.gateway.http.common.repository.jooq.entity.tables.BccManifest;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BccManifestRecord extends UpdatableRecordImpl<BccManifestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>oagi.bcc_manifest.bcc_manifest_id</code>.
     */
    public void setBccManifestId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>oagi.bcc_manifest.bcc_manifest_id</code>.
     */
    public ULong getBccManifestId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>oagi.bcc_manifest.release_id</code>.
     */
    public void setReleaseId(ULong value) {
        set(1, value);
    }

    /**
     * Getter for <code>oagi.bcc_manifest.release_id</code>.
     */
    public ULong getReleaseId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>oagi.bcc_manifest.bcc_id</code>.
     */
    public void setBccId(ULong value) {
        set(2, value);
    }

    /**
     * Getter for <code>oagi.bcc_manifest.bcc_id</code>.
     */
    public ULong getBccId() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>oagi.bcc_manifest.seq_key_id</code>.
     */
    public void setSeqKeyId(ULong value) {
        set(3, value);
    }

    /**
     * Getter for <code>oagi.bcc_manifest.seq_key_id</code>.
     */
    public ULong getSeqKeyId() {
        return (ULong) get(3);
    }

    /**
     * Setter for <code>oagi.bcc_manifest.from_acc_manifest_id</code>.
     */
    public void setFromAccManifestId(ULong value) {
        set(4, value);
    }

    /**
     * Getter for <code>oagi.bcc_manifest.from_acc_manifest_id</code>.
     */
    public ULong getFromAccManifestId() {
        return (ULong) get(4);
    }

    /**
     * Setter for <code>oagi.bcc_manifest.to_bccp_manifest_id</code>.
     */
    public void setToBccpManifestId(ULong value) {
        set(5, value);
    }

    /**
     * Getter for <code>oagi.bcc_manifest.to_bccp_manifest_id</code>.
     */
    public ULong getToBccpManifestId() {
        return (ULong) get(5);
    }

    /**
     * Setter for <code>oagi.bcc_manifest.den</code>. DEN (dictionary entry
     * name) of the BCC. This column can be derived from QUALIFIER and
     * OBJECT_CLASS_TERM of the FROM_ACC_ID and DEN of the TO_BCCP_ID as
     * QUALIFIER + "_ " + OBJECT_CLASS_TERM + ". " + DEN.
     */
    public void setDen(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>oagi.bcc_manifest.den</code>. DEN (dictionary entry
     * name) of the BCC. This column can be derived from QUALIFIER and
     * OBJECT_CLASS_TERM of the FROM_ACC_ID and DEN of the TO_BCCP_ID as
     * QUALIFIER + "_ " + OBJECT_CLASS_TERM + ". " + DEN.
     */
    public String getDen() {
        return (String) get(6);
    }

    /**
     * Setter for <code>oagi.bcc_manifest.conflict</code>. This indicates that
     * there is a conflict between self and relationship.
     */
    public void setConflict(Byte value) {
        set(7, value);
    }

    /**
     * Getter for <code>oagi.bcc_manifest.conflict</code>. This indicates that
     * there is a conflict between self and relationship.
     */
    public Byte getConflict() {
        return (Byte) get(7);
    }

    /**
     * Setter for <code>oagi.bcc_manifest.replacement_bcc_manifest_id</code>.
     * This refers to a replacement manifest if the record is deprecated.
     */
    public void setReplacementBccManifestId(ULong value) {
        set(8, value);
    }

    /**
     * Getter for <code>oagi.bcc_manifest.replacement_bcc_manifest_id</code>.
     * This refers to a replacement manifest if the record is deprecated.
     */
    public ULong getReplacementBccManifestId() {
        return (ULong) get(8);
    }

    /**
     * Setter for <code>oagi.bcc_manifest.prev_bcc_manifest_id</code>.
     */
    public void setPrevBccManifestId(ULong value) {
        set(9, value);
    }

    /**
     * Getter for <code>oagi.bcc_manifest.prev_bcc_manifest_id</code>.
     */
    public ULong getPrevBccManifestId() {
        return (ULong) get(9);
    }

    /**
     * Setter for <code>oagi.bcc_manifest.next_bcc_manifest_id</code>.
     */
    public void setNextBccManifestId(ULong value) {
        set(10, value);
    }

    /**
     * Getter for <code>oagi.bcc_manifest.next_bcc_manifest_id</code>.
     */
    public ULong getNextBccManifestId() {
        return (ULong) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BccManifestRecord
     */
    public BccManifestRecord() {
        super(BccManifest.BCC_MANIFEST);
    }

    /**
     * Create a detached, initialised BccManifestRecord
     */
    public BccManifestRecord(ULong bccManifestId, ULong releaseId, ULong bccId, ULong seqKeyId, ULong fromAccManifestId, ULong toBccpManifestId, String den, Byte conflict, ULong replacementBccManifestId, ULong prevBccManifestId, ULong nextBccManifestId) {
        super(BccManifest.BCC_MANIFEST);

        setBccManifestId(bccManifestId);
        setReleaseId(releaseId);
        setBccId(bccId);
        setSeqKeyId(seqKeyId);
        setFromAccManifestId(fromAccManifestId);
        setToBccpManifestId(toBccpManifestId);
        setDen(den);
        setConflict(conflict);
        setReplacementBccManifestId(replacementBccManifestId);
        setPrevBccManifestId(prevBccManifestId);
        setNextBccManifestId(nextBccManifestId);
        resetTouchedOnNotNull();
    }
}
