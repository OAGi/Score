/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.gateway.http.common.repository.jooq.entity.tables.records;


import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;
import org.oagi.score.gateway.http.common.repository.jooq.entity.tables.AsccManifest;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AsccManifestRecord extends UpdatableRecordImpl<AsccManifestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>oagi.ascc_manifest.ascc_manifest_id</code>.
     */
    public void setAsccManifestId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>oagi.ascc_manifest.ascc_manifest_id</code>.
     */
    public ULong getAsccManifestId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>oagi.ascc_manifest.release_id</code>.
     */
    public void setReleaseId(ULong value) {
        set(1, value);
    }

    /**
     * Getter for <code>oagi.ascc_manifest.release_id</code>.
     */
    public ULong getReleaseId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>oagi.ascc_manifest.ascc_id</code>.
     */
    public void setAsccId(ULong value) {
        set(2, value);
    }

    /**
     * Getter for <code>oagi.ascc_manifest.ascc_id</code>.
     */
    public ULong getAsccId() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>oagi.ascc_manifest.seq_key_id</code>.
     */
    public void setSeqKeyId(ULong value) {
        set(3, value);
    }

    /**
     * Getter for <code>oagi.ascc_manifest.seq_key_id</code>.
     */
    public ULong getSeqKeyId() {
        return (ULong) get(3);
    }

    /**
     * Setter for <code>oagi.ascc_manifest.from_acc_manifest_id</code>.
     */
    public void setFromAccManifestId(ULong value) {
        set(4, value);
    }

    /**
     * Getter for <code>oagi.ascc_manifest.from_acc_manifest_id</code>.
     */
    public ULong getFromAccManifestId() {
        return (ULong) get(4);
    }

    /**
     * Setter for <code>oagi.ascc_manifest.to_asccp_manifest_id</code>.
     */
    public void setToAsccpManifestId(ULong value) {
        set(5, value);
    }

    /**
     * Getter for <code>oagi.ascc_manifest.to_asccp_manifest_id</code>.
     */
    public ULong getToAsccpManifestId() {
        return (ULong) get(5);
    }

    /**
     * Setter for <code>oagi.ascc_manifest.den</code>. DEN (dictionary entry
     * name) of the ASCC. This column can be derived from Qualifier and
     * OBJECT_CLASS_TERM of the FROM_ACC_ID and DEN of the TO_ASCCP_ID as
     * Qualifier + "_ " + OBJECT_CLASS_TERM + ". " + DEN.
     */
    public void setDen(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>oagi.ascc_manifest.den</code>. DEN (dictionary entry
     * name) of the ASCC. This column can be derived from Qualifier and
     * OBJECT_CLASS_TERM of the FROM_ACC_ID and DEN of the TO_ASCCP_ID as
     * Qualifier + "_ " + OBJECT_CLASS_TERM + ". " + DEN.
     */
    public String getDen() {
        return (String) get(6);
    }

    /**
     * Setter for <code>oagi.ascc_manifest.conflict</code>. This indicates that
     * there is a conflict between self and relationship.
     */
    public void setConflict(Byte value) {
        set(7, value);
    }

    /**
     * Getter for <code>oagi.ascc_manifest.conflict</code>. This indicates that
     * there is a conflict between self and relationship.
     */
    public Byte getConflict() {
        return (Byte) get(7);
    }

    /**
     * Setter for <code>oagi.ascc_manifest.replacement_ascc_manifest_id</code>.
     * This refers to a replacement manifest if the record is deprecated.
     */
    public void setReplacementAsccManifestId(ULong value) {
        set(8, value);
    }

    /**
     * Getter for <code>oagi.ascc_manifest.replacement_ascc_manifest_id</code>.
     * This refers to a replacement manifest if the record is deprecated.
     */
    public ULong getReplacementAsccManifestId() {
        return (ULong) get(8);
    }

    /**
     * Setter for <code>oagi.ascc_manifest.prev_ascc_manifest_id</code>.
     */
    public void setPrevAsccManifestId(ULong value) {
        set(9, value);
    }

    /**
     * Getter for <code>oagi.ascc_manifest.prev_ascc_manifest_id</code>.
     */
    public ULong getPrevAsccManifestId() {
        return (ULong) get(9);
    }

    /**
     * Setter for <code>oagi.ascc_manifest.next_ascc_manifest_id</code>.
     */
    public void setNextAsccManifestId(ULong value) {
        set(10, value);
    }

    /**
     * Getter for <code>oagi.ascc_manifest.next_ascc_manifest_id</code>.
     */
    public ULong getNextAsccManifestId() {
        return (ULong) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AsccManifestRecord
     */
    public AsccManifestRecord() {
        super(AsccManifest.ASCC_MANIFEST);
    }

    /**
     * Create a detached, initialised AsccManifestRecord
     */
    public AsccManifestRecord(ULong asccManifestId, ULong releaseId, ULong asccId, ULong seqKeyId, ULong fromAccManifestId, ULong toAsccpManifestId, String den, Byte conflict, ULong replacementAsccManifestId, ULong prevAsccManifestId, ULong nextAsccManifestId) {
        super(AsccManifest.ASCC_MANIFEST);

        setAsccManifestId(asccManifestId);
        setReleaseId(releaseId);
        setAsccId(asccId);
        setSeqKeyId(seqKeyId);
        setFromAccManifestId(fromAccManifestId);
        setToAsccpManifestId(toAsccpManifestId);
        setDen(den);
        setConflict(conflict);
        setReplacementAsccManifestId(replacementAsccManifestId);
        setPrevAsccManifestId(prevAsccManifestId);
        setNextAsccManifestId(nextAsccManifestId);
        resetTouchedOnNotNull();
    }
}
