/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.gateway.http.common.repository.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.gateway.http.common.repository.jooq.entity.Keys;
import org.oagi.score.gateway.http.common.repository.jooq.entity.Oagi;
import org.oagi.score.gateway.http.common.repository.jooq.entity.tables.UsageRule.UsageRulePath;
import org.oagi.score.gateway.http.common.repository.jooq.entity.tables.records.UsageRuleExpressionRecord;


/**
 * The USAGE_RULE_EXPRESSION provides a representation of a usage rule in a
 * particular syntax indicated by the CONSTRAINT_TYPE column. One of the
 * syntaxes can be unstructured, which works a description of the usage rule.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UsageRuleExpression extends TableImpl<UsageRuleExpressionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.usage_rule_expression</code>
     */
    public static final UsageRuleExpression USAGE_RULE_EXPRESSION = new UsageRuleExpression();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsageRuleExpressionRecord> getRecordType() {
        return UsageRuleExpressionRecord.class;
    }

    /**
     * The column
     * <code>oagi.usage_rule_expression.usage_rule_expression_id</code>. Primary
     * key of the usage rule expression
     */
    public final TableField<UsageRuleExpressionRecord, ULong> USAGE_RULE_EXPRESSION_ID = createField(DSL.name("usage_rule_expression_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key of the usage rule expression");

    /**
     * The column <code>oagi.usage_rule_expression.constraint_type</code>.
     * Constraint type according to the CC spec. It represents the expression
     * language (syntax) used in the CONSTRAINT column. It is a value list
     * column. 0 = 'Unstructured' which is basically a description of the rule,
     * 1 = 'Schematron'.
     */
    public final TableField<UsageRuleExpressionRecord, Integer> CONSTRAINT_TYPE = createField(DSL.name("constraint_type"), SQLDataType.INTEGER.nullable(false), this, "Constraint type according to the CC spec. It represents the expression language (syntax) used in the CONSTRAINT column. It is a value list column. 0 = 'Unstructured' which is basically a description of the rule, 1 = 'Schematron'.");

    /**
     * The column <code>oagi.usage_rule_expression.constraint_text</code>. This
     * column capture the constraint expressing the usage rule. In other words,
     * this is the expression.
     */
    public final TableField<UsageRuleExpressionRecord, String> CONSTRAINT_TEXT = createField(DSL.name("constraint_text"), SQLDataType.CLOB.nullable(false), this, "This column capture the constraint expressing the usage rule. In other words, this is the expression.");

    /**
     * The column
     * <code>oagi.usage_rule_expression.represented_usage_rule_id</code>. The
     * usage rule which the expression represents
     */
    public final TableField<UsageRuleExpressionRecord, ULong> REPRESENTED_USAGE_RULE_ID = createField(DSL.name("represented_usage_rule_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The usage rule which the expression represents");

    private UsageRuleExpression(Name alias, Table<UsageRuleExpressionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UsageRuleExpression(Name alias, Table<UsageRuleExpressionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("The USAGE_RULE_EXPRESSION provides a representation of a usage rule in a particular syntax indicated by the CONSTRAINT_TYPE column. One of the syntaxes can be unstructured, which works a description of the usage rule."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.usage_rule_expression</code> table reference
     */
    public UsageRuleExpression(String alias) {
        this(DSL.name(alias), USAGE_RULE_EXPRESSION);
    }

    /**
     * Create an aliased <code>oagi.usage_rule_expression</code> table reference
     */
    public UsageRuleExpression(Name alias) {
        this(alias, USAGE_RULE_EXPRESSION);
    }

    /**
     * Create a <code>oagi.usage_rule_expression</code> table reference
     */
    public UsageRuleExpression() {
        this(DSL.name("usage_rule_expression"), null);
    }

    public <O extends Record> UsageRuleExpression(Table<O> path, ForeignKey<O, UsageRuleExpressionRecord> childPath, InverseForeignKey<O, UsageRuleExpressionRecord> parentPath) {
        super(path, childPath, parentPath, USAGE_RULE_EXPRESSION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UsageRuleExpressionPath extends UsageRuleExpression implements Path<UsageRuleExpressionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UsageRuleExpressionPath(Table<O> path, ForeignKey<O, UsageRuleExpressionRecord> childPath, InverseForeignKey<O, UsageRuleExpressionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UsageRuleExpressionPath(Name alias, Table<UsageRuleExpressionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UsageRuleExpressionPath as(String alias) {
            return new UsageRuleExpressionPath(DSL.name(alias), this);
        }

        @Override
        public UsageRuleExpressionPath as(Name alias) {
            return new UsageRuleExpressionPath(alias, this);
        }

        @Override
        public UsageRuleExpressionPath as(Table<?> alias) {
            return new UsageRuleExpressionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<UsageRuleExpressionRecord, ULong> getIdentity() {
        return (Identity<UsageRuleExpressionRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<UsageRuleExpressionRecord> getPrimaryKey() {
        return Keys.KEY_USAGE_RULE_EXPRESSION_PRIMARY;
    }

    @Override
    public List<ForeignKey<UsageRuleExpressionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USAGE_RULE_EXPRESSION_REPRESENTED_USAGE_RULE_ID_FK);
    }

    private transient UsageRulePath _usageRule;

    /**
     * Get the implicit join path to the <code>oagi.usage_rule</code> table.
     */
    public UsageRulePath usageRule() {
        if (_usageRule == null)
            _usageRule = new UsageRulePath(this, Keys.USAGE_RULE_EXPRESSION_REPRESENTED_USAGE_RULE_ID_FK, null);

        return _usageRule;
    }

    @Override
    public UsageRuleExpression as(String alias) {
        return new UsageRuleExpression(DSL.name(alias), this);
    }

    @Override
    public UsageRuleExpression as(Name alias) {
        return new UsageRuleExpression(alias, this);
    }

    @Override
    public UsageRuleExpression as(Table<?> alias) {
        return new UsageRuleExpression(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsageRuleExpression rename(String name) {
        return new UsageRuleExpression(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsageRuleExpression rename(Name name) {
        return new UsageRuleExpression(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsageRuleExpression rename(Table<?> name) {
        return new UsageRuleExpression(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsageRuleExpression where(Condition condition) {
        return new UsageRuleExpression(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsageRuleExpression where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsageRuleExpression where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsageRuleExpression where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UsageRuleExpression where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UsageRuleExpression where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UsageRuleExpression where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UsageRuleExpression where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsageRuleExpression whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsageRuleExpression whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
