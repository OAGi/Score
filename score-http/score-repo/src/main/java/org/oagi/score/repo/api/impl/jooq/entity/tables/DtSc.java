/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Indexes;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AppUser.AppUserPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CdtScAwdPri.CdtScAwdPriPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CdtScRefSpec.CdtScRefSpecPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Dt.DtPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.DtSc.DtScPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.DtScManifest.DtScManifestPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.DtUsageRule.DtUsageRulePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.DtScRecord;


/**
 * This table represents the supplementary component (SC) of a DT. Revision is
 * not tracked at the supplementary component. It is considered intrinsic part
 * of the DT. In other words, when a new revision of a DT is created a new set
 * of supplementary components is created along with it. 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DtSc extends TableImpl<DtScRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.dt_sc</code>
     */
    public static final DtSc DT_SC = new DtSc();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DtScRecord> getRecordType() {
        return DtScRecord.class;
    }

    /**
     * The column <code>oagi.dt_sc.dt_sc_id</code>. Internal, primary database
     * key.
     */
    public final TableField<DtScRecord, ULong> DT_SC_ID = createField(DSL.name("dt_sc_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Internal, primary database key.");

    /**
     * The column <code>oagi.dt_sc.guid</code>. A globally unique identifier
     * (GUID).
     */
    public final TableField<DtScRecord, String> GUID = createField(DSL.name("guid"), SQLDataType.CHAR(32).nullable(false), this, "A globally unique identifier (GUID).");

    /**
     * The column <code>oagi.dt_sc.object_class_term</code>. Object class term
     * of the SC.
     */
    public final TableField<DtScRecord, String> OBJECT_CLASS_TERM = createField(DSL.name("object_class_term"), SQLDataType.VARCHAR(60).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "Object class term of the SC.");

    /**
     * The column <code>oagi.dt_sc.property_term</code>. Property term of the
     * SC.
     */
    public final TableField<DtScRecord, String> PROPERTY_TERM = createField(DSL.name("property_term"), SQLDataType.VARCHAR(60).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "Property term of the SC.");

    /**
     * The column <code>oagi.dt_sc.representation_term</code>. Representation of
     * the supplementary component.
     */
    public final TableField<DtScRecord, String> REPRESENTATION_TERM = createField(DSL.name("representation_term"), SQLDataType.VARCHAR(20).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "Representation of the supplementary component.");

    /**
     * The column <code>oagi.dt_sc.definition</code>. Description of the
     * supplementary component.
     */
    public final TableField<DtScRecord, String> DEFINITION = createField(DSL.name("definition"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "Description of the supplementary component.");

    /**
     * The column <code>oagi.dt_sc.definition_source</code>. This is typically a
     * URL identifying the source of the DEFINITION column.
     */
    public final TableField<DtScRecord, String> DEFINITION_SOURCE = createField(DSL.name("definition_source"), SQLDataType.VARCHAR(200).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "This is typically a URL identifying the source of the DEFINITION column.");

    /**
     * The column <code>oagi.dt_sc.owner_dt_id</code>. Foreigned key to the DT
     * table indicating the data type, to which this supplementary component
     * belongs.
     */
    public final TableField<DtScRecord, ULong> OWNER_DT_ID = createField(DSL.name("owner_dt_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "Foreigned key to the DT table indicating the data type, to which this supplementary component belongs.");

    /**
     * The column <code>oagi.dt_sc.cardinality_min</code>. The minimum
     * occurrence constraint associated with the supplementary component. The
     * valid values zero or one.
     */
    public final TableField<DtScRecord, Integer> CARDINALITY_MIN = createField(DSL.name("cardinality_min"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "The minimum occurrence constraint associated with the supplementary component. The valid values zero or one.");

    /**
     * The column <code>oagi.dt_sc.cardinality_max</code>. The maximum
     * occurrence constraint associated with the supplementary component. The
     * valid values are zero or one. Zero is used when the SC is restricted from
     * an instantiation in the data type.
     */
    public final TableField<DtScRecord, Integer> CARDINALITY_MAX = createField(DSL.name("cardinality_max"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "The maximum occurrence constraint associated with the supplementary component. The valid values are zero or one. Zero is used when the SC is restricted from an instantiation in the data type.");

    /**
     * The column <code>oagi.dt_sc.based_dt_sc_id</code>. Foreign key to the
     * DT_SC table itself. This column is used when the SC is derived from the
     * based DT.
     */
    public final TableField<DtScRecord, ULong> BASED_DT_SC_ID = createField(DSL.name("based_dt_sc_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "Foreign key to the DT_SC table itself. This column is used when the SC is derived from the based DT.");

    /**
     * The column <code>oagi.dt_sc.default_value</code>. This column specifies
     * the default value constraint. Default and fixed value constraints cannot
     * be used at the same time.
     */
    public final TableField<DtScRecord, String> DEFAULT_VALUE = createField(DSL.name("default_value"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "This column specifies the default value constraint. Default and fixed value constraints cannot be used at the same time.");

    /**
     * The column <code>oagi.dt_sc.fixed_value</code>. This column captures the
     * fixed value constraint. Default and fixed value constraints cannot be
     * used at the same time.
     */
    public final TableField<DtScRecord, String> FIXED_VALUE = createField(DSL.name("fixed_value"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "This column captures the fixed value constraint. Default and fixed value constraints cannot be used at the same time.");

    /**
     * The column <code>oagi.dt_sc.is_deprecated</code>. Indicates whether this
     * is deprecated and should not be reused (i.e., no new reference to this
     * record should be created).
     */
    public final TableField<DtScRecord, Byte> IS_DEPRECATED = createField(DSL.name("is_deprecated"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "Indicates whether this is deprecated and should not be reused (i.e., no new reference to this record should be created).");

    /**
     * The column <code>oagi.dt_sc.replacement_dt_sc_id</code>. This refers to a
     * replacement if the record is deprecated.
     */
    public final TableField<DtScRecord, ULong> REPLACEMENT_DT_SC_ID = createField(DSL.name("replacement_dt_sc_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "This refers to a replacement if the record is deprecated.");

    /**
     * The column <code>oagi.dt_sc.created_by</code>. Foreign key to the
     * APP_USER table. It indicates the user who created the code list.
     */
    public final TableField<DtScRecord, ULong> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the APP_USER table. It indicates the user who created the code list.");

    /**
     * The column <code>oagi.dt_sc.owner_user_id</code>. Foreign key to the
     * APP_USER table. This is the user who owns the entity, is allowed to edit
     * the entity, and who can transfer the ownership to another user.
     * 
     * The ownership can change throughout the history, but undoing shouldn't
     * rollback the ownership.
     */
    public final TableField<DtScRecord, ULong> OWNER_USER_ID = createField(DSL.name("owner_user_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the APP_USER table. This is the user who owns the entity, is allowed to edit the entity, and who can transfer the ownership to another user.\n\nThe ownership can change throughout the history, but undoing shouldn't rollback the ownership.");

    /**
     * The column <code>oagi.dt_sc.last_updated_by</code>. Foreign key to the
     * APP_USER table. It identifies the user who last updated the code list.
     */
    public final TableField<DtScRecord, ULong> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the APP_USER table. It identifies the user who last updated the code list.");

    /**
     * The column <code>oagi.dt_sc.creation_timestamp</code>. Timestamp when the
     * code list was created.
     */
    public final TableField<DtScRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(6)"), SQLDataType.LOCALDATETIME)), this, "Timestamp when the code list was created.");

    /**
     * The column <code>oagi.dt_sc.last_update_timestamp</code>. Timestamp when
     * the code list was last updated.
     */
    public final TableField<DtScRecord, LocalDateTime> LAST_UPDATE_TIMESTAMP = createField(DSL.name("last_update_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(6)"), SQLDataType.LOCALDATETIME)), this, "Timestamp when the code list was last updated.");

    /**
     * The column <code>oagi.dt_sc.prev_dt_sc_id</code>. A self-foreign key to
     * indicate the previous history record.
     */
    public final TableField<DtScRecord, ULong> PREV_DT_SC_ID = createField(DSL.name("prev_dt_sc_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "A self-foreign key to indicate the previous history record.");

    /**
     * The column <code>oagi.dt_sc.next_dt_sc_id</code>. A self-foreign key to
     * indicate the next history record.
     */
    public final TableField<DtScRecord, ULong> NEXT_DT_SC_ID = createField(DSL.name("next_dt_sc_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "A self-foreign key to indicate the next history record.");

    private DtSc(Name alias, Table<DtScRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DtSc(Name alias, Table<DtScRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("This table represents the supplementary component (SC) of a DT. Revision is not tracked at the supplementary component. It is considered intrinsic part of the DT. In other words, when a new revision of a DT is created a new set of supplementary components is created along with it. "), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.dt_sc</code> table reference
     */
    public DtSc(String alias) {
        this(DSL.name(alias), DT_SC);
    }

    /**
     * Create an aliased <code>oagi.dt_sc</code> table reference
     */
    public DtSc(Name alias) {
        this(alias, DT_SC);
    }

    /**
     * Create a <code>oagi.dt_sc</code> table reference
     */
    public DtSc() {
        this(DSL.name("dt_sc"), null);
    }

    public <O extends Record> DtSc(Table<O> path, ForeignKey<O, DtScRecord> childPath, InverseForeignKey<O, DtScRecord> parentPath) {
        super(path, childPath, parentPath, DT_SC);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DtScPath extends DtSc implements Path<DtScRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> DtScPath(Table<O> path, ForeignKey<O, DtScRecord> childPath, InverseForeignKey<O, DtScRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DtScPath(Name alias, Table<DtScRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DtScPath as(String alias) {
            return new DtScPath(DSL.name(alias), this);
        }

        @Override
        public DtScPath as(Name alias) {
            return new DtScPath(alias, this);
        }

        @Override
        public DtScPath as(Table<?> alias) {
            return new DtScPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.DT_SC_DT_SC_GUID_IDX);
    }

    @Override
    public Identity<DtScRecord, ULong> getIdentity() {
        return (Identity<DtScRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<DtScRecord> getPrimaryKey() {
        return Keys.KEY_DT_SC_PRIMARY;
    }

    @Override
    public List<ForeignKey<DtScRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DT_SC_BASED_DT_SC_ID_FK, Keys.DT_SC_CREATED_BY_FK, Keys.DT_SC_LAST_UPDATED_BY_FK, Keys.DT_SC_NEXT_DT_SC_ID_FK, Keys.DT_SC_OWNER_DT_ID_FK, Keys.DT_SC_OWNER_USER_ID_FK, Keys.DT_SC_PREV_DT_SC_ID_FK, Keys.DT_SC_REPLACEMENT_DT_SC_ID_FK);
    }

    private transient DtScPath _dtScBasedDtScIdFk;

    /**
     * Get the implicit join path to the <code>oagi.dt_sc</code> table, via the
     * <code>dt_sc_based_dt_sc_id_fk</code> key.
     */
    public DtScPath dtScBasedDtScIdFk() {
        if (_dtScBasedDtScIdFk == null)
            _dtScBasedDtScIdFk = new DtScPath(this, Keys.DT_SC_BASED_DT_SC_ID_FK, null);

        return _dtScBasedDtScIdFk;
    }

    private transient AppUserPath _dtScCreatedByFk;

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>dt_sc_created_by_fk</code> key.
     */
    public AppUserPath dtScCreatedByFk() {
        if (_dtScCreatedByFk == null)
            _dtScCreatedByFk = new AppUserPath(this, Keys.DT_SC_CREATED_BY_FK, null);

        return _dtScCreatedByFk;
    }

    private transient AppUserPath _dtScLastUpdatedByFk;

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>dt_sc_last_updated_by_fk</code> key.
     */
    public AppUserPath dtScLastUpdatedByFk() {
        if (_dtScLastUpdatedByFk == null)
            _dtScLastUpdatedByFk = new AppUserPath(this, Keys.DT_SC_LAST_UPDATED_BY_FK, null);

        return _dtScLastUpdatedByFk;
    }

    private transient DtScPath _dtScNextDtScIdFk;

    /**
     * Get the implicit join path to the <code>oagi.dt_sc</code> table, via the
     * <code>dt_sc_next_dt_sc_id_fk</code> key.
     */
    public DtScPath dtScNextDtScIdFk() {
        if (_dtScNextDtScIdFk == null)
            _dtScNextDtScIdFk = new DtScPath(this, Keys.DT_SC_NEXT_DT_SC_ID_FK, null);

        return _dtScNextDtScIdFk;
    }

    private transient DtPath _dt;

    /**
     * Get the implicit join path to the <code>oagi.dt</code> table.
     */
    public DtPath dt() {
        if (_dt == null)
            _dt = new DtPath(this, Keys.DT_SC_OWNER_DT_ID_FK, null);

        return _dt;
    }

    private transient AppUserPath _dtScOwnerUserIdFk;

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>dt_sc_owner_user_id_fk</code> key.
     */
    public AppUserPath dtScOwnerUserIdFk() {
        if (_dtScOwnerUserIdFk == null)
            _dtScOwnerUserIdFk = new AppUserPath(this, Keys.DT_SC_OWNER_USER_ID_FK, null);

        return _dtScOwnerUserIdFk;
    }

    private transient DtScPath _dtScPrevDtScIdFk;

    /**
     * Get the implicit join path to the <code>oagi.dt_sc</code> table, via the
     * <code>dt_sc_prev_dt_sc_id_fk</code> key.
     */
    public DtScPath dtScPrevDtScIdFk() {
        if (_dtScPrevDtScIdFk == null)
            _dtScPrevDtScIdFk = new DtScPath(this, Keys.DT_SC_PREV_DT_SC_ID_FK, null);

        return _dtScPrevDtScIdFk;
    }

    private transient DtScPath _dtScReplacementDtScIdFk;

    /**
     * Get the implicit join path to the <code>oagi.dt_sc</code> table, via the
     * <code>dt_sc_replacement_dt_sc_id_fk</code> key.
     */
    public DtScPath dtScReplacementDtScIdFk() {
        if (_dtScReplacementDtScIdFk == null)
            _dtScReplacementDtScIdFk = new DtScPath(this, Keys.DT_SC_REPLACEMENT_DT_SC_ID_FK, null);

        return _dtScReplacementDtScIdFk;
    }

    private transient CdtScAwdPriPath _cdtScAwdPri;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.cdt_sc_awd_pri</code> table
     */
    public CdtScAwdPriPath cdtScAwdPri() {
        if (_cdtScAwdPri == null)
            _cdtScAwdPri = new CdtScAwdPriPath(this, null, Keys.CDT_SC_AWD_PRI_CDT_SC_ID_FK.getInverseKey());

        return _cdtScAwdPri;
    }

    private transient CdtScRefSpecPath _cdtScRefSpec;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.cdt_sc_ref_spec</code> table
     */
    public CdtScRefSpecPath cdtScRefSpec() {
        if (_cdtScRefSpec == null)
            _cdtScRefSpec = new CdtScRefSpecPath(this, null, Keys.CDT_SC_REF_SPEC_CDT_SC_ID_FK.getInverseKey());

        return _cdtScRefSpec;
    }

    private transient DtScManifestPath _dtScManifest;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.dt_sc_manifest</code> table
     */
    public DtScManifestPath dtScManifest() {
        if (_dtScManifest == null)
            _dtScManifest = new DtScManifestPath(this, null, Keys.DT_SC_MANIFEST_DT_SC_ID_FK.getInverseKey());

        return _dtScManifest;
    }

    private transient DtUsageRulePath _dtUsageRule;

    /**
     * Get the implicit to-many join path to the <code>oagi.dt_usage_rule</code>
     * table
     */
    public DtUsageRulePath dtUsageRule() {
        if (_dtUsageRule == null)
            _dtUsageRule = new DtUsageRulePath(this, null, Keys.DT_USAGE_RULE_TARGET_DT_SC_ID_FK.getInverseKey());

        return _dtUsageRule;
    }

    @Override
    public DtSc as(String alias) {
        return new DtSc(DSL.name(alias), this);
    }

    @Override
    public DtSc as(Name alias) {
        return new DtSc(alias, this);
    }

    @Override
    public DtSc as(Table<?> alias) {
        return new DtSc(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DtSc rename(String name) {
        return new DtSc(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DtSc rename(Name name) {
        return new DtSc(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DtSc rename(Table<?> name) {
        return new DtSc(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DtSc where(Condition condition) {
        return new DtSc(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DtSc where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DtSc where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DtSc where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DtSc where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DtSc where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DtSc where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DtSc where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DtSc whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DtSc whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
