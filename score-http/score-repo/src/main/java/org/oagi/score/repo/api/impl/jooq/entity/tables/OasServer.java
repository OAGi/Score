/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.OasServerRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OasServer extends TableImpl<OasServerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.oas_server</code>
     */
    public static final OasServer OAS_SERVER = new OasServer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OasServerRecord> getRecordType() {
        return OasServerRecord.class;
    }

    /**
     * The column <code>oagi.oas_server.oas_server_id</code>. The primary key of
     * the record.
     */
    public final TableField<OasServerRecord, ULong> OAS_SERVER_ID = createField(DSL.name("oas_server_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "The primary key of the record.");

    /**
     * The column <code>oagi.oas_server.guid</code>. The GUID of the record.
     */
    public final TableField<OasServerRecord, String> GUID = createField(DSL.name("guid"), SQLDataType.VARCHAR(41).nullable(false), this, "The GUID of the record.");

    /**
     * The column <code>oagi.oas_server.oas_doc_id</code>. A reference of the
     * doc record.
     */
    public final TableField<OasServerRecord, ULong> OAS_DOC_ID = createField(DSL.name("oas_doc_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A reference of the doc record.");

    /**
     * The column <code>oagi.oas_server.description</code>. An optional string
     * describing the host designated by the URL. CommonMark syntax MAY be used
     * for rich text representation.
     */
    public final TableField<OasServerRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "An optional string describing the host designated by the URL. CommonMark syntax MAY be used for rich text representation.");

    /**
     * The column <code>oagi.oas_server.url</code>. REQUIRED. A URL to the
     * target host. This URL supports Server Variables and MAY be relative, to
     * indicate that the host location is relative to the location where the
     * OpenAPI document is being served. Variable substitutions will be made
     * when a variable is named in {brackets}.
     */
    public final TableField<OasServerRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(250).nullable(false), this, "REQUIRED. A URL to the target host. This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in {brackets}.");

    /**
     * The column <code>oagi.oas_server.variables</code>. A map between a
     * variable name and its value. The value is used for substitution in the
     * server's URL template.
     */
    public final TableField<OasServerRecord, String> VARIABLES = createField(DSL.name("variables"), SQLDataType.CLOB, this, "A map between a variable name and its value. The value is used for substitution in the server's URL template.");

    /**
     * The column <code>oagi.oas_server.owner_user_id</code>. The user who owns
     * the record.
     */
    public final TableField<OasServerRecord, ULong> OWNER_USER_ID = createField(DSL.name("owner_user_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The user who owns the record.");

    /**
     * The column <code>oagi.oas_server.created_by</code>. The user who creates
     * the record.
     */
    public final TableField<OasServerRecord, ULong> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The user who creates the record.");

    /**
     * The column <code>oagi.oas_server.last_updated_by</code>. The user who
     * last updates the record.
     */
    public final TableField<OasServerRecord, ULong> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The user who last updates the record.");

    /**
     * The column <code>oagi.oas_server.creation_timestamp</code>. The timestamp
     * when the record is created.
     */
    public final TableField<OasServerRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "The timestamp when the record is created.");

    /**
     * The column <code>oagi.oas_server.last_update_timestamp</code>. The
     * timestamp when the record is last updated.
     */
    public final TableField<OasServerRecord, LocalDateTime> LAST_UPDATE_TIMESTAMP = createField(DSL.name("last_update_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "The timestamp when the record is last updated.");

    private OasServer(Name alias, Table<OasServerRecord> aliased) {
        this(alias, aliased, null);
    }

    private OasServer(Name alias, Table<OasServerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>oagi.oas_server</code> table reference
     */
    public OasServer(String alias) {
        this(DSL.name(alias), OAS_SERVER);
    }

    /**
     * Create an aliased <code>oagi.oas_server</code> table reference
     */
    public OasServer(Name alias) {
        this(alias, OAS_SERVER);
    }

    /**
     * Create a <code>oagi.oas_server</code> table reference
     */
    public OasServer() {
        this(DSL.name("oas_server"), null);
    }

    public <O extends Record> OasServer(Table<O> child, ForeignKey<O, OasServerRecord> key) {
        super(child, key, OAS_SERVER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<OasServerRecord, ULong> getIdentity() {
        return (Identity<OasServerRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<OasServerRecord> getPrimaryKey() {
        return Keys.KEY_OAS_SERVER_PRIMARY;
    }

    @Override
    public List<ForeignKey<OasServerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OAS_SERVER_OAS_DOC_ID_FK, Keys.OAS_SERVER_OWNER_USER_ID_FK, Keys.OAS_SERVER_CREATED_BY_FK, Keys.OAS_SERVER_LAST_UPDATED_BY_FK);
    }

    private transient OasDoc _oasDoc;
    private transient AppUser _oasServerOwnerUserIdFk;
    private transient AppUser _oasServerCreatedByFk;
    private transient AppUser _oasServerLastUpdatedByFk;

    /**
     * Get the implicit join path to the <code>oagi.oas_doc</code> table.
     */
    public OasDoc oasDoc() {
        if (_oasDoc == null)
            _oasDoc = new OasDoc(this, Keys.OAS_SERVER_OAS_DOC_ID_FK);

        return _oasDoc;
    }

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>oas_server_owner_user_id_fk</code> key.
     */
    public AppUser oasServerOwnerUserIdFk() {
        if (_oasServerOwnerUserIdFk == null)
            _oasServerOwnerUserIdFk = new AppUser(this, Keys.OAS_SERVER_OWNER_USER_ID_FK);

        return _oasServerOwnerUserIdFk;
    }

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>oas_server_created_by_fk</code> key.
     */
    public AppUser oasServerCreatedByFk() {
        if (_oasServerCreatedByFk == null)
            _oasServerCreatedByFk = new AppUser(this, Keys.OAS_SERVER_CREATED_BY_FK);

        return _oasServerCreatedByFk;
    }

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>oas_server_last_updated_by_fk</code> key.
     */
    public AppUser oasServerLastUpdatedByFk() {
        if (_oasServerLastUpdatedByFk == null)
            _oasServerLastUpdatedByFk = new AppUser(this, Keys.OAS_SERVER_LAST_UPDATED_BY_FK);

        return _oasServerLastUpdatedByFk;
    }

    @Override
    public OasServer as(String alias) {
        return new OasServer(DSL.name(alias), this);
    }

    @Override
    public OasServer as(Name alias) {
        return new OasServer(alias, this);
    }

    @Override
    public OasServer as(Table<?> alias) {
        return new OasServer(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OasServer rename(String name) {
        return new OasServer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OasServer rename(Name name) {
        return new OasServer(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OasServer rename(Table<?> name) {
        return new OasServer(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<ULong, String, ULong, String, String, String, ULong, ULong, ULong, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super ULong, ? super String, ? super ULong, ? super String, ? super String, ? super String, ? super ULong, ? super ULong, ? super ULong, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super ULong, ? super String, ? super ULong, ? super String, ? super String, ? super String, ? super ULong, ? super ULong, ? super ULong, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
