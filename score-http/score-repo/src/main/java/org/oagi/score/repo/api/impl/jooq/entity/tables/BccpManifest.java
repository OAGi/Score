/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BccpManifestRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BccpManifest extends TableImpl<BccpManifestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.bccp_manifest</code>
     */
    public static final BccpManifest BCCP_MANIFEST = new BccpManifest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BccpManifestRecord> getRecordType() {
        return BccpManifestRecord.class;
    }

    /**
     * The column <code>oagi.bccp_manifest.bccp_manifest_id</code>.
     */
    public final TableField<BccpManifestRecord, ULong> BCCP_MANIFEST_ID = createField(DSL.name("bccp_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.bccp_manifest.release_id</code>.
     */
    public final TableField<BccpManifestRecord, ULong> RELEASE_ID = createField(DSL.name("release_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.bccp_manifest.bccp_id</code>.
     */
    public final TableField<BccpManifestRecord, ULong> BCCP_ID = createField(DSL.name("bccp_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.bccp_manifest.bdt_manifest_id</code>.
     */
    public final TableField<BccpManifestRecord, ULong> BDT_MANIFEST_ID = createField(DSL.name("bdt_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.bccp_manifest.conflict</code>. This indicates that there is a conflict between self and relationship.
     */
    public final TableField<BccpManifestRecord, Byte> CONFLICT = createField(DSL.name("conflict"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "This indicates that there is a conflict between self and relationship.");

    /**
     * The column <code>oagi.bccp_manifest.log_id</code>. A foreign key pointed to a log for the current record.
     */
    public final TableField<BccpManifestRecord, ULong> LOG_ID = createField(DSL.name("log_id"), SQLDataType.BIGINTUNSIGNED, this, "A foreign key pointed to a log for the current record.");

    /**
     * The column <code>oagi.bccp_manifest.replacement_bccp_manifest_id</code>. This refers to a replacement manifest if the record is deprecated.
     */
    public final TableField<BccpManifestRecord, ULong> REPLACEMENT_BCCP_MANIFEST_ID = createField(DSL.name("replacement_bccp_manifest_id"), SQLDataType.BIGINTUNSIGNED, this, "This refers to a replacement manifest if the record is deprecated.");

    /**
     * The column <code>oagi.bccp_manifest.prev_bccp_manifest_id</code>.
     */
    public final TableField<BccpManifestRecord, ULong> PREV_BCCP_MANIFEST_ID = createField(DSL.name("prev_bccp_manifest_id"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>oagi.bccp_manifest.next_bccp_manifest_id</code>.
     */
    public final TableField<BccpManifestRecord, ULong> NEXT_BCCP_MANIFEST_ID = createField(DSL.name("next_bccp_manifest_id"), SQLDataType.BIGINTUNSIGNED, this, "");

    private BccpManifest(Name alias, Table<BccpManifestRecord> aliased) {
        this(alias, aliased, null);
    }

    private BccpManifest(Name alias, Table<BccpManifestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>oagi.bccp_manifest</code> table reference
     */
    public BccpManifest(String alias) {
        this(DSL.name(alias), BCCP_MANIFEST);
    }

    /**
     * Create an aliased <code>oagi.bccp_manifest</code> table reference
     */
    public BccpManifest(Name alias) {
        this(alias, BCCP_MANIFEST);
    }

    /**
     * Create a <code>oagi.bccp_manifest</code> table reference
     */
    public BccpManifest() {
        this(DSL.name("bccp_manifest"), null);
    }

    public <O extends Record> BccpManifest(Table<O> child, ForeignKey<O, BccpManifestRecord> key) {
        super(child, key, BCCP_MANIFEST);
    }

    @Override
    public Schema getSchema() {
        return Oagi.OAGI;
    }

    @Override
    public Identity<BccpManifestRecord, ULong> getIdentity() {
        return (Identity<BccpManifestRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<BccpManifestRecord> getPrimaryKey() {
        return Keys.KEY_BCCP_MANIFEST_PRIMARY;
    }

    @Override
    public List<UniqueKey<BccpManifestRecord>> getKeys() {
        return Arrays.<UniqueKey<BccpManifestRecord>>asList(Keys.KEY_BCCP_MANIFEST_PRIMARY);
    }

    @Override
    public List<ForeignKey<BccpManifestRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BccpManifestRecord, ?>>asList(Keys.BCCP_MANIFEST_RELEASE_ID_FK, Keys.BCCP_MANIFEST_BCCP_ID_FK, Keys.BCCP_MANIFEST_BDT_MANIFEST_ID_FK, Keys.BCCP_MANIFEST_LOG_ID_FK, Keys.BCCP_REPLACEMENT_BCCP_MANIFEST_ID_FK, Keys.BCCP_MANIFEST_PREV_BCCP_MANIFEST_ID_FK, Keys.BCCP_MANIFEST_NEXT_BCCP_MANIFEST_ID_FK);
    }

    private transient Release _release;
    private transient Bccp _bccp;
    private transient DtManifest _dtManifest;
    private transient Log _log;
    private transient BccpManifest _bccpReplacementBccpManifestIdFk;
    private transient BccpManifest _bccpManifestPrevBccpManifestIdFk;
    private transient BccpManifest _bccpManifestNextBccpManifestIdFk;

    public Release release() {
        if (_release == null)
            _release = new Release(this, Keys.BCCP_MANIFEST_RELEASE_ID_FK);

        return _release;
    }

    public Bccp bccp() {
        if (_bccp == null)
            _bccp = new Bccp(this, Keys.BCCP_MANIFEST_BCCP_ID_FK);

        return _bccp;
    }

    public DtManifest dtManifest() {
        if (_dtManifest == null)
            _dtManifest = new DtManifest(this, Keys.BCCP_MANIFEST_BDT_MANIFEST_ID_FK);

        return _dtManifest;
    }

    public Log log() {
        if (_log == null)
            _log = new Log(this, Keys.BCCP_MANIFEST_LOG_ID_FK);

        return _log;
    }

    public BccpManifest bccpReplacementBccpManifestIdFk() {
        if (_bccpReplacementBccpManifestIdFk == null)
            _bccpReplacementBccpManifestIdFk = new BccpManifest(this, Keys.BCCP_REPLACEMENT_BCCP_MANIFEST_ID_FK);

        return _bccpReplacementBccpManifestIdFk;
    }

    public BccpManifest bccpManifestPrevBccpManifestIdFk() {
        if (_bccpManifestPrevBccpManifestIdFk == null)
            _bccpManifestPrevBccpManifestIdFk = new BccpManifest(this, Keys.BCCP_MANIFEST_PREV_BCCP_MANIFEST_ID_FK);

        return _bccpManifestPrevBccpManifestIdFk;
    }

    public BccpManifest bccpManifestNextBccpManifestIdFk() {
        if (_bccpManifestNextBccpManifestIdFk == null)
            _bccpManifestNextBccpManifestIdFk = new BccpManifest(this, Keys.BCCP_MANIFEST_NEXT_BCCP_MANIFEST_ID_FK);

        return _bccpManifestNextBccpManifestIdFk;
    }

    @Override
    public BccpManifest as(String alias) {
        return new BccpManifest(DSL.name(alias), this);
    }

    @Override
    public BccpManifest as(Name alias) {
        return new BccpManifest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BccpManifest rename(String name) {
        return new BccpManifest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BccpManifest rename(Name name) {
        return new BccpManifest(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<ULong, ULong, ULong, ULong, Byte, ULong, ULong, ULong, ULong> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
