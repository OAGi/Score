/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables.records;


import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Comment;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommentRecord extends UpdatableRecordImpl<CommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>oagi.comment.comment_id</code>.
     */
    public void setCommentId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>oagi.comment.comment_id</code>.
     */
    public ULong getCommentId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>oagi.comment.reference</code>.
     */
    public void setReference(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>oagi.comment.reference</code>.
     */
    public String getReference() {
        return (String) get(1);
    }

    /**
     * Setter for <code>oagi.comment.comment</code>.
     */
    public void setComment(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>oagi.comment.comment</code>.
     */
    public String getComment() {
        return (String) get(2);
    }

    /**
     * Setter for <code>oagi.comment.is_hidden</code>.
     */
    public void setIsHidden(Byte value) {
        set(3, value);
    }

    /**
     * Getter for <code>oagi.comment.is_hidden</code>.
     */
    public Byte getIsHidden() {
        return (Byte) get(3);
    }

    /**
     * Setter for <code>oagi.comment.is_deleted</code>.
     */
    public void setIsDeleted(Byte value) {
        set(4, value);
    }

    /**
     * Getter for <code>oagi.comment.is_deleted</code>.
     */
    public Byte getIsDeleted() {
        return (Byte) get(4);
    }

    /**
     * Setter for <code>oagi.comment.prev_comment_id</code>.
     */
    public void setPrevCommentId(ULong value) {
        set(5, value);
    }

    /**
     * Getter for <code>oagi.comment.prev_comment_id</code>.
     */
    public ULong getPrevCommentId() {
        return (ULong) get(5);
    }

    /**
     * Setter for <code>oagi.comment.created_by</code>.
     */
    public void setCreatedBy(ULong value) {
        set(6, value);
    }

    /**
     * Getter for <code>oagi.comment.created_by</code>.
     */
    public ULong getCreatedBy() {
        return (ULong) get(6);
    }

    /**
     * Setter for <code>oagi.comment.creation_timestamp</code>.
     */
    public void setCreationTimestamp(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>oagi.comment.creation_timestamp</code>.
     */
    public LocalDateTime getCreationTimestamp() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for <code>oagi.comment.last_update_timestamp</code>.
     */
    public void setLastUpdateTimestamp(LocalDateTime value) {
        set(8, value);
    }

    /**
     * Getter for <code>oagi.comment.last_update_timestamp</code>.
     */
    public LocalDateTime getLastUpdateTimestamp() {
        return (LocalDateTime) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CommentRecord
     */
    public CommentRecord() {
        super(Comment.COMMENT);
    }

    /**
     * Create a detached, initialised CommentRecord
     */
    public CommentRecord(ULong commentId, String reference, String comment, Byte isHidden, Byte isDeleted, ULong prevCommentId, ULong createdBy, LocalDateTime creationTimestamp, LocalDateTime lastUpdateTimestamp) {
        super(Comment.COMMENT);

        setCommentId(commentId);
        setReference(reference);
        setComment(comment);
        setIsHidden(isHidden);
        setIsDeleted(isDeleted);
        setPrevCommentId(prevCommentId);
        setCreatedBy(createdBy);
        setCreationTimestamp(creationTimestamp);
        setLastUpdateTimestamp(lastUpdateTimestamp);
        resetChangedOnNotNull();
    }
}
