/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CodeListManifest.CodeListManifestPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CodeListValue.CodeListValuePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CodeListValueManifest.CodeListValueManifestPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Release.ReleasePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.CodeListValueManifestRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CodeListValueManifest extends TableImpl<CodeListValueManifestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.code_list_value_manifest</code>
     */
    public static final CodeListValueManifest CODE_LIST_VALUE_MANIFEST = new CodeListValueManifest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CodeListValueManifestRecord> getRecordType() {
        return CodeListValueManifestRecord.class;
    }

    /**
     * The column
     * <code>oagi.code_list_value_manifest.code_list_value_manifest_id</code>.
     */
    public final TableField<CodeListValueManifestRecord, ULong> CODE_LIST_VALUE_MANIFEST_ID = createField(DSL.name("code_list_value_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.code_list_value_manifest.release_id</code>.
     */
    public final TableField<CodeListValueManifestRecord, ULong> RELEASE_ID = createField(DSL.name("release_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.code_list_value_manifest.code_list_value_id</code>.
     */
    public final TableField<CodeListValueManifestRecord, ULong> CODE_LIST_VALUE_ID = createField(DSL.name("code_list_value_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>oagi.code_list_value_manifest.code_list_manifest_id</code>.
     */
    public final TableField<CodeListValueManifestRecord, ULong> CODE_LIST_MANIFEST_ID = createField(DSL.name("code_list_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>oagi.code_list_value_manifest.based_code_list_value_manifest_id</code>.
     */
    public final TableField<CodeListValueManifestRecord, ULong> BASED_CODE_LIST_VALUE_MANIFEST_ID = createField(DSL.name("based_code_list_value_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>oagi.code_list_value_manifest.conflict</code>. This
     * indicates that there is a conflict between self and relationship.
     */
    public final TableField<CodeListValueManifestRecord, Byte> CONFLICT = createField(DSL.name("conflict"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "This indicates that there is a conflict between self and relationship.");

    /**
     * The column
     * <code>oagi.code_list_value_manifest.replacement_code_list_value_manifest_id</code>.
     * This refers to a replacement manifest if the record is deprecated.
     */
    public final TableField<CodeListValueManifestRecord, ULong> REPLACEMENT_CODE_LIST_VALUE_MANIFEST_ID = createField(DSL.name("replacement_code_list_value_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "This refers to a replacement manifest if the record is deprecated.");

    /**
     * The column
     * <code>oagi.code_list_value_manifest.prev_code_list_value_manifest_id</code>.
     */
    public final TableField<CodeListValueManifestRecord, ULong> PREV_CODE_LIST_VALUE_MANIFEST_ID = createField(DSL.name("prev_code_list_value_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column
     * <code>oagi.code_list_value_manifest.next_code_list_value_manifest_id</code>.
     */
    public final TableField<CodeListValueManifestRecord, ULong> NEXT_CODE_LIST_VALUE_MANIFEST_ID = createField(DSL.name("next_code_list_value_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "");

    private CodeListValueManifest(Name alias, Table<CodeListValueManifestRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CodeListValueManifest(Name alias, Table<CodeListValueManifestRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.code_list_value_manifest</code> table
     * reference
     */
    public CodeListValueManifest(String alias) {
        this(DSL.name(alias), CODE_LIST_VALUE_MANIFEST);
    }

    /**
     * Create an aliased <code>oagi.code_list_value_manifest</code> table
     * reference
     */
    public CodeListValueManifest(Name alias) {
        this(alias, CODE_LIST_VALUE_MANIFEST);
    }

    /**
     * Create a <code>oagi.code_list_value_manifest</code> table reference
     */
    public CodeListValueManifest() {
        this(DSL.name("code_list_value_manifest"), null);
    }

    public <O extends Record> CodeListValueManifest(Table<O> path, ForeignKey<O, CodeListValueManifestRecord> childPath, InverseForeignKey<O, CodeListValueManifestRecord> parentPath) {
        super(path, childPath, parentPath, CODE_LIST_VALUE_MANIFEST);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CodeListValueManifestPath extends CodeListValueManifest implements Path<CodeListValueManifestRecord> {
        public <O extends Record> CodeListValueManifestPath(Table<O> path, ForeignKey<O, CodeListValueManifestRecord> childPath, InverseForeignKey<O, CodeListValueManifestRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CodeListValueManifestPath(Name alias, Table<CodeListValueManifestRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CodeListValueManifestPath as(String alias) {
            return new CodeListValueManifestPath(DSL.name(alias), this);
        }

        @Override
        public CodeListValueManifestPath as(Name alias) {
            return new CodeListValueManifestPath(alias, this);
        }

        @Override
        public CodeListValueManifestPath as(Table<?> alias) {
            return new CodeListValueManifestPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<CodeListValueManifestRecord, ULong> getIdentity() {
        return (Identity<CodeListValueManifestRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CodeListValueManifestRecord> getPrimaryKey() {
        return Keys.KEY_CODE_LIST_VALUE_MANIFEST_PRIMARY;
    }

    @Override
    public List<ForeignKey<CodeListValueManifestRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CODE_LIST_VALUE_MANIFEST_RELEASE_ID_FK, Keys.CODE_LIST_VALUE_MANIFEST_CODE_LIST_VALUE_ID_FK, Keys.CODE_LIST_VALUE_MANIFEST_CODE_LIST_MANIFEST_ID_FK, Keys.CODE_LIST_VALUE_MANIFEST_BASED_CODE_LIST_VALUE_MANIFEST_ID_FK, Keys.CODE_LIST_VALUE_REPLACEMENT_CODE_LIST_VALUE_MANIFEST_ID_FK, Keys.CODE_LIST_VALUE_MANIFEST_PREV_CODE_LIST_VALUE_MANIFEST_ID_FK, Keys.CODE_LIST_VALUE_MANIFEST_NEXT_CODE_LIST_VALUE_MANIFEST_ID_FK);
    }

    private transient ReleasePath _release;

    /**
     * Get the implicit join path to the <code>oagi.release</code> table.
     */
    public ReleasePath release() {
        if (_release == null)
            _release = new ReleasePath(this, Keys.CODE_LIST_VALUE_MANIFEST_RELEASE_ID_FK, null);

        return _release;
    }

    private transient CodeListValuePath _codeListValue;

    /**
     * Get the implicit join path to the <code>oagi.code_list_value</code>
     * table.
     */
    public CodeListValuePath codeListValue() {
        if (_codeListValue == null)
            _codeListValue = new CodeListValuePath(this, Keys.CODE_LIST_VALUE_MANIFEST_CODE_LIST_VALUE_ID_FK, null);

        return _codeListValue;
    }

    private transient CodeListManifestPath _codeListManifest;

    /**
     * Get the implicit join path to the <code>oagi.code_list_manifest</code>
     * table.
     */
    public CodeListManifestPath codeListManifest() {
        if (_codeListManifest == null)
            _codeListManifest = new CodeListManifestPath(this, Keys.CODE_LIST_VALUE_MANIFEST_CODE_LIST_MANIFEST_ID_FK, null);

        return _codeListManifest;
    }

    private transient CodeListValueManifestPath _codeListValueManifestBasedCodeListValueManifestIdFk;

    /**
     * Get the implicit join path to the
     * <code>oagi.code_list_value_manifest</code> table, via the
     * <code>code_list_value_manifest_based_code_list_value_manifest_id_fk</code>
     * key.
     */
    public CodeListValueManifestPath codeListValueManifestBasedCodeListValueManifestIdFk() {
        if (_codeListValueManifestBasedCodeListValueManifestIdFk == null)
            _codeListValueManifestBasedCodeListValueManifestIdFk = new CodeListValueManifestPath(this, Keys.CODE_LIST_VALUE_MANIFEST_BASED_CODE_LIST_VALUE_MANIFEST_ID_FK, null);

        return _codeListValueManifestBasedCodeListValueManifestIdFk;
    }

    private transient CodeListValueManifestPath _codeListValueReplacementCodeListValueManifestIdFk;

    /**
     * Get the implicit join path to the
     * <code>oagi.code_list_value_manifest</code> table, via the
     * <code>code_list_value_replacement_code_list_value_manifest_id_fk</code>
     * key.
     */
    public CodeListValueManifestPath codeListValueReplacementCodeListValueManifestIdFk() {
        if (_codeListValueReplacementCodeListValueManifestIdFk == null)
            _codeListValueReplacementCodeListValueManifestIdFk = new CodeListValueManifestPath(this, Keys.CODE_LIST_VALUE_REPLACEMENT_CODE_LIST_VALUE_MANIFEST_ID_FK, null);

        return _codeListValueReplacementCodeListValueManifestIdFk;
    }

    private transient CodeListValueManifestPath _codeListValueManifestPrevCodeListValueManifestIdFk;

    /**
     * Get the implicit join path to the
     * <code>oagi.code_list_value_manifest</code> table, via the
     * <code>code_list_value_manifest_prev_code_list_value_manifest_id_fk</code>
     * key.
     */
    public CodeListValueManifestPath codeListValueManifestPrevCodeListValueManifestIdFk() {
        if (_codeListValueManifestPrevCodeListValueManifestIdFk == null)
            _codeListValueManifestPrevCodeListValueManifestIdFk = new CodeListValueManifestPath(this, Keys.CODE_LIST_VALUE_MANIFEST_PREV_CODE_LIST_VALUE_MANIFEST_ID_FK, null);

        return _codeListValueManifestPrevCodeListValueManifestIdFk;
    }

    private transient CodeListValueManifestPath _codeListValueManifestNextCodeListValueManifestIdFk;

    /**
     * Get the implicit join path to the
     * <code>oagi.code_list_value_manifest</code> table, via the
     * <code>code_list_value_manifest_next_code_list_value_manifest_id_fk</code>
     * key.
     */
    public CodeListValueManifestPath codeListValueManifestNextCodeListValueManifestIdFk() {
        if (_codeListValueManifestNextCodeListValueManifestIdFk == null)
            _codeListValueManifestNextCodeListValueManifestIdFk = new CodeListValueManifestPath(this, Keys.CODE_LIST_VALUE_MANIFEST_NEXT_CODE_LIST_VALUE_MANIFEST_ID_FK, null);

        return _codeListValueManifestNextCodeListValueManifestIdFk;
    }

    @Override
    public CodeListValueManifest as(String alias) {
        return new CodeListValueManifest(DSL.name(alias), this);
    }

    @Override
    public CodeListValueManifest as(Name alias) {
        return new CodeListValueManifest(alias, this);
    }

    @Override
    public CodeListValueManifest as(Table<?> alias) {
        return new CodeListValueManifest(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeListValueManifest rename(String name) {
        return new CodeListValueManifest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeListValueManifest rename(Name name) {
        return new CodeListValueManifest(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeListValueManifest rename(Table<?> name) {
        return new CodeListValueManifest(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CodeListValueManifest where(Condition condition) {
        return new CodeListValueManifest(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CodeListValueManifest where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CodeListValueManifest where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CodeListValueManifest where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CodeListValueManifest where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CodeListValueManifest where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CodeListValueManifest where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CodeListValueManifest where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CodeListValueManifest whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CodeListValueManifest whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
