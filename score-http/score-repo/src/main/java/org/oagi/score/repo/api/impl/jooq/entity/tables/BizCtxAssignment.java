/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Indexes;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BizCtx.BizCtxPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.TopLevelAsbiep.TopLevelAsbiepPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BizCtxAssignmentRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BizCtxAssignment extends TableImpl<BizCtxAssignmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.biz_ctx_assignment</code>
     */
    public static final BizCtxAssignment BIZ_CTX_ASSIGNMENT = new BizCtxAssignment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BizCtxAssignmentRecord> getRecordType() {
        return BizCtxAssignmentRecord.class;
    }

    /**
     * The column <code>oagi.biz_ctx_assignment.biz_ctx_assignment_id</code>.
     */
    public final TableField<BizCtxAssignmentRecord, ULong> BIZ_CTX_ASSIGNMENT_ID = createField(DSL.name("biz_ctx_assignment_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.biz_ctx_assignment.biz_ctx_id</code>.
     */
    public final TableField<BizCtxAssignmentRecord, ULong> BIZ_CTX_ID = createField(DSL.name("biz_ctx_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.biz_ctx_assignment.top_level_asbiep_id</code>. This
     * is a foreign key to the top-level ASBIEP.
     */
    public final TableField<BizCtxAssignmentRecord, ULong> TOP_LEVEL_ASBIEP_ID = createField(DSL.name("top_level_asbiep_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "This is a foreign key to the top-level ASBIEP.");

    private BizCtxAssignment(Name alias, Table<BizCtxAssignmentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BizCtxAssignment(Name alias, Table<BizCtxAssignmentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.biz_ctx_assignment</code> table reference
     */
    public BizCtxAssignment(String alias) {
        this(DSL.name(alias), BIZ_CTX_ASSIGNMENT);
    }

    /**
     * Create an aliased <code>oagi.biz_ctx_assignment</code> table reference
     */
    public BizCtxAssignment(Name alias) {
        this(alias, BIZ_CTX_ASSIGNMENT);
    }

    /**
     * Create a <code>oagi.biz_ctx_assignment</code> table reference
     */
    public BizCtxAssignment() {
        this(DSL.name("biz_ctx_assignment"), null);
    }

    public <O extends Record> BizCtxAssignment(Table<O> path, ForeignKey<O, BizCtxAssignmentRecord> childPath, InverseForeignKey<O, BizCtxAssignmentRecord> parentPath) {
        super(path, childPath, parentPath, BIZ_CTX_ASSIGNMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BizCtxAssignmentPath extends BizCtxAssignment implements Path<BizCtxAssignmentRecord> {
        public <O extends Record> BizCtxAssignmentPath(Table<O> path, ForeignKey<O, BizCtxAssignmentRecord> childPath, InverseForeignKey<O, BizCtxAssignmentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BizCtxAssignmentPath(Name alias, Table<BizCtxAssignmentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BizCtxAssignmentPath as(String alias) {
            return new BizCtxAssignmentPath(DSL.name(alias), this);
        }

        @Override
        public BizCtxAssignmentPath as(Name alias) {
            return new BizCtxAssignmentPath(alias, this);
        }

        @Override
        public BizCtxAssignmentPath as(Table<?> alias) {
            return new BizCtxAssignmentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.BIZ_CTX_ASSIGNMENT_BIZ_CTX_ID);
    }

    @Override
    public Identity<BizCtxAssignmentRecord, ULong> getIdentity() {
        return (Identity<BizCtxAssignmentRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<BizCtxAssignmentRecord> getPrimaryKey() {
        return Keys.KEY_BIZ_CTX_ASSIGNMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<BizCtxAssignmentRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_BIZ_CTX_ASSIGNMENT_BIZ_CTX_ASSIGNMENT_UK);
    }

    @Override
    public List<ForeignKey<BizCtxAssignmentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BIZ_CTX_ASSIGNMENT_BIZ_CTX_ID_FK, Keys.BIZ_CTX_ASSIGNMENT_TOP_LEVEL_ASBIEP_ID_FK);
    }

    private transient BizCtxPath _bizCtx;

    /**
     * Get the implicit join path to the <code>oagi.biz_ctx</code> table.
     */
    public BizCtxPath bizCtx() {
        if (_bizCtx == null)
            _bizCtx = new BizCtxPath(this, Keys.BIZ_CTX_ASSIGNMENT_BIZ_CTX_ID_FK, null);

        return _bizCtx;
    }

    private transient TopLevelAsbiepPath _topLevelAsbiep;

    /**
     * Get the implicit join path to the <code>oagi.top_level_asbiep</code>
     * table.
     */
    public TopLevelAsbiepPath topLevelAsbiep() {
        if (_topLevelAsbiep == null)
            _topLevelAsbiep = new TopLevelAsbiepPath(this, Keys.BIZ_CTX_ASSIGNMENT_TOP_LEVEL_ASBIEP_ID_FK, null);

        return _topLevelAsbiep;
    }

    @Override
    public BizCtxAssignment as(String alias) {
        return new BizCtxAssignment(DSL.name(alias), this);
    }

    @Override
    public BizCtxAssignment as(Name alias) {
        return new BizCtxAssignment(alias, this);
    }

    @Override
    public BizCtxAssignment as(Table<?> alias) {
        return new BizCtxAssignment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BizCtxAssignment rename(String name) {
        return new BizCtxAssignment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BizCtxAssignment rename(Name name) {
        return new BizCtxAssignment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BizCtxAssignment rename(Table<?> name) {
        return new BizCtxAssignment(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BizCtxAssignment where(Condition condition) {
        return new BizCtxAssignment(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BizCtxAssignment where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BizCtxAssignment where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BizCtxAssignment where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BizCtxAssignment where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BizCtxAssignment where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BizCtxAssignment where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BizCtxAssignment where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BizCtxAssignment whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BizCtxAssignment whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
