/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CdtPri.CdtPriPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CdtScAwdPriXpsTypeMap.CdtScAwdPriXpsTypeMapPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.DtSc.DtScPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.CdtScAwdPriRecord;


/**
 * This table capture the CDT primitives allowed for a particular SC of a CDT.
 * It also stores the CDT primitives allowed for a SC of a BDT that extends its
 * base (such SC is not defined in the CCTS data type catalog specification).
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CdtScAwdPri extends TableImpl<CdtScAwdPriRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.cdt_sc_awd_pri</code>
     */
    public static final CdtScAwdPri CDT_SC_AWD_PRI = new CdtScAwdPri();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CdtScAwdPriRecord> getRecordType() {
        return CdtScAwdPriRecord.class;
    }

    /**
     * The column <code>oagi.cdt_sc_awd_pri.cdt_sc_awd_pri_id</code>. Internal,
     * primary database key.
     */
    public final TableField<CdtScAwdPriRecord, ULong> CDT_SC_AWD_PRI_ID = createField(DSL.name("cdt_sc_awd_pri_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Internal, primary database key.");

    /**
     * The column <code>oagi.cdt_sc_awd_pri.cdt_sc_id</code>. Foreign key
     * pointing to the supplementary component (SC).
     */
    public final TableField<CdtScAwdPriRecord, ULong> CDT_SC_ID = createField(DSL.name("cdt_sc_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key pointing to the supplementary component (SC).");

    /**
     * The column <code>oagi.cdt_sc_awd_pri.cdt_pri_id</code>. A foreign key
     * pointing to the CDT_Pri table. It represents a CDT primitive allowed for
     * the suppliement component identified in the CDT_SC_ID column.
     */
    public final TableField<CdtScAwdPriRecord, ULong> CDT_PRI_ID = createField(DSL.name("cdt_pri_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A foreign key pointing to the CDT_Pri table. It represents a CDT primitive allowed for the suppliement component identified in the CDT_SC_ID column.");

    /**
     * The column <code>oagi.cdt_sc_awd_pri.is_default</code>. Indicating
     * whether the primitive is the default primitive of the supplementary
     * component.
     */
    public final TableField<CdtScAwdPriRecord, Byte> IS_DEFAULT = createField(DSL.name("is_default"), SQLDataType.TINYINT.nullable(false), this, "Indicating whether the primitive is the default primitive of the supplementary component.");

    private CdtScAwdPri(Name alias, Table<CdtScAwdPriRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CdtScAwdPri(Name alias, Table<CdtScAwdPriRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("This table capture the CDT primitives allowed for a particular SC of a CDT. It also stores the CDT primitives allowed for a SC of a BDT that extends its base (such SC is not defined in the CCTS data type catalog specification)."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.cdt_sc_awd_pri</code> table reference
     */
    public CdtScAwdPri(String alias) {
        this(DSL.name(alias), CDT_SC_AWD_PRI);
    }

    /**
     * Create an aliased <code>oagi.cdt_sc_awd_pri</code> table reference
     */
    public CdtScAwdPri(Name alias) {
        this(alias, CDT_SC_AWD_PRI);
    }

    /**
     * Create a <code>oagi.cdt_sc_awd_pri</code> table reference
     */
    public CdtScAwdPri() {
        this(DSL.name("cdt_sc_awd_pri"), null);
    }

    public <O extends Record> CdtScAwdPri(Table<O> path, ForeignKey<O, CdtScAwdPriRecord> childPath, InverseForeignKey<O, CdtScAwdPriRecord> parentPath) {
        super(path, childPath, parentPath, CDT_SC_AWD_PRI);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CdtScAwdPriPath extends CdtScAwdPri implements Path<CdtScAwdPriRecord> {
        public <O extends Record> CdtScAwdPriPath(Table<O> path, ForeignKey<O, CdtScAwdPriRecord> childPath, InverseForeignKey<O, CdtScAwdPriRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CdtScAwdPriPath(Name alias, Table<CdtScAwdPriRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CdtScAwdPriPath as(String alias) {
            return new CdtScAwdPriPath(DSL.name(alias), this);
        }

        @Override
        public CdtScAwdPriPath as(Name alias) {
            return new CdtScAwdPriPath(alias, this);
        }

        @Override
        public CdtScAwdPriPath as(Table<?> alias) {
            return new CdtScAwdPriPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<CdtScAwdPriRecord, ULong> getIdentity() {
        return (Identity<CdtScAwdPriRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CdtScAwdPriRecord> getPrimaryKey() {
        return Keys.KEY_CDT_SC_AWD_PRI_PRIMARY;
    }

    @Override
    public List<ForeignKey<CdtScAwdPriRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CDT_SC_AWD_PRI_CDT_SC_ID_FK, Keys.CDT_SC_AWD_PRI_CDT_PRI_ID_FK);
    }

    private transient DtScPath _dtSc;

    /**
     * Get the implicit join path to the <code>oagi.dt_sc</code> table.
     */
    public DtScPath dtSc() {
        if (_dtSc == null)
            _dtSc = new DtScPath(this, Keys.CDT_SC_AWD_PRI_CDT_SC_ID_FK, null);

        return _dtSc;
    }

    private transient CdtPriPath _cdtPri;

    /**
     * Get the implicit join path to the <code>oagi.cdt_pri</code> table.
     */
    public CdtPriPath cdtPri() {
        if (_cdtPri == null)
            _cdtPri = new CdtPriPath(this, Keys.CDT_SC_AWD_PRI_CDT_PRI_ID_FK, null);

        return _cdtPri;
    }

    private transient CdtScAwdPriXpsTypeMapPath _cdtScAwdPriXpsTypeMap;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.cdt_sc_awd_pri_xps_type_map</code> table
     */
    public CdtScAwdPriXpsTypeMapPath cdtScAwdPriXpsTypeMap() {
        if (_cdtScAwdPriXpsTypeMap == null)
            _cdtScAwdPriXpsTypeMap = new CdtScAwdPriXpsTypeMapPath(this, null, Keys.CDT_SC_AWD_PRI_XPS_TYPE_MAP_CDT_SC_AWD_PRI_ID_FK.getInverseKey());

        return _cdtScAwdPriXpsTypeMap;
    }

    @Override
    public CdtScAwdPri as(String alias) {
        return new CdtScAwdPri(DSL.name(alias), this);
    }

    @Override
    public CdtScAwdPri as(Name alias) {
        return new CdtScAwdPri(alias, this);
    }

    @Override
    public CdtScAwdPri as(Table<?> alias) {
        return new CdtScAwdPri(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CdtScAwdPri rename(String name) {
        return new CdtScAwdPri(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CdtScAwdPri rename(Name name) {
        return new CdtScAwdPri(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CdtScAwdPri rename(Table<?> name) {
        return new CdtScAwdPri(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CdtScAwdPri where(Condition condition) {
        return new CdtScAwdPri(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CdtScAwdPri where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CdtScAwdPri where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CdtScAwdPri where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CdtScAwdPri where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CdtScAwdPri where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CdtScAwdPri where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CdtScAwdPri where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CdtScAwdPri whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CdtScAwdPri whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
