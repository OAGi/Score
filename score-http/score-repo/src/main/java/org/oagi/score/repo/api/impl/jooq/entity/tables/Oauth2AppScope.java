/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Oauth2App.Oauth2AppPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.Oauth2AppScopeRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Oauth2AppScope extends TableImpl<Oauth2AppScopeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.oauth2_app_scope</code>
     */
    public static final Oauth2AppScope OAUTH2_APP_SCOPE = new Oauth2AppScope();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Oauth2AppScopeRecord> getRecordType() {
        return Oauth2AppScopeRecord.class;
    }

    /**
     * The column <code>oagi.oauth2_app_scope.oauth2_app_scope_id</code>.
     */
    public final TableField<Oauth2AppScopeRecord, ULong> OAUTH2_APP_SCOPE_ID = createField(DSL.name("oauth2_app_scope_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.oauth2_app_scope.oauth2_app_id</code>.
     */
    public final TableField<Oauth2AppScopeRecord, ULong> OAUTH2_APP_ID = createField(DSL.name("oauth2_app_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.oauth2_app_scope.scope</code>.
     */
    public final TableField<Oauth2AppScopeRecord, String> SCOPE = createField(DSL.name("scope"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    private Oauth2AppScope(Name alias, Table<Oauth2AppScopeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Oauth2AppScope(Name alias, Table<Oauth2AppScopeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.oauth2_app_scope</code> table reference
     */
    public Oauth2AppScope(String alias) {
        this(DSL.name(alias), OAUTH2_APP_SCOPE);
    }

    /**
     * Create an aliased <code>oagi.oauth2_app_scope</code> table reference
     */
    public Oauth2AppScope(Name alias) {
        this(alias, OAUTH2_APP_SCOPE);
    }

    /**
     * Create a <code>oagi.oauth2_app_scope</code> table reference
     */
    public Oauth2AppScope() {
        this(DSL.name("oauth2_app_scope"), null);
    }

    public <O extends Record> Oauth2AppScope(Table<O> path, ForeignKey<O, Oauth2AppScopeRecord> childPath, InverseForeignKey<O, Oauth2AppScopeRecord> parentPath) {
        super(path, childPath, parentPath, OAUTH2_APP_SCOPE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class Oauth2AppScopePath extends Oauth2AppScope implements Path<Oauth2AppScopeRecord> {
        public <O extends Record> Oauth2AppScopePath(Table<O> path, ForeignKey<O, Oauth2AppScopeRecord> childPath, InverseForeignKey<O, Oauth2AppScopeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private Oauth2AppScopePath(Name alias, Table<Oauth2AppScopeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public Oauth2AppScopePath as(String alias) {
            return new Oauth2AppScopePath(DSL.name(alias), this);
        }

        @Override
        public Oauth2AppScopePath as(Name alias) {
            return new Oauth2AppScopePath(alias, this);
        }

        @Override
        public Oauth2AppScopePath as(Table<?> alias) {
            return new Oauth2AppScopePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<Oauth2AppScopeRecord, ULong> getIdentity() {
        return (Identity<Oauth2AppScopeRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<Oauth2AppScopeRecord> getPrimaryKey() {
        return Keys.KEY_OAUTH2_APP_SCOPE_PRIMARY;
    }

    @Override
    public List<ForeignKey<Oauth2AppScopeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OAUTH2_APP_SCOPE_OAUTH2_APP_ID_FK);
    }

    private transient Oauth2AppPath _oauth2App;

    /**
     * Get the implicit join path to the <code>oagi.oauth2_app</code> table.
     */
    public Oauth2AppPath oauth2App() {
        if (_oauth2App == null)
            _oauth2App = new Oauth2AppPath(this, Keys.OAUTH2_APP_SCOPE_OAUTH2_APP_ID_FK, null);

        return _oauth2App;
    }

    @Override
    public Oauth2AppScope as(String alias) {
        return new Oauth2AppScope(DSL.name(alias), this);
    }

    @Override
    public Oauth2AppScope as(Name alias) {
        return new Oauth2AppScope(alias, this);
    }

    @Override
    public Oauth2AppScope as(Table<?> alias) {
        return new Oauth2AppScope(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Oauth2AppScope rename(String name) {
        return new Oauth2AppScope(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Oauth2AppScope rename(Name name) {
        return new Oauth2AppScope(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Oauth2AppScope rename(Table<?> name) {
        return new Oauth2AppScope(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Oauth2AppScope where(Condition condition) {
        return new Oauth2AppScope(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Oauth2AppScope where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Oauth2AppScope where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Oauth2AppScope where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Oauth2AppScope where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Oauth2AppScope where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Oauth2AppScope where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Oauth2AppScope where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Oauth2AppScope whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Oauth2AppScope whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
