/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Abie.AbiePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AppUser.AppUserPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BizCtxAssignment.BizCtxAssignmentPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BizCtxValue.BizCtxValuePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Tenant.TenantPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.TenantBusinessCtx.TenantBusinessCtxPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.TopLevelAsbiep.TopLevelAsbiepPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BizCtxRecord;


/**
 * This table represents a business context. A business context is a combination
 * of one or more business context values.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BizCtx extends TableImpl<BizCtxRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.biz_ctx</code>
     */
    public static final BizCtx BIZ_CTX = new BizCtx();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BizCtxRecord> getRecordType() {
        return BizCtxRecord.class;
    }

    /**
     * The column <code>oagi.biz_ctx.biz_ctx_id</code>. Primary, internal
     * database key.
     */
    public final TableField<BizCtxRecord, ULong> BIZ_CTX_ID = createField(DSL.name("biz_ctx_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary, internal database key.");

    /**
     * The column <code>oagi.biz_ctx.guid</code>. A globally unique identifier
     * (GUID).
     */
    public final TableField<BizCtxRecord, String> GUID = createField(DSL.name("guid"), SQLDataType.CHAR(32).nullable(false), this, "A globally unique identifier (GUID).");

    /**
     * The column <code>oagi.biz_ctx.name</code>. Short, descriptive name of the
     * business context.
     */
    public final TableField<BizCtxRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "Short, descriptive name of the business context.");

    /**
     * The column <code>oagi.biz_ctx.created_by</code>. Foreign key to the
     * APP_USER table referring to the user who creates the entity. 
     */
    public final TableField<BizCtxRecord, ULong> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the APP_USER table referring to the user who creates the entity. ");

    /**
     * The column <code>oagi.biz_ctx.last_updated_by</code>. Foreign key to the
     * APP_USER table  referring to the last user who has updated the business
     * context.
     */
    public final TableField<BizCtxRecord, ULong> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the APP_USER table  referring to the last user who has updated the business context.");

    /**
     * The column <code>oagi.biz_ctx.creation_timestamp</code>. Timestamp when
     * the business context record was first created. 
     */
    public final TableField<BizCtxRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Timestamp when the business context record was first created. ");

    /**
     * The column <code>oagi.biz_ctx.last_update_timestamp</code>. The timestamp
     * when the business context was last updated.
     */
    public final TableField<BizCtxRecord, LocalDateTime> LAST_UPDATE_TIMESTAMP = createField(DSL.name("last_update_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "The timestamp when the business context was last updated.");

    private BizCtx(Name alias, Table<BizCtxRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BizCtx(Name alias, Table<BizCtxRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("This table represents a business context. A business context is a combination of one or more business context values."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.biz_ctx</code> table reference
     */
    public BizCtx(String alias) {
        this(DSL.name(alias), BIZ_CTX);
    }

    /**
     * Create an aliased <code>oagi.biz_ctx</code> table reference
     */
    public BizCtx(Name alias) {
        this(alias, BIZ_CTX);
    }

    /**
     * Create a <code>oagi.biz_ctx</code> table reference
     */
    public BizCtx() {
        this(DSL.name("biz_ctx"), null);
    }

    public <O extends Record> BizCtx(Table<O> path, ForeignKey<O, BizCtxRecord> childPath, InverseForeignKey<O, BizCtxRecord> parentPath) {
        super(path, childPath, parentPath, BIZ_CTX);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BizCtxPath extends BizCtx implements Path<BizCtxRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BizCtxPath(Table<O> path, ForeignKey<O, BizCtxRecord> childPath, InverseForeignKey<O, BizCtxRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BizCtxPath(Name alias, Table<BizCtxRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BizCtxPath as(String alias) {
            return new BizCtxPath(DSL.name(alias), this);
        }

        @Override
        public BizCtxPath as(Name alias) {
            return new BizCtxPath(alias, this);
        }

        @Override
        public BizCtxPath as(Table<?> alias) {
            return new BizCtxPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<BizCtxRecord, ULong> getIdentity() {
        return (Identity<BizCtxRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<BizCtxRecord> getPrimaryKey() {
        return Keys.KEY_BIZ_CTX_PRIMARY;
    }

    @Override
    public List<UniqueKey<BizCtxRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_BIZ_CTX_BIZ_CTX_UK1);
    }

    @Override
    public List<ForeignKey<BizCtxRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BIZ_CTX_CREATED_BY_FK, Keys.BIZ_CTX_LAST_UPDATED_BY_FK);
    }

    private transient AppUserPath _bizCtxCreatedByFk;

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>biz_ctx_created_by_fk</code> key.
     */
    public AppUserPath bizCtxCreatedByFk() {
        if (_bizCtxCreatedByFk == null)
            _bizCtxCreatedByFk = new AppUserPath(this, Keys.BIZ_CTX_CREATED_BY_FK, null);

        return _bizCtxCreatedByFk;
    }

    private transient AppUserPath _bizCtxLastUpdatedByFk;

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>biz_ctx_last_updated_by_fk</code> key.
     */
    public AppUserPath bizCtxLastUpdatedByFk() {
        if (_bizCtxLastUpdatedByFk == null)
            _bizCtxLastUpdatedByFk = new AppUserPath(this, Keys.BIZ_CTX_LAST_UPDATED_BY_FK, null);

        return _bizCtxLastUpdatedByFk;
    }

    private transient AbiePath _abie;

    /**
     * Get the implicit to-many join path to the <code>oagi.abie</code> table
     */
    public AbiePath abie() {
        if (_abie == null)
            _abie = new AbiePath(this, null, Keys.ABIE_BIZ_CTX_ID_FK.getInverseKey());

        return _abie;
    }

    private transient BizCtxAssignmentPath _bizCtxAssignment;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.biz_ctx_assignment</code> table
     */
    public BizCtxAssignmentPath bizCtxAssignment() {
        if (_bizCtxAssignment == null)
            _bizCtxAssignment = new BizCtxAssignmentPath(this, null, Keys.BIZ_CTX_ASSIGNMENT_BIZ_CTX_ID_FK.getInverseKey());

        return _bizCtxAssignment;
    }

    private transient BizCtxValuePath _bizCtxValue;

    /**
     * Get the implicit to-many join path to the <code>oagi.biz_ctx_value</code>
     * table
     */
    public BizCtxValuePath bizCtxValue() {
        if (_bizCtxValue == null)
            _bizCtxValue = new BizCtxValuePath(this, null, Keys.BIZ_CTX_VALUE_BIZ_CTX_ID_FK.getInverseKey());

        return _bizCtxValue;
    }

    private transient TenantBusinessCtxPath _tenantBusinessCtx;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.tenant_business_ctx</code> table
     */
    public TenantBusinessCtxPath tenantBusinessCtx() {
        if (_tenantBusinessCtx == null)
            _tenantBusinessCtx = new TenantBusinessCtxPath(this, null, Keys.ORGANIZATION_BUSINESS_CTX_BIZ_CTX_ID_FK.getInverseKey());

        return _tenantBusinessCtx;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>oagi.top_level_asbiep</code> table
     */
    public TopLevelAsbiepPath topLevelAsbiep() {
        return bizCtxAssignment().topLevelAsbiep();
    }

    /**
     * Get the implicit many-to-many join path to the <code>oagi.tenant</code>
     * table
     */
    public TenantPath tenant() {
        return tenantBusinessCtx().tenant();
    }

    @Override
    public BizCtx as(String alias) {
        return new BizCtx(DSL.name(alias), this);
    }

    @Override
    public BizCtx as(Name alias) {
        return new BizCtx(alias, this);
    }

    @Override
    public BizCtx as(Table<?> alias) {
        return new BizCtx(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BizCtx rename(String name) {
        return new BizCtx(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BizCtx rename(Name name) {
        return new BizCtx(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BizCtx rename(Table<?> name) {
        return new BizCtx(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BizCtx where(Condition condition) {
        return new BizCtx(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BizCtx where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BizCtx where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BizCtx where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BizCtx where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BizCtx where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BizCtx where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BizCtx where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BizCtx whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BizCtx whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
