/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AppUser.AppUserPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CodeList.CodeListPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CtxCategory.CtxCategoryPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CtxSchemeValue.CtxSchemeValuePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.CtxSchemeRecord;


/**
 * This table represents a context scheme (a classification scheme) for a
 * context category.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CtxScheme extends TableImpl<CtxSchemeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.ctx_scheme</code>
     */
    public static final CtxScheme CTX_SCHEME = new CtxScheme();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CtxSchemeRecord> getRecordType() {
        return CtxSchemeRecord.class;
    }

    /**
     * The column <code>oagi.ctx_scheme.ctx_scheme_id</code>. Internal, primary,
     * database key.
     */
    public final TableField<CtxSchemeRecord, ULong> CTX_SCHEME_ID = createField(DSL.name("ctx_scheme_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Internal, primary, database key.");

    /**
     * The column <code>oagi.ctx_scheme.guid</code>. A globally unique
     * identifier (GUID).
     */
    public final TableField<CtxSchemeRecord, String> GUID = createField(DSL.name("guid"), SQLDataType.CHAR(32).nullable(false), this, "A globally unique identifier (GUID).");

    /**
     * The column <code>oagi.ctx_scheme.scheme_id</code>. External
     * identification of the scheme. 
     */
    public final TableField<CtxSchemeRecord, String> SCHEME_ID = createField(DSL.name("scheme_id"), SQLDataType.VARCHAR(45).nullable(false), this, "External identification of the scheme. ");

    /**
     * The column <code>oagi.ctx_scheme.scheme_name</code>. Pretty print name of
     * the context scheme.
     */
    public final TableField<CtxSchemeRecord, String> SCHEME_NAME = createField(DSL.name("scheme_name"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "Pretty print name of the context scheme.");

    /**
     * The column <code>oagi.ctx_scheme.description</code>. Description of the
     * context scheme.
     */
    public final TableField<CtxSchemeRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "Description of the context scheme.");

    /**
     * The column <code>oagi.ctx_scheme.scheme_agency_id</code>. Identification
     * of the agency maintaining the scheme. This column currently does not use
     * the AGENCY_ID_LIST table. It is just a free form text at this point.
     */
    public final TableField<CtxSchemeRecord, String> SCHEME_AGENCY_ID = createField(DSL.name("scheme_agency_id"), SQLDataType.VARCHAR(45).nullable(false), this, "Identification of the agency maintaining the scheme. This column currently does not use the AGENCY_ID_LIST table. It is just a free form text at this point.");

    /**
     * The column <code>oagi.ctx_scheme.scheme_version_id</code>. Version number
     * of the context scheme.
     */
    public final TableField<CtxSchemeRecord, String> SCHEME_VERSION_ID = createField(DSL.name("scheme_version_id"), SQLDataType.VARCHAR(45).nullable(false), this, "Version number of the context scheme.");

    /**
     * The column <code>oagi.ctx_scheme.ctx_category_id</code>. This the foreign
     * key to the CTX_CATEGORY table. It identifies the context category
     * associated with this context scheme.
     */
    public final TableField<CtxSchemeRecord, ULong> CTX_CATEGORY_ID = createField(DSL.name("ctx_category_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "This the foreign key to the CTX_CATEGORY table. It identifies the context category associated with this context scheme.");

    /**
     * The column <code>oagi.ctx_scheme.code_list_id</code>. This is the foreign
     * key to the CODE_LIST table. It identifies the code list associated with
     * this context scheme.
     */
    public final TableField<CtxSchemeRecord, ULong> CODE_LIST_ID = createField(DSL.name("code_list_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "This is the foreign key to the CODE_LIST table. It identifies the code list associated with this context scheme.");

    /**
     * The column <code>oagi.ctx_scheme.created_by</code>. Foreign key to the
     * APP_USER table. It indicates the user who created this context scheme.
     */
    public final TableField<CtxSchemeRecord, ULong> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the APP_USER table. It indicates the user who created this context scheme.");

    /**
     * The column <code>oagi.ctx_scheme.last_updated_by</code>. Foreign key to
     * the APP_USER table. It identifies the user who last updated the context
     * scheme.
     */
    public final TableField<CtxSchemeRecord, ULong> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the APP_USER table. It identifies the user who last updated the context scheme.");

    /**
     * The column <code>oagi.ctx_scheme.creation_timestamp</code>. Timestamp
     * when the scheme was created.
     */
    public final TableField<CtxSchemeRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Timestamp when the scheme was created.");

    /**
     * The column <code>oagi.ctx_scheme.last_update_timestamp</code>. Timestamp
     * when the scheme was last updated.
     */
    public final TableField<CtxSchemeRecord, LocalDateTime> LAST_UPDATE_TIMESTAMP = createField(DSL.name("last_update_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Timestamp when the scheme was last updated.");

    private CtxScheme(Name alias, Table<CtxSchemeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CtxScheme(Name alias, Table<CtxSchemeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("This table represents a context scheme (a classification scheme) for a context category."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.ctx_scheme</code> table reference
     */
    public CtxScheme(String alias) {
        this(DSL.name(alias), CTX_SCHEME);
    }

    /**
     * Create an aliased <code>oagi.ctx_scheme</code> table reference
     */
    public CtxScheme(Name alias) {
        this(alias, CTX_SCHEME);
    }

    /**
     * Create a <code>oagi.ctx_scheme</code> table reference
     */
    public CtxScheme() {
        this(DSL.name("ctx_scheme"), null);
    }

    public <O extends Record> CtxScheme(Table<O> path, ForeignKey<O, CtxSchemeRecord> childPath, InverseForeignKey<O, CtxSchemeRecord> parentPath) {
        super(path, childPath, parentPath, CTX_SCHEME);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CtxSchemePath extends CtxScheme implements Path<CtxSchemeRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CtxSchemePath(Table<O> path, ForeignKey<O, CtxSchemeRecord> childPath, InverseForeignKey<O, CtxSchemeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CtxSchemePath(Name alias, Table<CtxSchemeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CtxSchemePath as(String alias) {
            return new CtxSchemePath(DSL.name(alias), this);
        }

        @Override
        public CtxSchemePath as(Name alias) {
            return new CtxSchemePath(alias, this);
        }

        @Override
        public CtxSchemePath as(Table<?> alias) {
            return new CtxSchemePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<CtxSchemeRecord, ULong> getIdentity() {
        return (Identity<CtxSchemeRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CtxSchemeRecord> getPrimaryKey() {
        return Keys.KEY_CTX_SCHEME_PRIMARY;
    }

    @Override
    public List<UniqueKey<CtxSchemeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CTX_SCHEME_CTX_SCHEME_UK1);
    }

    @Override
    public List<ForeignKey<CtxSchemeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CTX_SCHEME_CODE_LIST_ID_FK, Keys.CTX_SCHEME_CREATED_BY_FK, Keys.CTX_SCHEME_CTX_CATEGORY_ID_FK, Keys.CTX_SCHEME_LAST_UPDATED_BY_FK);
    }

    private transient CodeListPath _codeList;

    /**
     * Get the implicit join path to the <code>oagi.code_list</code> table.
     */
    public CodeListPath codeList() {
        if (_codeList == null)
            _codeList = new CodeListPath(this, Keys.CTX_SCHEME_CODE_LIST_ID_FK, null);

        return _codeList;
    }

    private transient AppUserPath _ctxSchemeCreatedByFk;

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>ctx_scheme_created_by_fk</code> key.
     */
    public AppUserPath ctxSchemeCreatedByFk() {
        if (_ctxSchemeCreatedByFk == null)
            _ctxSchemeCreatedByFk = new AppUserPath(this, Keys.CTX_SCHEME_CREATED_BY_FK, null);

        return _ctxSchemeCreatedByFk;
    }

    private transient CtxCategoryPath _ctxCategory;

    /**
     * Get the implicit join path to the <code>oagi.ctx_category</code> table.
     */
    public CtxCategoryPath ctxCategory() {
        if (_ctxCategory == null)
            _ctxCategory = new CtxCategoryPath(this, Keys.CTX_SCHEME_CTX_CATEGORY_ID_FK, null);

        return _ctxCategory;
    }

    private transient AppUserPath _ctxSchemeLastUpdatedByFk;

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>ctx_scheme_last_updated_by_fk</code> key.
     */
    public AppUserPath ctxSchemeLastUpdatedByFk() {
        if (_ctxSchemeLastUpdatedByFk == null)
            _ctxSchemeLastUpdatedByFk = new AppUserPath(this, Keys.CTX_SCHEME_LAST_UPDATED_BY_FK, null);

        return _ctxSchemeLastUpdatedByFk;
    }

    private transient CtxSchemeValuePath _ctxSchemeValue;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.ctx_scheme_value</code> table
     */
    public CtxSchemeValuePath ctxSchemeValue() {
        if (_ctxSchemeValue == null)
            _ctxSchemeValue = new CtxSchemeValuePath(this, null, Keys.CTX_SCHEME_VALUE_OWNER_CTX_SCHEME_ID_FK.getInverseKey());

        return _ctxSchemeValue;
    }

    @Override
    public CtxScheme as(String alias) {
        return new CtxScheme(DSL.name(alias), this);
    }

    @Override
    public CtxScheme as(Name alias) {
        return new CtxScheme(alias, this);
    }

    @Override
    public CtxScheme as(Table<?> alias) {
        return new CtxScheme(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CtxScheme rename(String name) {
        return new CtxScheme(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CtxScheme rename(Name name) {
        return new CtxScheme(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CtxScheme rename(Table<?> name) {
        return new CtxScheme(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CtxScheme where(Condition condition) {
        return new CtxScheme(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CtxScheme where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CtxScheme where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CtxScheme where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CtxScheme where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CtxScheme where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CtxScheme where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CtxScheme where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CtxScheme whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CtxScheme whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
