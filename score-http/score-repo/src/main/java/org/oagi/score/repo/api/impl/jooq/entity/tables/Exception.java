/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Indexes;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AppUser.AppUserPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.ExceptionRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Exception extends TableImpl<ExceptionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.exception</code>
     */
    public static final Exception EXCEPTION = new Exception();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExceptionRecord> getRecordType() {
        return ExceptionRecord.class;
    }

    /**
     * The column <code>oagi.exception.exception_id</code>. Internal, primary
     * database key.
     */
    public final TableField<ExceptionRecord, ULong> EXCEPTION_ID = createField(DSL.name("exception_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Internal, primary database key.");

    /**
     * The column <code>oagi.exception.tag</code>. A tag of the exception for
     * the purpose of the searching facilitation
     */
    public final TableField<ExceptionRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR(50).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "A tag of the exception for the purpose of the searching facilitation");

    /**
     * The column <code>oagi.exception.message</code>. The exception message.
     */
    public final TableField<ExceptionRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "The exception message.");

    /**
     * The column <code>oagi.exception.stacktrace</code>. The serialized
     * stacktrace object.
     */
    public final TableField<ExceptionRecord, byte[]> STACKTRACE = createField(DSL.name("stacktrace"), SQLDataType.BLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BLOB)), this, "The serialized stacktrace object.");

    /**
     * The column <code>oagi.exception.created_by</code>. Foreign key to the
     * APP_USER table. It indicates the user who is working on when the
     * exception occurs.
     */
    public final TableField<ExceptionRecord, ULong> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "Foreign key to the APP_USER table. It indicates the user who is working on when the exception occurs.");

    /**
     * The column <code>oagi.exception.creation_timestamp</code>. Timestamp when
     * the exception was created.
     */
    public final TableField<ExceptionRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Timestamp when the exception was created.");

    private Exception(Name alias, Table<ExceptionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Exception(Name alias, Table<ExceptionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.exception</code> table reference
     */
    public Exception(String alias) {
        this(DSL.name(alias), EXCEPTION);
    }

    /**
     * Create an aliased <code>oagi.exception</code> table reference
     */
    public Exception(Name alias) {
        this(alias, EXCEPTION);
    }

    /**
     * Create a <code>oagi.exception</code> table reference
     */
    public Exception() {
        this(DSL.name("exception"), null);
    }

    public <O extends Record> Exception(Table<O> path, ForeignKey<O, ExceptionRecord> childPath, InverseForeignKey<O, ExceptionRecord> parentPath) {
        super(path, childPath, parentPath, EXCEPTION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ExceptionPath extends Exception implements Path<ExceptionRecord> {
        public <O extends Record> ExceptionPath(Table<O> path, ForeignKey<O, ExceptionRecord> childPath, InverseForeignKey<O, ExceptionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ExceptionPath(Name alias, Table<ExceptionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ExceptionPath as(String alias) {
            return new ExceptionPath(DSL.name(alias), this);
        }

        @Override
        public ExceptionPath as(Name alias) {
            return new ExceptionPath(alias, this);
        }

        @Override
        public ExceptionPath as(Table<?> alias) {
            return new ExceptionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.EXCEPTION_EXCEPTION_TAG_IDX);
    }

    @Override
    public Identity<ExceptionRecord, ULong> getIdentity() {
        return (Identity<ExceptionRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExceptionRecord> getPrimaryKey() {
        return Keys.KEY_EXCEPTION_PRIMARY;
    }

    @Override
    public List<ForeignKey<ExceptionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EXCEPTION_CREATED_BY_FK);
    }

    private transient AppUserPath _appUser;

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table.
     */
    public AppUserPath appUser() {
        if (_appUser == null)
            _appUser = new AppUserPath(this, Keys.EXCEPTION_CREATED_BY_FK, null);

        return _appUser;
    }

    @Override
    public Exception as(String alias) {
        return new Exception(DSL.name(alias), this);
    }

    @Override
    public Exception as(Name alias) {
        return new Exception(alias, this);
    }

    @Override
    public Exception as(Table<?> alias) {
        return new Exception(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Exception rename(String name) {
        return new Exception(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Exception rename(Name name) {
        return new Exception(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Exception rename(Table<?> name) {
        return new Exception(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exception where(Condition condition) {
        return new Exception(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exception where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exception where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exception where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Exception where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Exception where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Exception where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Exception where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exception whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exception whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
