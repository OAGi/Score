/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables.records;


import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Namespace;


/**
 * This table stores information about a namespace. Namespace is the namespace
 * as in the XML schema specification.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NamespaceRecord extends UpdatableRecordImpl<NamespaceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>oagi.namespace.namespace_id</code>. Primary, internal
     * database key.
     */
    public void setNamespaceId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>oagi.namespace.namespace_id</code>. Primary, internal
     * database key.
     */
    public ULong getNamespaceId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>oagi.namespace.uri</code>. This is the URI of the
     * namespace.
     */
    public void setUri(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>oagi.namespace.uri</code>. This is the URI of the
     * namespace.
     */
    public String getUri() {
        return (String) get(1);
    }

    /**
     * Setter for <code>oagi.namespace.prefix</code>. This is a default short
     * name to represent the URI. It may be overridden during the expression
     * generation. Null or empty means the same thing like the default prefix in
     * an XML schema.
     */
    public void setPrefix(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>oagi.namespace.prefix</code>. This is a default short
     * name to represent the URI. It may be overridden during the expression
     * generation. Null or empty means the same thing like the default prefix in
     * an XML schema.
     */
    public String getPrefix() {
        return (String) get(2);
    }

    /**
     * Setter for <code>oagi.namespace.description</code>. Description or
     * explanation about the namespace or use of the namespace.
     */
    public void setDescription(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>oagi.namespace.description</code>. Description or
     * explanation about the namespace or use of the namespace.
     */
    public String getDescription() {
        return (String) get(3);
    }

    /**
     * Setter for <code>oagi.namespace.is_std_nmsp</code>. This indicates
     * whether the namespace is reserved for standard used (i.e., whether it is
     * an OAGIS namespace). If it is true, then end users cannot user the
     * namespace for the end user CCs.
     */
    public void setIsStdNmsp(Byte value) {
        set(4, value);
    }

    /**
     * Getter for <code>oagi.namespace.is_std_nmsp</code>. This indicates
     * whether the namespace is reserved for standard used (i.e., whether it is
     * an OAGIS namespace). If it is true, then end users cannot user the
     * namespace for the end user CCs.
     */
    public Byte getIsStdNmsp() {
        return (Byte) get(4);
    }

    /**
     * Setter for <code>oagi.namespace.owner_user_id</code>. Foreign key to the
     * APP_USER table identifying the user who can update or delete the record.
     */
    public void setOwnerUserId(ULong value) {
        set(5, value);
    }

    /**
     * Getter for <code>oagi.namespace.owner_user_id</code>. Foreign key to the
     * APP_USER table identifying the user who can update or delete the record.
     */
    public ULong getOwnerUserId() {
        return (ULong) get(5);
    }

    /**
     * Setter for <code>oagi.namespace.created_by</code>. Foreign key to the
     * APP_USER table identifying user who created the namespace.
     */
    public void setCreatedBy(ULong value) {
        set(6, value);
    }

    /**
     * Getter for <code>oagi.namespace.created_by</code>. Foreign key to the
     * APP_USER table identifying user who created the namespace.
     */
    public ULong getCreatedBy() {
        return (ULong) get(6);
    }

    /**
     * Setter for <code>oagi.namespace.last_updated_by</code>. Foreign key to
     * the APP_USER table identifying the user who last updated the record.
     */
    public void setLastUpdatedBy(ULong value) {
        set(7, value);
    }

    /**
     * Getter for <code>oagi.namespace.last_updated_by</code>. Foreign key to
     * the APP_USER table identifying the user who last updated the record.
     */
    public ULong getLastUpdatedBy() {
        return (ULong) get(7);
    }

    /**
     * Setter for <code>oagi.namespace.creation_timestamp</code>. The timestamp
     * when the record was first created.
     */
    public void setCreationTimestamp(LocalDateTime value) {
        set(8, value);
    }

    /**
     * Getter for <code>oagi.namespace.creation_timestamp</code>. The timestamp
     * when the record was first created.
     */
    public LocalDateTime getCreationTimestamp() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>oagi.namespace.last_update_timestamp</code>. The
     * timestamp when the record was last updated.
     */
    public void setLastUpdateTimestamp(LocalDateTime value) {
        set(9, value);
    }

    /**
     * Getter for <code>oagi.namespace.last_update_timestamp</code>. The
     * timestamp when the record was last updated.
     */
    public LocalDateTime getLastUpdateTimestamp() {
        return (LocalDateTime) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NamespaceRecord
     */
    public NamespaceRecord() {
        super(Namespace.NAMESPACE);
    }

    /**
     * Create a detached, initialised NamespaceRecord
     */
    public NamespaceRecord(ULong namespaceId, String uri, String prefix, String description, Byte isStdNmsp, ULong ownerUserId, ULong createdBy, ULong lastUpdatedBy, LocalDateTime creationTimestamp, LocalDateTime lastUpdateTimestamp) {
        super(Namespace.NAMESPACE);

        setNamespaceId(namespaceId);
        setUri(uri);
        setPrefix(prefix);
        setDescription(description);
        setIsStdNmsp(isStdNmsp);
        setOwnerUserId(ownerUserId);
        setCreatedBy(createdBy);
        setLastUpdatedBy(lastUpdatedBy);
        setCreationTimestamp(creationTimestamp);
        setLastUpdateTimestamp(lastUpdateTimestamp);
        resetChangedOnNotNull();
    }
}
