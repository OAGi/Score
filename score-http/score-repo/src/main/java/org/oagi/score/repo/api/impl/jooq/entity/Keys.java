/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Abie;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Acc;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AccManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AgencyIdList;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AgencyIdListManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AgencyIdListValue;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AgencyIdListValueManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AppOauth2User;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AppUser;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Asbie;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Asbiep;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Ascc;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AsccManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Asccp;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AsccpManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Bbie;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BbieSc;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Bbiep;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Bcc;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BccManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Bccp;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BccpManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BdtPriRestri;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BdtScPriRestri;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BieUsageRule;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BieUserExtRevision;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BizCtx;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BizCtxAssignment;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BizCtxValue;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BlobContent;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BlobContentManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CdtAwdPri;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CdtAwdPriXpsTypeMap;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CdtPri;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CdtScAwdPri;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CdtScAwdPriXpsTypeMap;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CodeList;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CodeListManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CodeListValue;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CodeListValueManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Comment;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CtxCategory;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CtxScheme;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CtxSchemeValue;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Dt;
import org.oagi.score.repo.api.impl.jooq.entity.tables.DtManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.DtSc;
import org.oagi.score.repo.api.impl.jooq.entity.tables.DtScManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.DtUsageRule;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Exception;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Log;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Message;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Module;
import org.oagi.score.repo.api.impl.jooq.entity.tables.ModuleAccManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.ModuleAgencyIdListManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.ModuleAsccpManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.ModuleBccpManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.ModuleBlobContentManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.ModuleCodeListManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.ModuleDtManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.ModuleSet;
import org.oagi.score.repo.api.impl.jooq.entity.tables.ModuleSetRelease;
import org.oagi.score.repo.api.impl.jooq.entity.tables.ModuleXbtManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Namespace;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Oauth2App;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Oauth2AppScope;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Release;
import org.oagi.score.repo.api.impl.jooq.entity.tables.SeqKey;
import org.oagi.score.repo.api.impl.jooq.entity.tables.TopLevelAsbiep;
import org.oagi.score.repo.api.impl.jooq.entity.tables.UsageRule;
import org.oagi.score.repo.api.impl.jooq.entity.tables.UsageRuleExpression;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Xbt;
import org.oagi.score.repo.api.impl.jooq.entity.tables.XbtManifest;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.AbieRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.AccManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.AccRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.AgencyIdListManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.AgencyIdListRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.AgencyIdListValueManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.AgencyIdListValueRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.AppOauth2UserRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.AppUserRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.AsbieRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.AsbiepRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.AsccManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.AsccRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.AsccpManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.AsccpRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BbieRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BbieScRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BbiepRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BccManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BccRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BccpManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BccpRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BdtPriRestriRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BdtScPriRestriRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BieUsageRuleRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BieUserExtRevisionRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BizCtxAssignmentRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BizCtxRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BizCtxValueRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BlobContentManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BlobContentRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.CdtAwdPriRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.CdtAwdPriXpsTypeMapRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.CdtPriRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.CdtScAwdPriRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.CdtScAwdPriXpsTypeMapRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.CodeListManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.CodeListRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.CodeListValueManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.CodeListValueRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.CommentRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.CtxCategoryRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.CtxSchemeRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.CtxSchemeValueRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.DtManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.DtRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.DtScManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.DtScRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.DtUsageRuleRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.ExceptionRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.LogRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.MessageRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.ModuleAccManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.ModuleAgencyIdListManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.ModuleAsccpManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.ModuleBccpManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.ModuleBlobContentManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.ModuleCodeListManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.ModuleDtManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.ModuleRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.ModuleSetRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.ModuleSetReleaseRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.ModuleXbtManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.NamespaceRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.Oauth2AppRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.Oauth2AppScopeRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.ReleaseRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.SeqKeyRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.TopLevelAsbiepRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.UsageRuleExpressionRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.UsageRuleRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.XbtManifestRecord;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.XbtRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * oagi.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AbieRecord> KEY_ABIE_PRIMARY = Internal.createUniqueKey(Abie.ABIE, DSL.name("KEY_abie_PRIMARY"), new TableField[] { Abie.ABIE.ABIE_ID }, true);
    public static final UniqueKey<AccRecord> KEY_ACC_PRIMARY = Internal.createUniqueKey(Acc.ACC, DSL.name("KEY_acc_PRIMARY"), new TableField[] { Acc.ACC.ACC_ID }, true);
    public static final UniqueKey<AccManifestRecord> KEY_ACC_MANIFEST_PRIMARY = Internal.createUniqueKey(AccManifest.ACC_MANIFEST, DSL.name("KEY_acc_manifest_PRIMARY"), new TableField[] { AccManifest.ACC_MANIFEST.ACC_MANIFEST_ID }, true);
    public static final UniqueKey<AgencyIdListRecord> KEY_AGENCY_ID_LIST_PRIMARY = Internal.createUniqueKey(AgencyIdList.AGENCY_ID_LIST, DSL.name("KEY_agency_id_list_PRIMARY"), new TableField[] { AgencyIdList.AGENCY_ID_LIST.AGENCY_ID_LIST_ID }, true);
    public static final UniqueKey<AgencyIdListManifestRecord> KEY_AGENCY_ID_LIST_MANIFEST_PRIMARY = Internal.createUniqueKey(AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST, DSL.name("KEY_agency_id_list_manifest_PRIMARY"), new TableField[] { AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST.AGENCY_ID_LIST_MANIFEST_ID }, true);
    public static final UniqueKey<AgencyIdListValueRecord> KEY_AGENCY_ID_LIST_VALUE_PRIMARY = Internal.createUniqueKey(AgencyIdListValue.AGENCY_ID_LIST_VALUE, DSL.name("KEY_agency_id_list_value_PRIMARY"), new TableField[] { AgencyIdListValue.AGENCY_ID_LIST_VALUE.AGENCY_ID_LIST_VALUE_ID }, true);
    public static final UniqueKey<AgencyIdListValueManifestRecord> KEY_AGENCY_ID_LIST_VALUE_MANIFEST_PRIMARY = Internal.createUniqueKey(AgencyIdListValueManifest.AGENCY_ID_LIST_VALUE_MANIFEST, DSL.name("KEY_agency_id_list_value_manifest_PRIMARY"), new TableField[] { AgencyIdListValueManifest.AGENCY_ID_LIST_VALUE_MANIFEST.AGENCY_ID_LIST_VALUE_MANIFEST_ID }, true);
    public static final UniqueKey<AppOauth2UserRecord> KEY_APP_OAUTH2_USER_APP_OAUTH2_USER_UK1 = Internal.createUniqueKey(AppOauth2User.APP_OAUTH2_USER, DSL.name("KEY_app_oauth2_user_app_oauth2_user_uk1"), new TableField[] { AppOauth2User.APP_OAUTH2_USER.OAUTH2_APP_ID, AppOauth2User.APP_OAUTH2_USER.SUB }, true);
    public static final UniqueKey<AppOauth2UserRecord> KEY_APP_OAUTH2_USER_PRIMARY = Internal.createUniqueKey(AppOauth2User.APP_OAUTH2_USER, DSL.name("KEY_app_oauth2_user_PRIMARY"), new TableField[] { AppOauth2User.APP_OAUTH2_USER.APP_OAUTH2_USER_ID }, true);
    public static final UniqueKey<AppUserRecord> KEY_APP_USER_APP_USER_UK1 = Internal.createUniqueKey(AppUser.APP_USER, DSL.name("KEY_app_user_app_user_uk1"), new TableField[] { AppUser.APP_USER.LOGIN_ID }, true);
    public static final UniqueKey<AppUserRecord> KEY_APP_USER_PRIMARY = Internal.createUniqueKey(AppUser.APP_USER, DSL.name("KEY_app_user_PRIMARY"), new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final UniqueKey<AsbieRecord> KEY_ASBIE_PRIMARY = Internal.createUniqueKey(Asbie.ASBIE, DSL.name("KEY_asbie_PRIMARY"), new TableField[] { Asbie.ASBIE.ASBIE_ID }, true);
    public static final UniqueKey<AsbiepRecord> KEY_ASBIEP_PRIMARY = Internal.createUniqueKey(Asbiep.ASBIEP, DSL.name("KEY_asbiep_PRIMARY"), new TableField[] { Asbiep.ASBIEP.ASBIEP_ID }, true);
    public static final UniqueKey<AsccRecord> KEY_ASCC_PRIMARY = Internal.createUniqueKey(Ascc.ASCC, DSL.name("KEY_ascc_PRIMARY"), new TableField[] { Ascc.ASCC.ASCC_ID }, true);
    public static final UniqueKey<AsccManifestRecord> KEY_ASCC_MANIFEST_PRIMARY = Internal.createUniqueKey(AsccManifest.ASCC_MANIFEST, DSL.name("KEY_ascc_manifest_PRIMARY"), new TableField[] { AsccManifest.ASCC_MANIFEST.ASCC_MANIFEST_ID }, true);
    public static final UniqueKey<AsccpRecord> KEY_ASCCP_PRIMARY = Internal.createUniqueKey(Asccp.ASCCP, DSL.name("KEY_asccp_PRIMARY"), new TableField[] { Asccp.ASCCP.ASCCP_ID }, true);
    public static final UniqueKey<AsccpManifestRecord> KEY_ASCCP_MANIFEST_PRIMARY = Internal.createUniqueKey(AsccpManifest.ASCCP_MANIFEST, DSL.name("KEY_asccp_manifest_PRIMARY"), new TableField[] { AsccpManifest.ASCCP_MANIFEST.ASCCP_MANIFEST_ID }, true);
    public static final UniqueKey<BbieRecord> KEY_BBIE_PRIMARY = Internal.createUniqueKey(Bbie.BBIE, DSL.name("KEY_bbie_PRIMARY"), new TableField[] { Bbie.BBIE.BBIE_ID }, true);
    public static final UniqueKey<BbieScRecord> KEY_BBIE_SC_PRIMARY = Internal.createUniqueKey(BbieSc.BBIE_SC, DSL.name("KEY_bbie_sc_PRIMARY"), new TableField[] { BbieSc.BBIE_SC.BBIE_SC_ID }, true);
    public static final UniqueKey<BbiepRecord> KEY_BBIEP_PRIMARY = Internal.createUniqueKey(Bbiep.BBIEP, DSL.name("KEY_bbiep_PRIMARY"), new TableField[] { Bbiep.BBIEP.BBIEP_ID }, true);
    public static final UniqueKey<BccRecord> KEY_BCC_PRIMARY = Internal.createUniqueKey(Bcc.BCC, DSL.name("KEY_bcc_PRIMARY"), new TableField[] { Bcc.BCC.BCC_ID }, true);
    public static final UniqueKey<BccManifestRecord> KEY_BCC_MANIFEST_PRIMARY = Internal.createUniqueKey(BccManifest.BCC_MANIFEST, DSL.name("KEY_bcc_manifest_PRIMARY"), new TableField[] { BccManifest.BCC_MANIFEST.BCC_MANIFEST_ID }, true);
    public static final UniqueKey<BccpRecord> KEY_BCCP_PRIMARY = Internal.createUniqueKey(Bccp.BCCP, DSL.name("KEY_bccp_PRIMARY"), new TableField[] { Bccp.BCCP.BCCP_ID }, true);
    public static final UniqueKey<BccpManifestRecord> KEY_BCCP_MANIFEST_PRIMARY = Internal.createUniqueKey(BccpManifest.BCCP_MANIFEST, DSL.name("KEY_bccp_manifest_PRIMARY"), new TableField[] { BccpManifest.BCCP_MANIFEST.BCCP_MANIFEST_ID }, true);
    public static final UniqueKey<BdtPriRestriRecord> KEY_BDT_PRI_RESTRI_PRIMARY = Internal.createUniqueKey(BdtPriRestri.BDT_PRI_RESTRI, DSL.name("KEY_bdt_pri_restri_PRIMARY"), new TableField[] { BdtPriRestri.BDT_PRI_RESTRI.BDT_PRI_RESTRI_ID }, true);
    public static final UniqueKey<BdtScPriRestriRecord> KEY_BDT_SC_PRI_RESTRI_PRIMARY = Internal.createUniqueKey(BdtScPriRestri.BDT_SC_PRI_RESTRI, DSL.name("KEY_bdt_sc_pri_restri_PRIMARY"), new TableField[] { BdtScPriRestri.BDT_SC_PRI_RESTRI.BDT_SC_PRI_RESTRI_ID }, true);
    public static final UniqueKey<BieUsageRuleRecord> KEY_BIE_USAGE_RULE_PRIMARY = Internal.createUniqueKey(BieUsageRule.BIE_USAGE_RULE, DSL.name("KEY_bie_usage_rule_PRIMARY"), new TableField[] { BieUsageRule.BIE_USAGE_RULE.BIE_USAGE_RULE_ID }, true);
    public static final UniqueKey<BieUserExtRevisionRecord> KEY_BIE_USER_EXT_REVISION_PRIMARY = Internal.createUniqueKey(BieUserExtRevision.BIE_USER_EXT_REVISION, DSL.name("KEY_bie_user_ext_revision_PRIMARY"), new TableField[] { BieUserExtRevision.BIE_USER_EXT_REVISION.BIE_USER_EXT_REVISION_ID }, true);
    public static final UniqueKey<BizCtxRecord> KEY_BIZ_CTX_BIZ_CTX_UK1 = Internal.createUniqueKey(BizCtx.BIZ_CTX, DSL.name("KEY_biz_ctx_biz_ctx_uk1"), new TableField[] { BizCtx.BIZ_CTX.GUID }, true);
    public static final UniqueKey<BizCtxRecord> KEY_BIZ_CTX_PRIMARY = Internal.createUniqueKey(BizCtx.BIZ_CTX, DSL.name("KEY_biz_ctx_PRIMARY"), new TableField[] { BizCtx.BIZ_CTX.BIZ_CTX_ID }, true);
    public static final UniqueKey<BizCtxAssignmentRecord> KEY_BIZ_CTX_ASSIGNMENT_BIZ_CTX_ASSIGNMENT_UK = Internal.createUniqueKey(BizCtxAssignment.BIZ_CTX_ASSIGNMENT, DSL.name("KEY_biz_ctx_assignment_biz_ctx_assignment_uk"), new TableField[] { BizCtxAssignment.BIZ_CTX_ASSIGNMENT.BIZ_CTX_ID, BizCtxAssignment.BIZ_CTX_ASSIGNMENT.TOP_LEVEL_ASBIEP_ID }, true);
    public static final UniqueKey<BizCtxAssignmentRecord> KEY_BIZ_CTX_ASSIGNMENT_PRIMARY = Internal.createUniqueKey(BizCtxAssignment.BIZ_CTX_ASSIGNMENT, DSL.name("KEY_biz_ctx_assignment_PRIMARY"), new TableField[] { BizCtxAssignment.BIZ_CTX_ASSIGNMENT.BIZ_CTX_ASSIGNMENT_ID }, true);
    public static final UniqueKey<BizCtxValueRecord> KEY_BIZ_CTX_VALUE_PRIMARY = Internal.createUniqueKey(BizCtxValue.BIZ_CTX_VALUE, DSL.name("KEY_biz_ctx_value_PRIMARY"), new TableField[] { BizCtxValue.BIZ_CTX_VALUE.BIZ_CTX_VALUE_ID }, true);
    public static final UniqueKey<BlobContentRecord> KEY_BLOB_CONTENT_PRIMARY = Internal.createUniqueKey(BlobContent.BLOB_CONTENT, DSL.name("KEY_blob_content_PRIMARY"), new TableField[] { BlobContent.BLOB_CONTENT.BLOB_CONTENT_ID }, true);
    public static final UniqueKey<BlobContentManifestRecord> KEY_BLOB_CONTENT_MANIFEST_PRIMARY = Internal.createUniqueKey(BlobContentManifest.BLOB_CONTENT_MANIFEST, DSL.name("KEY_blob_content_manifest_PRIMARY"), new TableField[] { BlobContentManifest.BLOB_CONTENT_MANIFEST.BLOB_CONTENT_MANIFEST_ID }, true);
    public static final UniqueKey<CdtAwdPriRecord> KEY_CDT_AWD_PRI_PRIMARY = Internal.createUniqueKey(CdtAwdPri.CDT_AWD_PRI, DSL.name("KEY_cdt_awd_pri_PRIMARY"), new TableField[] { CdtAwdPri.CDT_AWD_PRI.CDT_AWD_PRI_ID }, true);
    public static final UniqueKey<CdtAwdPriXpsTypeMapRecord> KEY_CDT_AWD_PRI_XPS_TYPE_MAP_PRIMARY = Internal.createUniqueKey(CdtAwdPriXpsTypeMap.CDT_AWD_PRI_XPS_TYPE_MAP, DSL.name("KEY_cdt_awd_pri_xps_type_map_PRIMARY"), new TableField[] { CdtAwdPriXpsTypeMap.CDT_AWD_PRI_XPS_TYPE_MAP.CDT_AWD_PRI_XPS_TYPE_MAP_ID }, true);
    public static final UniqueKey<CdtPriRecord> KEY_CDT_PRI_CDT_PRI_UK1 = Internal.createUniqueKey(CdtPri.CDT_PRI, DSL.name("KEY_cdt_pri_cdt_pri_uk1"), new TableField[] { CdtPri.CDT_PRI.NAME }, true);
    public static final UniqueKey<CdtPriRecord> KEY_CDT_PRI_PRIMARY = Internal.createUniqueKey(CdtPri.CDT_PRI, DSL.name("KEY_cdt_pri_PRIMARY"), new TableField[] { CdtPri.CDT_PRI.CDT_PRI_ID }, true);
    public static final UniqueKey<CdtScAwdPriRecord> KEY_CDT_SC_AWD_PRI_PRIMARY = Internal.createUniqueKey(CdtScAwdPri.CDT_SC_AWD_PRI, DSL.name("KEY_cdt_sc_awd_pri_PRIMARY"), new TableField[] { CdtScAwdPri.CDT_SC_AWD_PRI.CDT_SC_AWD_PRI_ID }, true);
    public static final UniqueKey<CdtScAwdPriXpsTypeMapRecord> KEY_CDT_SC_AWD_PRI_XPS_TYPE_MAP_PRIMARY = Internal.createUniqueKey(CdtScAwdPriXpsTypeMap.CDT_SC_AWD_PRI_XPS_TYPE_MAP, DSL.name("KEY_cdt_sc_awd_pri_xps_type_map_PRIMARY"), new TableField[] { CdtScAwdPriXpsTypeMap.CDT_SC_AWD_PRI_XPS_TYPE_MAP.CDT_SC_AWD_PRI_XPS_TYPE_MAP_ID }, true);
    public static final UniqueKey<CodeListRecord> KEY_CODE_LIST_PRIMARY = Internal.createUniqueKey(CodeList.CODE_LIST, DSL.name("KEY_code_list_PRIMARY"), new TableField[] { CodeList.CODE_LIST.CODE_LIST_ID }, true);
    public static final UniqueKey<CodeListManifestRecord> KEY_CODE_LIST_MANIFEST_PRIMARY = Internal.createUniqueKey(CodeListManifest.CODE_LIST_MANIFEST, DSL.name("KEY_code_list_manifest_PRIMARY"), new TableField[] { CodeListManifest.CODE_LIST_MANIFEST.CODE_LIST_MANIFEST_ID }, true);
    public static final UniqueKey<CodeListValueRecord> KEY_CODE_LIST_VALUE_PRIMARY = Internal.createUniqueKey(CodeListValue.CODE_LIST_VALUE, DSL.name("KEY_code_list_value_PRIMARY"), new TableField[] { CodeListValue.CODE_LIST_VALUE.CODE_LIST_VALUE_ID }, true);
    public static final UniqueKey<CodeListValueManifestRecord> KEY_CODE_LIST_VALUE_MANIFEST_PRIMARY = Internal.createUniqueKey(CodeListValueManifest.CODE_LIST_VALUE_MANIFEST, DSL.name("KEY_code_list_value_manifest_PRIMARY"), new TableField[] { CodeListValueManifest.CODE_LIST_VALUE_MANIFEST.CODE_LIST_VALUE_MANIFEST_ID }, true);
    public static final UniqueKey<CommentRecord> KEY_COMMENT_PRIMARY = Internal.createUniqueKey(Comment.COMMENT, DSL.name("KEY_comment_PRIMARY"), new TableField[] { Comment.COMMENT.COMMENT_ID }, true);
    public static final UniqueKey<CtxCategoryRecord> KEY_CTX_CATEGORY_CTX_CATEGORY_UK1 = Internal.createUniqueKey(CtxCategory.CTX_CATEGORY, DSL.name("KEY_ctx_category_ctx_category_uk1"), new TableField[] { CtxCategory.CTX_CATEGORY.GUID }, true);
    public static final UniqueKey<CtxCategoryRecord> KEY_CTX_CATEGORY_PRIMARY = Internal.createUniqueKey(CtxCategory.CTX_CATEGORY, DSL.name("KEY_ctx_category_PRIMARY"), new TableField[] { CtxCategory.CTX_CATEGORY.CTX_CATEGORY_ID }, true);
    public static final UniqueKey<CtxSchemeRecord> KEY_CTX_SCHEME_CTX_SCHEME_UK1 = Internal.createUniqueKey(CtxScheme.CTX_SCHEME, DSL.name("KEY_ctx_scheme_ctx_scheme_uk1"), new TableField[] { CtxScheme.CTX_SCHEME.GUID }, true);
    public static final UniqueKey<CtxSchemeRecord> KEY_CTX_SCHEME_PRIMARY = Internal.createUniqueKey(CtxScheme.CTX_SCHEME, DSL.name("KEY_ctx_scheme_PRIMARY"), new TableField[] { CtxScheme.CTX_SCHEME.CTX_SCHEME_ID }, true);
    public static final UniqueKey<CtxSchemeValueRecord> KEY_CTX_SCHEME_VALUE_CTX_SCHEME_VALUE_UK1 = Internal.createUniqueKey(CtxSchemeValue.CTX_SCHEME_VALUE, DSL.name("KEY_ctx_scheme_value_ctx_scheme_value_uk1"), new TableField[] { CtxSchemeValue.CTX_SCHEME_VALUE.GUID }, true);
    public static final UniqueKey<CtxSchemeValueRecord> KEY_CTX_SCHEME_VALUE_PRIMARY = Internal.createUniqueKey(CtxSchemeValue.CTX_SCHEME_VALUE, DSL.name("KEY_ctx_scheme_value_PRIMARY"), new TableField[] { CtxSchemeValue.CTX_SCHEME_VALUE.CTX_SCHEME_VALUE_ID }, true);
    public static final UniqueKey<DtRecord> KEY_DT_PRIMARY = Internal.createUniqueKey(Dt.DT, DSL.name("KEY_dt_PRIMARY"), new TableField[] { Dt.DT.DT_ID }, true);
    public static final UniqueKey<DtManifestRecord> KEY_DT_MANIFEST_PRIMARY = Internal.createUniqueKey(DtManifest.DT_MANIFEST, DSL.name("KEY_dt_manifest_PRIMARY"), new TableField[] { DtManifest.DT_MANIFEST.DT_MANIFEST_ID }, true);
    public static final UniqueKey<DtScRecord> KEY_DT_SC_PRIMARY = Internal.createUniqueKey(DtSc.DT_SC, DSL.name("KEY_dt_sc_PRIMARY"), new TableField[] { DtSc.DT_SC.DT_SC_ID }, true);
    public static final UniqueKey<DtScManifestRecord> KEY_DT_SC_MANIFEST_PRIMARY = Internal.createUniqueKey(DtScManifest.DT_SC_MANIFEST, DSL.name("KEY_dt_sc_manifest_PRIMARY"), new TableField[] { DtScManifest.DT_SC_MANIFEST.DT_SC_MANIFEST_ID }, true);
    public static final UniqueKey<DtUsageRuleRecord> KEY_DT_USAGE_RULE_PRIMARY = Internal.createUniqueKey(DtUsageRule.DT_USAGE_RULE, DSL.name("KEY_dt_usage_rule_PRIMARY"), new TableField[] { DtUsageRule.DT_USAGE_RULE.DT_USAGE_RULE_ID }, true);
    public static final UniqueKey<ExceptionRecord> KEY_EXCEPTION_PRIMARY = Internal.createUniqueKey(Exception.EXCEPTION, DSL.name("KEY_exception_PRIMARY"), new TableField[] { Exception.EXCEPTION.EXCEPTION_ID }, true);
    public static final UniqueKey<LogRecord> KEY_LOG_PRIMARY = Internal.createUniqueKey(Log.LOG, DSL.name("KEY_log_PRIMARY"), new TableField[] { Log.LOG.LOG_ID }, true);
    public static final UniqueKey<MessageRecord> KEY_MESSAGE_PRIMARY = Internal.createUniqueKey(Message.MESSAGE, DSL.name("KEY_message_PRIMARY"), new TableField[] { Message.MESSAGE.MESSAGE_ID }, true);
    public static final UniqueKey<ModuleRecord> KEY_MODULE_PRIMARY = Internal.createUniqueKey(Module.MODULE, DSL.name("KEY_module_PRIMARY"), new TableField[] { Module.MODULE.MODULE_ID }, true);
    public static final UniqueKey<ModuleAccManifestRecord> KEY_MODULE_ACC_MANIFEST_PRIMARY = Internal.createUniqueKey(ModuleAccManifest.MODULE_ACC_MANIFEST, DSL.name("KEY_module_acc_manifest_PRIMARY"), new TableField[] { ModuleAccManifest.MODULE_ACC_MANIFEST.MODULE_ACC_MANIFEST_ID }, true);
    public static final UniqueKey<ModuleAgencyIdListManifestRecord> KEY_MODULE_AGENCY_ID_LIST_MANIFEST_PRIMARY = Internal.createUniqueKey(ModuleAgencyIdListManifest.MODULE_AGENCY_ID_LIST_MANIFEST, DSL.name("KEY_module_agency_id_list_manifest_PRIMARY"), new TableField[] { ModuleAgencyIdListManifest.MODULE_AGENCY_ID_LIST_MANIFEST.MODULE_AGENCY_ID_LIST_MANIFEST_ID }, true);
    public static final UniqueKey<ModuleAsccpManifestRecord> KEY_MODULE_ASCCP_MANIFEST_PRIMARY = Internal.createUniqueKey(ModuleAsccpManifest.MODULE_ASCCP_MANIFEST, DSL.name("KEY_module_asccp_manifest_PRIMARY"), new TableField[] { ModuleAsccpManifest.MODULE_ASCCP_MANIFEST.MODULE_ASCCP_MANIFEST_ID }, true);
    public static final UniqueKey<ModuleBccpManifestRecord> KEY_MODULE_BCCP_MANIFEST_PRIMARY = Internal.createUniqueKey(ModuleBccpManifest.MODULE_BCCP_MANIFEST, DSL.name("KEY_module_bccp_manifest_PRIMARY"), new TableField[] { ModuleBccpManifest.MODULE_BCCP_MANIFEST.MODULE_BCCP_MANIFEST_ID }, true);
    public static final UniqueKey<ModuleBlobContentManifestRecord> KEY_MODULE_BLOB_CONTENT_MANIFEST_PRIMARY = Internal.createUniqueKey(ModuleBlobContentManifest.MODULE_BLOB_CONTENT_MANIFEST, DSL.name("KEY_module_blob_content_manifest_PRIMARY"), new TableField[] { ModuleBlobContentManifest.MODULE_BLOB_CONTENT_MANIFEST.MODULE_BLOB_CONTENT_MANIFEST_ID }, true);
    public static final UniqueKey<ModuleCodeListManifestRecord> KEY_MODULE_CODE_LIST_MANIFEST_PRIMARY = Internal.createUniqueKey(ModuleCodeListManifest.MODULE_CODE_LIST_MANIFEST, DSL.name("KEY_module_code_list_manifest_PRIMARY"), new TableField[] { ModuleCodeListManifest.MODULE_CODE_LIST_MANIFEST.MODULE_CODE_LIST_MANIFEST_ID }, true);
    public static final UniqueKey<ModuleDtManifestRecord> KEY_MODULE_DT_MANIFEST_PRIMARY = Internal.createUniqueKey(ModuleDtManifest.MODULE_DT_MANIFEST, DSL.name("KEY_module_dt_manifest_PRIMARY"), new TableField[] { ModuleDtManifest.MODULE_DT_MANIFEST.MODULE_DT_MANIFEST_ID }, true);
    public static final UniqueKey<ModuleSetRecord> KEY_MODULE_SET_PRIMARY = Internal.createUniqueKey(ModuleSet.MODULE_SET, DSL.name("KEY_module_set_PRIMARY"), new TableField[] { ModuleSet.MODULE_SET.MODULE_SET_ID }, true);
    public static final UniqueKey<ModuleSetReleaseRecord> KEY_MODULE_SET_RELEASE_PRIMARY = Internal.createUniqueKey(ModuleSetRelease.MODULE_SET_RELEASE, DSL.name("KEY_module_set_release_PRIMARY"), new TableField[] { ModuleSetRelease.MODULE_SET_RELEASE.MODULE_SET_RELEASE_ID }, true);
    public static final UniqueKey<ModuleXbtManifestRecord> KEY_MODULE_XBT_MANIFEST_PRIMARY = Internal.createUniqueKey(ModuleXbtManifest.MODULE_XBT_MANIFEST, DSL.name("KEY_module_xbt_manifest_PRIMARY"), new TableField[] { ModuleXbtManifest.MODULE_XBT_MANIFEST.MODULE_XBT_MANIFEST_ID }, true);
    public static final UniqueKey<NamespaceRecord> KEY_NAMESPACE_NAMESPACE_UK1 = Internal.createUniqueKey(Namespace.NAMESPACE, DSL.name("KEY_namespace_namespace_uk1"), new TableField[] { Namespace.NAMESPACE.URI }, true);
    public static final UniqueKey<NamespaceRecord> KEY_NAMESPACE_PRIMARY = Internal.createUniqueKey(Namespace.NAMESPACE, DSL.name("KEY_namespace_PRIMARY"), new TableField[] { Namespace.NAMESPACE.NAMESPACE_ID }, true);
    public static final UniqueKey<Oauth2AppRecord> KEY_OAUTH2_APP_PRIMARY = Internal.createUniqueKey(Oauth2App.OAUTH2_APP, DSL.name("KEY_oauth2_app_PRIMARY"), new TableField[] { Oauth2App.OAUTH2_APP.OAUTH2_APP_ID }, true);
    public static final UniqueKey<Oauth2AppScopeRecord> KEY_OAUTH2_APP_SCOPE_PRIMARY = Internal.createUniqueKey(Oauth2AppScope.OAUTH2_APP_SCOPE, DSL.name("KEY_oauth2_app_scope_PRIMARY"), new TableField[] { Oauth2AppScope.OAUTH2_APP_SCOPE.OAUTH2_APP_SCOPE_ID }, true);
    public static final UniqueKey<ReleaseRecord> KEY_RELEASE_PRIMARY = Internal.createUniqueKey(Release.RELEASE, DSL.name("KEY_release_PRIMARY"), new TableField[] { Release.RELEASE.RELEASE_ID }, true);
    public static final UniqueKey<SeqKeyRecord> KEY_SEQ_KEY_PRIMARY = Internal.createUniqueKey(SeqKey.SEQ_KEY, DSL.name("KEY_seq_key_PRIMARY"), new TableField[] { SeqKey.SEQ_KEY.SEQ_KEY_ID }, true);
    public static final UniqueKey<TopLevelAsbiepRecord> KEY_TOP_LEVEL_ASBIEP_PRIMARY = Internal.createUniqueKey(TopLevelAsbiep.TOP_LEVEL_ASBIEP, DSL.name("KEY_top_level_asbiep_PRIMARY"), new TableField[] { TopLevelAsbiep.TOP_LEVEL_ASBIEP.TOP_LEVEL_ASBIEP_ID }, true);
    public static final UniqueKey<UsageRuleRecord> KEY_USAGE_RULE_PRIMARY = Internal.createUniqueKey(UsageRule.USAGE_RULE, DSL.name("KEY_usage_rule_PRIMARY"), new TableField[] { UsageRule.USAGE_RULE.USAGE_RULE_ID }, true);
    public static final UniqueKey<UsageRuleExpressionRecord> KEY_USAGE_RULE_EXPRESSION_PRIMARY = Internal.createUniqueKey(UsageRuleExpression.USAGE_RULE_EXPRESSION, DSL.name("KEY_usage_rule_expression_PRIMARY"), new TableField[] { UsageRuleExpression.USAGE_RULE_EXPRESSION.USAGE_RULE_EXPRESSION_ID }, true);
    public static final UniqueKey<XbtRecord> KEY_XBT_PRIMARY = Internal.createUniqueKey(Xbt.XBT, DSL.name("KEY_xbt_PRIMARY"), new TableField[] { Xbt.XBT.XBT_ID }, true);
    public static final UniqueKey<XbtManifestRecord> KEY_XBT_MANIFEST_PRIMARY = Internal.createUniqueKey(XbtManifest.XBT_MANIFEST, DSL.name("KEY_xbt_manifest_PRIMARY"), new TableField[] { XbtManifest.XBT_MANIFEST.XBT_MANIFEST_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AbieRecord, AccManifestRecord> ABIE_BASED_ACC_MANIFEST_ID_FK = Internal.createForeignKey(Abie.ABIE, DSL.name("abie_based_acc_manifest_id_fk"), new TableField[] { Abie.ABIE.BASED_ACC_MANIFEST_ID }, Keys.KEY_ACC_MANIFEST_PRIMARY, new TableField[] { AccManifest.ACC_MANIFEST.ACC_MANIFEST_ID }, true);
    public static final ForeignKey<AbieRecord, BizCtxRecord> ABIE_BIZ_CTX_ID_FK = Internal.createForeignKey(Abie.ABIE, DSL.name("abie_biz_ctx_id_fk"), new TableField[] { Abie.ABIE.BIZ_CTX_ID }, Keys.KEY_BIZ_CTX_PRIMARY, new TableField[] { BizCtx.BIZ_CTX.BIZ_CTX_ID }, true);
    public static final ForeignKey<AbieRecord, AppUserRecord> ABIE_CREATED_BY_FK = Internal.createForeignKey(Abie.ABIE, DSL.name("abie_created_by_fk"), new TableField[] { Abie.ABIE.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AbieRecord, AppUserRecord> ABIE_LAST_UPDATED_BY_FK = Internal.createForeignKey(Abie.ABIE, DSL.name("abie_last_updated_by_fk"), new TableField[] { Abie.ABIE.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AbieRecord, TopLevelAsbiepRecord> ABIE_OWNER_TOP_LEVEL_ASBIEP_ID_FK = Internal.createForeignKey(Abie.ABIE, DSL.name("abie_owner_top_level_asbiep_id_fk"), new TableField[] { Abie.ABIE.OWNER_TOP_LEVEL_ASBIEP_ID }, Keys.KEY_TOP_LEVEL_ASBIEP_PRIMARY, new TableField[] { TopLevelAsbiep.TOP_LEVEL_ASBIEP.TOP_LEVEL_ASBIEP_ID }, true);
    public static final ForeignKey<AccRecord, AccRecord> ACC_BASED_ACC_ID_FK = Internal.createForeignKey(Acc.ACC, DSL.name("acc_based_acc_id_fk"), new TableField[] { Acc.ACC.BASED_ACC_ID }, Keys.KEY_ACC_PRIMARY, new TableField[] { Acc.ACC.ACC_ID }, true);
    public static final ForeignKey<AccRecord, AppUserRecord> ACC_CREATED_BY_FK = Internal.createForeignKey(Acc.ACC, DSL.name("acc_created_by_fk"), new TableField[] { Acc.ACC.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AccRecord, AppUserRecord> ACC_LAST_UPDATED_BY_FK = Internal.createForeignKey(Acc.ACC, DSL.name("acc_last_updated_by_fk"), new TableField[] { Acc.ACC.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AccRecord, NamespaceRecord> ACC_NAMESPACE_ID_FK = Internal.createForeignKey(Acc.ACC, DSL.name("acc_namespace_id_fk"), new TableField[] { Acc.ACC.NAMESPACE_ID }, Keys.KEY_NAMESPACE_PRIMARY, new TableField[] { Namespace.NAMESPACE.NAMESPACE_ID }, true);
    public static final ForeignKey<AccRecord, AccRecord> ACC_NEXT_ACC_ID_FK = Internal.createForeignKey(Acc.ACC, DSL.name("acc_next_acc_id_fk"), new TableField[] { Acc.ACC.NEXT_ACC_ID }, Keys.KEY_ACC_PRIMARY, new TableField[] { Acc.ACC.ACC_ID }, true);
    public static final ForeignKey<AccRecord, AppUserRecord> ACC_OWNER_USER_ID_FK = Internal.createForeignKey(Acc.ACC, DSL.name("acc_owner_user_id_fk"), new TableField[] { Acc.ACC.OWNER_USER_ID }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AccRecord, AccRecord> ACC_PREV_ACC_ID_FK = Internal.createForeignKey(Acc.ACC, DSL.name("acc_prev_acc_id_fk"), new TableField[] { Acc.ACC.PREV_ACC_ID }, Keys.KEY_ACC_PRIMARY, new TableField[] { Acc.ACC.ACC_ID }, true);
    public static final ForeignKey<AccRecord, AccRecord> ACC_REPLACEMENT_ACC_ID_FK = Internal.createForeignKey(Acc.ACC, DSL.name("acc_replacement_acc_id_fk"), new TableField[] { Acc.ACC.REPLACEMENT_ACC_ID }, Keys.KEY_ACC_PRIMARY, new TableField[] { Acc.ACC.ACC_ID }, true);
    public static final ForeignKey<AccManifestRecord, AccRecord> ACC_MANIFEST_ACC_ID_FK = Internal.createForeignKey(AccManifest.ACC_MANIFEST, DSL.name("acc_manifest_acc_id_fk"), new TableField[] { AccManifest.ACC_MANIFEST.ACC_ID }, Keys.KEY_ACC_PRIMARY, new TableField[] { Acc.ACC.ACC_ID }, true);
    public static final ForeignKey<AccManifestRecord, AccManifestRecord> ACC_MANIFEST_BASED_ACC_MANIFEST_ID_FK = Internal.createForeignKey(AccManifest.ACC_MANIFEST, DSL.name("acc_manifest_based_acc_manifest_id_fk"), new TableField[] { AccManifest.ACC_MANIFEST.BASED_ACC_MANIFEST_ID }, Keys.KEY_ACC_MANIFEST_PRIMARY, new TableField[] { AccManifest.ACC_MANIFEST.ACC_MANIFEST_ID }, true);
    public static final ForeignKey<AccManifestRecord, LogRecord> ACC_MANIFEST_LOG_ID_FK = Internal.createForeignKey(AccManifest.ACC_MANIFEST, DSL.name("acc_manifest_log_id_fk"), new TableField[] { AccManifest.ACC_MANIFEST.LOG_ID }, Keys.KEY_LOG_PRIMARY, new TableField[] { Log.LOG.LOG_ID }, true);
    public static final ForeignKey<AccManifestRecord, AccManifestRecord> ACC_MANIFEST_NEXT_ACC_MANIFEST_ID_FK = Internal.createForeignKey(AccManifest.ACC_MANIFEST, DSL.name("acc_manifest_next_acc_manifest_id_fk"), new TableField[] { AccManifest.ACC_MANIFEST.NEXT_ACC_MANIFEST_ID }, Keys.KEY_ACC_MANIFEST_PRIMARY, new TableField[] { AccManifest.ACC_MANIFEST.ACC_MANIFEST_ID }, true);
    public static final ForeignKey<AccManifestRecord, AccManifestRecord> ACC_MANIFEST_PREV_ACC_MANIFEST_ID_FK = Internal.createForeignKey(AccManifest.ACC_MANIFEST, DSL.name("acc_manifest_prev_acc_manifest_id_fk"), new TableField[] { AccManifest.ACC_MANIFEST.PREV_ACC_MANIFEST_ID }, Keys.KEY_ACC_MANIFEST_PRIMARY, new TableField[] { AccManifest.ACC_MANIFEST.ACC_MANIFEST_ID }, true);
    public static final ForeignKey<AccManifestRecord, ReleaseRecord> ACC_MANIFEST_RELEASE_ID_FK = Internal.createForeignKey(AccManifest.ACC_MANIFEST, DSL.name("acc_manifest_release_id_fk"), new TableField[] { AccManifest.ACC_MANIFEST.RELEASE_ID }, Keys.KEY_RELEASE_PRIMARY, new TableField[] { Release.RELEASE.RELEASE_ID }, true);
    public static final ForeignKey<AccManifestRecord, AccManifestRecord> ACC_REPLACEMENT_ACC_MANIFEST_ID_FK = Internal.createForeignKey(AccManifest.ACC_MANIFEST, DSL.name("acc_replacement_acc_manifest_id_fk"), new TableField[] { AccManifest.ACC_MANIFEST.REPLACEMENT_ACC_MANIFEST_ID }, Keys.KEY_ACC_MANIFEST_PRIMARY, new TableField[] { AccManifest.ACC_MANIFEST.ACC_MANIFEST_ID }, true);
    public static final ForeignKey<AgencyIdListRecord, AgencyIdListValueRecord> AGENCY_ID_LIST_AGENCY_ID_LIST_VALUE_ID_FK = Internal.createForeignKey(AgencyIdList.AGENCY_ID_LIST, DSL.name("agency_id_list_agency_id_list_value_id_fk"), new TableField[] { AgencyIdList.AGENCY_ID_LIST.AGENCY_ID_LIST_VALUE_ID }, Keys.KEY_AGENCY_ID_LIST_VALUE_PRIMARY, new TableField[] { AgencyIdListValue.AGENCY_ID_LIST_VALUE.AGENCY_ID_LIST_VALUE_ID }, true);
    public static final ForeignKey<AgencyIdListRecord, AgencyIdListRecord> AGENCY_ID_LIST_BASED_AGENCY_ID_LIST_ID_FK = Internal.createForeignKey(AgencyIdList.AGENCY_ID_LIST, DSL.name("agency_id_list_based_agency_id_list_id_fk"), new TableField[] { AgencyIdList.AGENCY_ID_LIST.BASED_AGENCY_ID_LIST_ID }, Keys.KEY_AGENCY_ID_LIST_PRIMARY, new TableField[] { AgencyIdList.AGENCY_ID_LIST.AGENCY_ID_LIST_ID }, true);
    public static final ForeignKey<AgencyIdListRecord, AppUserRecord> AGENCY_ID_LIST_CREATED_BY_FK = Internal.createForeignKey(AgencyIdList.AGENCY_ID_LIST, DSL.name("agency_id_list_created_by_fk"), new TableField[] { AgencyIdList.AGENCY_ID_LIST.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AgencyIdListRecord, AppUserRecord> AGENCY_ID_LIST_LAST_UPDATED_BY_FK = Internal.createForeignKey(AgencyIdList.AGENCY_ID_LIST, DSL.name("agency_id_list_last_updated_by_fk"), new TableField[] { AgencyIdList.AGENCY_ID_LIST.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AgencyIdListRecord, NamespaceRecord> AGENCY_ID_LIST_NAMESPACE_ID_FK = Internal.createForeignKey(AgencyIdList.AGENCY_ID_LIST, DSL.name("agency_id_list_namespace_id_fk"), new TableField[] { AgencyIdList.AGENCY_ID_LIST.NAMESPACE_ID }, Keys.KEY_NAMESPACE_PRIMARY, new TableField[] { Namespace.NAMESPACE.NAMESPACE_ID }, true);
    public static final ForeignKey<AgencyIdListRecord, AgencyIdListRecord> AGENCY_ID_LIST_NEXT_AGENCY_ID_LIST_ID_FK = Internal.createForeignKey(AgencyIdList.AGENCY_ID_LIST, DSL.name("agency_id_list_next_agency_id_list_id_fk"), new TableField[] { AgencyIdList.AGENCY_ID_LIST.NEXT_AGENCY_ID_LIST_ID }, Keys.KEY_AGENCY_ID_LIST_PRIMARY, new TableField[] { AgencyIdList.AGENCY_ID_LIST.AGENCY_ID_LIST_ID }, true);
    public static final ForeignKey<AgencyIdListRecord, AppUserRecord> AGENCY_ID_LIST_OWNER_USER_ID_FK = Internal.createForeignKey(AgencyIdList.AGENCY_ID_LIST, DSL.name("agency_id_list_owner_user_id_fk"), new TableField[] { AgencyIdList.AGENCY_ID_LIST.OWNER_USER_ID }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AgencyIdListRecord, AgencyIdListRecord> AGENCY_ID_LIST_PREV_AGENCY_ID_LIST_ID_FK = Internal.createForeignKey(AgencyIdList.AGENCY_ID_LIST, DSL.name("agency_id_list_prev_agency_id_list_id_fk"), new TableField[] { AgencyIdList.AGENCY_ID_LIST.PREV_AGENCY_ID_LIST_ID }, Keys.KEY_AGENCY_ID_LIST_PRIMARY, new TableField[] { AgencyIdList.AGENCY_ID_LIST.AGENCY_ID_LIST_ID }, true);
    public static final ForeignKey<AgencyIdListRecord, AgencyIdListRecord> AGENCY_ID_LIST_REPLACEMENT_AGENCY_ID_LIST_ID_FK = Internal.createForeignKey(AgencyIdList.AGENCY_ID_LIST, DSL.name("agency_id_list_replacement_agency_id_list_id_fk"), new TableField[] { AgencyIdList.AGENCY_ID_LIST.REPLACEMENT_AGENCY_ID_LIST_ID }, Keys.KEY_AGENCY_ID_LIST_PRIMARY, new TableField[] { AgencyIdList.AGENCY_ID_LIST.AGENCY_ID_LIST_ID }, true);
    public static final ForeignKey<AgencyIdListManifestRecord, AgencyIdListRecord> AGENCY_ID_LIST_MANIFEST_AGENCY_ID_LIST_ID_FK = Internal.createForeignKey(AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST, DSL.name("agency_id_list_manifest_agency_id_list_id_fk"), new TableField[] { AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST.AGENCY_ID_LIST_ID }, Keys.KEY_AGENCY_ID_LIST_PRIMARY, new TableField[] { AgencyIdList.AGENCY_ID_LIST.AGENCY_ID_LIST_ID }, true);
    public static final ForeignKey<AgencyIdListManifestRecord, AgencyIdListManifestRecord> AGENCY_ID_LIST_MANIFEST_BASED_AGENCY_ID_LIST_MANIFEST_ID_FK = Internal.createForeignKey(AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST, DSL.name("agency_id_list_manifest_based_agency_id_list_manifest_id_fk"), new TableField[] { AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST.BASED_AGENCY_ID_LIST_MANIFEST_ID }, Keys.KEY_AGENCY_ID_LIST_MANIFEST_PRIMARY, new TableField[] { AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST.AGENCY_ID_LIST_MANIFEST_ID }, true);
    public static final ForeignKey<AgencyIdListManifestRecord, LogRecord> AGENCY_ID_LIST_MANIFEST_LOG_ID_FK = Internal.createForeignKey(AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST, DSL.name("agency_id_list_manifest_log_id_fk"), new TableField[] { AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST.LOG_ID }, Keys.KEY_LOG_PRIMARY, new TableField[] { Log.LOG.LOG_ID }, true);
    public static final ForeignKey<AgencyIdListManifestRecord, AgencyIdListManifestRecord> AGENCY_ID_LIST_MANIFEST_NEXT_AGENCY_ID_LIST_MANIFEST_ID_FK = Internal.createForeignKey(AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST, DSL.name("agency_id_list_manifest_next_agency_id_list_manifest_id_fk"), new TableField[] { AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST.NEXT_AGENCY_ID_LIST_MANIFEST_ID }, Keys.KEY_AGENCY_ID_LIST_MANIFEST_PRIMARY, new TableField[] { AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST.AGENCY_ID_LIST_MANIFEST_ID }, true);
    public static final ForeignKey<AgencyIdListManifestRecord, AgencyIdListManifestRecord> AGENCY_ID_LIST_MANIFEST_PREV_AGENCY_ID_LIST_MANIFEST_ID_FK = Internal.createForeignKey(AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST, DSL.name("agency_id_list_manifest_prev_agency_id_list_manifest_id_fk"), new TableField[] { AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST.PREV_AGENCY_ID_LIST_MANIFEST_ID }, Keys.KEY_AGENCY_ID_LIST_MANIFEST_PRIMARY, new TableField[] { AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST.AGENCY_ID_LIST_MANIFEST_ID }, true);
    public static final ForeignKey<AgencyIdListManifestRecord, ReleaseRecord> AGENCY_ID_LIST_MANIFEST_RELEASE_ID_FK = Internal.createForeignKey(AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST, DSL.name("agency_id_list_manifest_release_id_fk"), new TableField[] { AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST.RELEASE_ID }, Keys.KEY_RELEASE_PRIMARY, new TableField[] { Release.RELEASE.RELEASE_ID }, true);
    public static final ForeignKey<AgencyIdListManifestRecord, AgencyIdListManifestRecord> AGENCY_ID_LIST_REPLACEMENT_AGENCY_ID_LIST_MANIFEST_ID_FK = Internal.createForeignKey(AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST, DSL.name("agency_id_list_replacement_agency_id_list_manifest_id_fk"), new TableField[] { AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST.REPLACEMENT_AGENCY_ID_LIST_MANIFEST_ID }, Keys.KEY_AGENCY_ID_LIST_MANIFEST_PRIMARY, new TableField[] { AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST.AGENCY_ID_LIST_MANIFEST_ID }, true);
    public static final ForeignKey<AgencyIdListManifestRecord, AgencyIdListValueManifestRecord> AGENCY_ID_LIST_VALUE_MANIFEST_ID_FK = Internal.createForeignKey(AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST, DSL.name("agency_id_list_value_manifest_id_fk"), new TableField[] { AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST.AGENCY_ID_LIST_VALUE_MANIFEST_ID }, Keys.KEY_AGENCY_ID_LIST_VALUE_MANIFEST_PRIMARY, new TableField[] { AgencyIdListValueManifest.AGENCY_ID_LIST_VALUE_MANIFEST.AGENCY_ID_LIST_VALUE_MANIFEST_ID }, true);
    public static final ForeignKey<AgencyIdListValueRecord, AppUserRecord> AGENCY_ID_LIST_VALUE_CREATED_BY_FK = Internal.createForeignKey(AgencyIdListValue.AGENCY_ID_LIST_VALUE, DSL.name("agency_id_list_value_created_by_fk"), new TableField[] { AgencyIdListValue.AGENCY_ID_LIST_VALUE.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AgencyIdListValueRecord, AppUserRecord> AGENCY_ID_LIST_VALUE_LAST_UPDATED_BY_FK = Internal.createForeignKey(AgencyIdListValue.AGENCY_ID_LIST_VALUE, DSL.name("agency_id_list_value_last_updated_by_fk"), new TableField[] { AgencyIdListValue.AGENCY_ID_LIST_VALUE.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AgencyIdListValueRecord, AgencyIdListValueRecord> AGENCY_ID_LIST_VALUE_NEXT_AGENCY_ID_LIST_VALUE_ID_FK = Internal.createForeignKey(AgencyIdListValue.AGENCY_ID_LIST_VALUE, DSL.name("agency_id_list_value_next_agency_id_list_value_id_fk"), new TableField[] { AgencyIdListValue.AGENCY_ID_LIST_VALUE.NEXT_AGENCY_ID_LIST_VALUE_ID }, Keys.KEY_AGENCY_ID_LIST_VALUE_PRIMARY, new TableField[] { AgencyIdListValue.AGENCY_ID_LIST_VALUE.AGENCY_ID_LIST_VALUE_ID }, true);
    public static final ForeignKey<AgencyIdListValueRecord, AgencyIdListRecord> AGENCY_ID_LIST_VALUE_OWNER_LIST_ID_FK = Internal.createForeignKey(AgencyIdListValue.AGENCY_ID_LIST_VALUE, DSL.name("agency_id_list_value_owner_list_id_fk"), new TableField[] { AgencyIdListValue.AGENCY_ID_LIST_VALUE.OWNER_LIST_ID }, Keys.KEY_AGENCY_ID_LIST_PRIMARY, new TableField[] { AgencyIdList.AGENCY_ID_LIST.AGENCY_ID_LIST_ID }, true);
    public static final ForeignKey<AgencyIdListValueRecord, AppUserRecord> AGENCY_ID_LIST_VALUE_OWNER_USER_ID_FK = Internal.createForeignKey(AgencyIdListValue.AGENCY_ID_LIST_VALUE, DSL.name("agency_id_list_value_owner_user_id_fk"), new TableField[] { AgencyIdListValue.AGENCY_ID_LIST_VALUE.OWNER_USER_ID }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AgencyIdListValueRecord, AgencyIdListValueRecord> AGENCY_ID_LIST_VALUE_PREV_AGENCY_ID_LIST_VALUE_ID_FK = Internal.createForeignKey(AgencyIdListValue.AGENCY_ID_LIST_VALUE, DSL.name("agency_id_list_value_prev_agency_id_list_value_id_fk"), new TableField[] { AgencyIdListValue.AGENCY_ID_LIST_VALUE.PREV_AGENCY_ID_LIST_VALUE_ID }, Keys.KEY_AGENCY_ID_LIST_VALUE_PRIMARY, new TableField[] { AgencyIdListValue.AGENCY_ID_LIST_VALUE.AGENCY_ID_LIST_VALUE_ID }, true);
    public static final ForeignKey<AgencyIdListValueRecord, AgencyIdListValueRecord> AGENCY_ID_LIST_VALUE_REPLACEMENT_AGENCY_ID_LIST_VALUE_ID_FK = Internal.createForeignKey(AgencyIdListValue.AGENCY_ID_LIST_VALUE, DSL.name("agency_id_list_value_replacement_agency_id_list_value_id_fk"), new TableField[] { AgencyIdListValue.AGENCY_ID_LIST_VALUE.REPLACEMENT_AGENCY_ID_LIST_VALUE_ID }, Keys.KEY_AGENCY_ID_LIST_VALUE_PRIMARY, new TableField[] { AgencyIdListValue.AGENCY_ID_LIST_VALUE.AGENCY_ID_LIST_VALUE_ID }, true);
    public static final ForeignKey<AgencyIdListValueManifestRecord, AgencyIdListManifestRecord> AGENCY_ID_LIST_VALUE_MANIFEST_AGENCY_ID_LIST_MANIFEST_ID_FK = Internal.createForeignKey(AgencyIdListValueManifest.AGENCY_ID_LIST_VALUE_MANIFEST, DSL.name("agency_id_list_value_manifest_agency_id_list_manifest_id_fk"), new TableField[] { AgencyIdListValueManifest.AGENCY_ID_LIST_VALUE_MANIFEST.AGENCY_ID_LIST_MANIFEST_ID }, Keys.KEY_AGENCY_ID_LIST_MANIFEST_PRIMARY, new TableField[] { AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST.AGENCY_ID_LIST_MANIFEST_ID }, true);
    public static final ForeignKey<AgencyIdListValueManifestRecord, AgencyIdListValueRecord> AGENCY_ID_LIST_VALUE_MANIFEST_AGENCY_ID_LIST_VALUE_ID_FK = Internal.createForeignKey(AgencyIdListValueManifest.AGENCY_ID_LIST_VALUE_MANIFEST, DSL.name("agency_id_list_value_manifest_agency_id_list_value_id_fk"), new TableField[] { AgencyIdListValueManifest.AGENCY_ID_LIST_VALUE_MANIFEST.AGENCY_ID_LIST_VALUE_ID }, Keys.KEY_AGENCY_ID_LIST_VALUE_PRIMARY, new TableField[] { AgencyIdListValue.AGENCY_ID_LIST_VALUE.AGENCY_ID_LIST_VALUE_ID }, true);
    public static final ForeignKey<AgencyIdListValueManifestRecord, AgencyIdListValueManifestRecord> AGENCY_ID_LIST_VALUE_MANIFEST_NEXT_AGENCY_ID_LIST_VALUE_MANIF_FK = Internal.createForeignKey(AgencyIdListValueManifest.AGENCY_ID_LIST_VALUE_MANIFEST, DSL.name("agency_id_list_value_manifest_next_agency_id_list_value_manif_fk"), new TableField[] { AgencyIdListValueManifest.AGENCY_ID_LIST_VALUE_MANIFEST.NEXT_AGENCY_ID_LIST_VALUE_MANIFEST_ID }, Keys.KEY_AGENCY_ID_LIST_VALUE_MANIFEST_PRIMARY, new TableField[] { AgencyIdListValueManifest.AGENCY_ID_LIST_VALUE_MANIFEST.AGENCY_ID_LIST_VALUE_MANIFEST_ID }, true);
    public static final ForeignKey<AgencyIdListValueManifestRecord, AgencyIdListValueManifestRecord> AGENCY_ID_LIST_VALUE_MANIFEST_PREV_AGENCY_ID_LIST_VALUE_MANIF_FK = Internal.createForeignKey(AgencyIdListValueManifest.AGENCY_ID_LIST_VALUE_MANIFEST, DSL.name("agency_id_list_value_manifest_prev_agency_id_list_value_manif_fk"), new TableField[] { AgencyIdListValueManifest.AGENCY_ID_LIST_VALUE_MANIFEST.PREV_AGENCY_ID_LIST_VALUE_MANIFEST_ID }, Keys.KEY_AGENCY_ID_LIST_VALUE_MANIFEST_PRIMARY, new TableField[] { AgencyIdListValueManifest.AGENCY_ID_LIST_VALUE_MANIFEST.AGENCY_ID_LIST_VALUE_MANIFEST_ID }, true);
    public static final ForeignKey<AgencyIdListValueManifestRecord, ReleaseRecord> AGENCY_ID_LIST_VALUE_MANIFEST_RELEASE_ID_FK = Internal.createForeignKey(AgencyIdListValueManifest.AGENCY_ID_LIST_VALUE_MANIFEST, DSL.name("agency_id_list_value_manifest_release_id_fk"), new TableField[] { AgencyIdListValueManifest.AGENCY_ID_LIST_VALUE_MANIFEST.RELEASE_ID }, Keys.KEY_RELEASE_PRIMARY, new TableField[] { Release.RELEASE.RELEASE_ID }, true);
    public static final ForeignKey<AgencyIdListValueManifestRecord, AgencyIdListValueManifestRecord> AGENCY_ID_LIST_VALUE_REPLACEMENT_AGENCY_ID_LIST_MANIF_FK = Internal.createForeignKey(AgencyIdListValueManifest.AGENCY_ID_LIST_VALUE_MANIFEST, DSL.name("agency_id_list_value_replacement_agency_id_list_manif_fk"), new TableField[] { AgencyIdListValueManifest.AGENCY_ID_LIST_VALUE_MANIFEST.REPLACEMENT_AGENCY_ID_LIST_VALUE_MANIFEST_ID }, Keys.KEY_AGENCY_ID_LIST_VALUE_MANIFEST_PRIMARY, new TableField[] { AgencyIdListValueManifest.AGENCY_ID_LIST_VALUE_MANIFEST.AGENCY_ID_LIST_VALUE_MANIFEST_ID }, true);
    public static final ForeignKey<AppOauth2UserRecord, AppUserRecord> APP_OAUTH2_USER_APP_USER_ID_FK = Internal.createForeignKey(AppOauth2User.APP_OAUTH2_USER, DSL.name("app_oauth2_user_app_user_id_fk"), new TableField[] { AppOauth2User.APP_OAUTH2_USER.APP_USER_ID }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AppOauth2UserRecord, Oauth2AppRecord> APP_OAUTH2_USER_OAUTH2_APP_ID_FK = Internal.createForeignKey(AppOauth2User.APP_OAUTH2_USER, DSL.name("app_oauth2_user_oauth2_app_id_fk"), new TableField[] { AppOauth2User.APP_OAUTH2_USER.OAUTH2_APP_ID }, Keys.KEY_OAUTH2_APP_PRIMARY, new TableField[] { Oauth2App.OAUTH2_APP.OAUTH2_APP_ID }, true);
    public static final ForeignKey<AsbieRecord, AsccManifestRecord> ASBIE_BASED_ASCC_MANIFEST_ID_FK = Internal.createForeignKey(Asbie.ASBIE, DSL.name("asbie_based_ascc_manifest_id_fk"), new TableField[] { Asbie.ASBIE.BASED_ASCC_MANIFEST_ID }, Keys.KEY_ASCC_MANIFEST_PRIMARY, new TableField[] { AsccManifest.ASCC_MANIFEST.ASCC_MANIFEST_ID }, true);
    public static final ForeignKey<AsbieRecord, AppUserRecord> ASBIE_CREATED_BY_FK = Internal.createForeignKey(Asbie.ASBIE, DSL.name("asbie_created_by_fk"), new TableField[] { Asbie.ASBIE.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AsbieRecord, AbieRecord> ASBIE_FROM_ABIE_ID_FK = Internal.createForeignKey(Asbie.ASBIE, DSL.name("asbie_from_abie_id_fk"), new TableField[] { Asbie.ASBIE.FROM_ABIE_ID }, Keys.KEY_ABIE_PRIMARY, new TableField[] { Abie.ABIE.ABIE_ID }, true);
    public static final ForeignKey<AsbieRecord, AppUserRecord> ASBIE_LAST_UPDATED_BY_FK = Internal.createForeignKey(Asbie.ASBIE, DSL.name("asbie_last_updated_by_fk"), new TableField[] { Asbie.ASBIE.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AsbieRecord, TopLevelAsbiepRecord> ASBIE_OWNER_TOP_LEVEL_ASBIEP_ID_FK = Internal.createForeignKey(Asbie.ASBIE, DSL.name("asbie_owner_top_level_asbiep_id_fk"), new TableField[] { Asbie.ASBIE.OWNER_TOP_LEVEL_ASBIEP_ID }, Keys.KEY_TOP_LEVEL_ASBIEP_PRIMARY, new TableField[] { TopLevelAsbiep.TOP_LEVEL_ASBIEP.TOP_LEVEL_ASBIEP_ID }, true);
    public static final ForeignKey<AsbieRecord, AsbiepRecord> ASBIE_TO_ASBIEP_ID_FK = Internal.createForeignKey(Asbie.ASBIE, DSL.name("asbie_to_asbiep_id_fk"), new TableField[] { Asbie.ASBIE.TO_ASBIEP_ID }, Keys.KEY_ASBIEP_PRIMARY, new TableField[] { Asbiep.ASBIEP.ASBIEP_ID }, true);
    public static final ForeignKey<AsbiepRecord, AsccpManifestRecord> ASBIEP_BASED_ASCCP_MANIFEST_ID_FK = Internal.createForeignKey(Asbiep.ASBIEP, DSL.name("asbiep_based_asccp_manifest_id_fk"), new TableField[] { Asbiep.ASBIEP.BASED_ASCCP_MANIFEST_ID }, Keys.KEY_ASCCP_MANIFEST_PRIMARY, new TableField[] { AsccpManifest.ASCCP_MANIFEST.ASCCP_MANIFEST_ID }, true);
    public static final ForeignKey<AsbiepRecord, AppUserRecord> ASBIEP_CREATED_BY_FK = Internal.createForeignKey(Asbiep.ASBIEP, DSL.name("asbiep_created_by_fk"), new TableField[] { Asbiep.ASBIEP.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AsbiepRecord, AppUserRecord> ASBIEP_LAST_UPDATED_BY_FK = Internal.createForeignKey(Asbiep.ASBIEP, DSL.name("asbiep_last_updated_by_fk"), new TableField[] { Asbiep.ASBIEP.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AsbiepRecord, TopLevelAsbiepRecord> ASBIEP_OWNER_TOP_LEVEL_ASBIEP_ID_FK = Internal.createForeignKey(Asbiep.ASBIEP, DSL.name("asbiep_owner_top_level_asbiep_id_fk"), new TableField[] { Asbiep.ASBIEP.OWNER_TOP_LEVEL_ASBIEP_ID }, Keys.KEY_TOP_LEVEL_ASBIEP_PRIMARY, new TableField[] { TopLevelAsbiep.TOP_LEVEL_ASBIEP.TOP_LEVEL_ASBIEP_ID }, true);
    public static final ForeignKey<AsbiepRecord, AbieRecord> ASBIEP_ROLE_OF_ABIE_ID_FK = Internal.createForeignKey(Asbiep.ASBIEP, DSL.name("asbiep_role_of_abie_id_fk"), new TableField[] { Asbiep.ASBIEP.ROLE_OF_ABIE_ID }, Keys.KEY_ABIE_PRIMARY, new TableField[] { Abie.ABIE.ABIE_ID }, true);
    public static final ForeignKey<AsccRecord, AppUserRecord> ASCC_CREATED_BY_FK = Internal.createForeignKey(Ascc.ASCC, DSL.name("ascc_created_by_fk"), new TableField[] { Ascc.ASCC.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AsccRecord, AccRecord> ASCC_FROM_ACC_ID_FK = Internal.createForeignKey(Ascc.ASCC, DSL.name("ascc_from_acc_id_fk"), new TableField[] { Ascc.ASCC.FROM_ACC_ID }, Keys.KEY_ACC_PRIMARY, new TableField[] { Acc.ACC.ACC_ID }, true);
    public static final ForeignKey<AsccRecord, AppUserRecord> ASCC_LAST_UPDATED_BY_FK = Internal.createForeignKey(Ascc.ASCC, DSL.name("ascc_last_updated_by_fk"), new TableField[] { Ascc.ASCC.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AsccRecord, AsccRecord> ASCC_NEXT_ASCC_ID_FK = Internal.createForeignKey(Ascc.ASCC, DSL.name("ascc_next_ascc_id_fk"), new TableField[] { Ascc.ASCC.NEXT_ASCC_ID }, Keys.KEY_ASCC_PRIMARY, new TableField[] { Ascc.ASCC.ASCC_ID }, true);
    public static final ForeignKey<AsccRecord, AppUserRecord> ASCC_OWNER_USER_ID_FK = Internal.createForeignKey(Ascc.ASCC, DSL.name("ascc_owner_user_id_fk"), new TableField[] { Ascc.ASCC.OWNER_USER_ID }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AsccRecord, AsccRecord> ASCC_PREV_ASCC_ID_FK = Internal.createForeignKey(Ascc.ASCC, DSL.name("ascc_prev_ascc_id_fk"), new TableField[] { Ascc.ASCC.PREV_ASCC_ID }, Keys.KEY_ASCC_PRIMARY, new TableField[] { Ascc.ASCC.ASCC_ID }, true);
    public static final ForeignKey<AsccRecord, AsccRecord> ASCC_REPLACEMENT_ASCC_ID_FK = Internal.createForeignKey(Ascc.ASCC, DSL.name("ascc_replacement_ascc_id_fk"), new TableField[] { Ascc.ASCC.REPLACEMENT_ASCC_ID }, Keys.KEY_ASCC_PRIMARY, new TableField[] { Ascc.ASCC.ASCC_ID }, true);
    public static final ForeignKey<AsccRecord, AsccpRecord> ASCC_TO_ASCCP_ID_FK = Internal.createForeignKey(Ascc.ASCC, DSL.name("ascc_to_asccp_id_fk"), new TableField[] { Ascc.ASCC.TO_ASCCP_ID }, Keys.KEY_ASCCP_PRIMARY, new TableField[] { Asccp.ASCCP.ASCCP_ID }, true);
    public static final ForeignKey<AsccManifestRecord, AsccRecord> ASCC_MANIFEST_ASCC_ID_FK = Internal.createForeignKey(AsccManifest.ASCC_MANIFEST, DSL.name("ascc_manifest_ascc_id_fk"), new TableField[] { AsccManifest.ASCC_MANIFEST.ASCC_ID }, Keys.KEY_ASCC_PRIMARY, new TableField[] { Ascc.ASCC.ASCC_ID }, true);
    public static final ForeignKey<AsccManifestRecord, AccManifestRecord> ASCC_MANIFEST_FROM_ACC_MANIFEST_ID_FK = Internal.createForeignKey(AsccManifest.ASCC_MANIFEST, DSL.name("ascc_manifest_from_acc_manifest_id_fk"), new TableField[] { AsccManifest.ASCC_MANIFEST.FROM_ACC_MANIFEST_ID }, Keys.KEY_ACC_MANIFEST_PRIMARY, new TableField[] { AccManifest.ACC_MANIFEST.ACC_MANIFEST_ID }, true);
    public static final ForeignKey<AsccManifestRecord, AsccManifestRecord> ASCC_MANIFEST_NEXT_ASCC_MANIFEST_ID_FK = Internal.createForeignKey(AsccManifest.ASCC_MANIFEST, DSL.name("ascc_manifest_next_ascc_manifest_id_fk"), new TableField[] { AsccManifest.ASCC_MANIFEST.NEXT_ASCC_MANIFEST_ID }, Keys.KEY_ASCC_MANIFEST_PRIMARY, new TableField[] { AsccManifest.ASCC_MANIFEST.ASCC_MANIFEST_ID }, true);
    public static final ForeignKey<AsccManifestRecord, AsccManifestRecord> ASCC_MANIFEST_PREV_ASCC_MANIFEST_ID_FK = Internal.createForeignKey(AsccManifest.ASCC_MANIFEST, DSL.name("ascc_manifest_prev_ascc_manifest_id_fk"), new TableField[] { AsccManifest.ASCC_MANIFEST.PREV_ASCC_MANIFEST_ID }, Keys.KEY_ASCC_MANIFEST_PRIMARY, new TableField[] { AsccManifest.ASCC_MANIFEST.ASCC_MANIFEST_ID }, true);
    public static final ForeignKey<AsccManifestRecord, ReleaseRecord> ASCC_MANIFEST_RELEASE_ID_FK = Internal.createForeignKey(AsccManifest.ASCC_MANIFEST, DSL.name("ascc_manifest_release_id_fk"), new TableField[] { AsccManifest.ASCC_MANIFEST.RELEASE_ID }, Keys.KEY_RELEASE_PRIMARY, new TableField[] { Release.RELEASE.RELEASE_ID }, true);
    public static final ForeignKey<AsccManifestRecord, SeqKeyRecord> ASCC_MANIFEST_SEQ_KEY_ID_FK = Internal.createForeignKey(AsccManifest.ASCC_MANIFEST, DSL.name("ascc_manifest_seq_key_id_fk"), new TableField[] { AsccManifest.ASCC_MANIFEST.SEQ_KEY_ID }, Keys.KEY_SEQ_KEY_PRIMARY, new TableField[] { SeqKey.SEQ_KEY.SEQ_KEY_ID }, true);
    public static final ForeignKey<AsccManifestRecord, AsccpManifestRecord> ASCC_MANIFEST_TO_ASCCP_MANIFEST_ID_FK = Internal.createForeignKey(AsccManifest.ASCC_MANIFEST, DSL.name("ascc_manifest_to_asccp_manifest_id_fk"), new TableField[] { AsccManifest.ASCC_MANIFEST.TO_ASCCP_MANIFEST_ID }, Keys.KEY_ASCCP_MANIFEST_PRIMARY, new TableField[] { AsccpManifest.ASCCP_MANIFEST.ASCCP_MANIFEST_ID }, true);
    public static final ForeignKey<AsccManifestRecord, AsccManifestRecord> ASCC_REPLACEMENT_ASCC_MANIFEST_ID_FK = Internal.createForeignKey(AsccManifest.ASCC_MANIFEST, DSL.name("ascc_replacement_ascc_manifest_id_fk"), new TableField[] { AsccManifest.ASCC_MANIFEST.REPLACEMENT_ASCC_MANIFEST_ID }, Keys.KEY_ASCC_MANIFEST_PRIMARY, new TableField[] { AsccManifest.ASCC_MANIFEST.ASCC_MANIFEST_ID }, true);
    public static final ForeignKey<AsccpRecord, AppUserRecord> ASCCP_CREATED_BY_FK = Internal.createForeignKey(Asccp.ASCCP, DSL.name("asccp_created_by_fk"), new TableField[] { Asccp.ASCCP.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AsccpRecord, AppUserRecord> ASCCP_LAST_UPDATED_BY_FK = Internal.createForeignKey(Asccp.ASCCP, DSL.name("asccp_last_updated_by_fk"), new TableField[] { Asccp.ASCCP.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AsccpRecord, NamespaceRecord> ASCCP_NAMESPACE_ID_FK = Internal.createForeignKey(Asccp.ASCCP, DSL.name("asccp_namespace_id_fk"), new TableField[] { Asccp.ASCCP.NAMESPACE_ID }, Keys.KEY_NAMESPACE_PRIMARY, new TableField[] { Namespace.NAMESPACE.NAMESPACE_ID }, true);
    public static final ForeignKey<AsccpRecord, AsccpRecord> ASCCP_NEXT_ASCCP_ID_FK = Internal.createForeignKey(Asccp.ASCCP, DSL.name("asccp_next_asccp_id_fk"), new TableField[] { Asccp.ASCCP.NEXT_ASCCP_ID }, Keys.KEY_ASCCP_PRIMARY, new TableField[] { Asccp.ASCCP.ASCCP_ID }, true);
    public static final ForeignKey<AsccpRecord, AppUserRecord> ASCCP_OWNER_USER_ID_FK = Internal.createForeignKey(Asccp.ASCCP, DSL.name("asccp_owner_user_id_fk"), new TableField[] { Asccp.ASCCP.OWNER_USER_ID }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<AsccpRecord, AsccpRecord> ASCCP_PREV_ASCCP_ID_FK = Internal.createForeignKey(Asccp.ASCCP, DSL.name("asccp_prev_asccp_id_fk"), new TableField[] { Asccp.ASCCP.PREV_ASCCP_ID }, Keys.KEY_ASCCP_PRIMARY, new TableField[] { Asccp.ASCCP.ASCCP_ID }, true);
    public static final ForeignKey<AsccpRecord, AsccpRecord> ASCCP_REPLACEMENT_ASCCP_ID_FK = Internal.createForeignKey(Asccp.ASCCP, DSL.name("asccp_replacement_asccp_id_fk"), new TableField[] { Asccp.ASCCP.REPLACEMENT_ASCCP_ID }, Keys.KEY_ASCCP_PRIMARY, new TableField[] { Asccp.ASCCP.ASCCP_ID }, true);
    public static final ForeignKey<AsccpRecord, AccRecord> ASCCP_ROLE_OF_ACC_ID_FK = Internal.createForeignKey(Asccp.ASCCP, DSL.name("asccp_role_of_acc_id_fk"), new TableField[] { Asccp.ASCCP.ROLE_OF_ACC_ID }, Keys.KEY_ACC_PRIMARY, new TableField[] { Acc.ACC.ACC_ID }, true);
    public static final ForeignKey<AsccpManifestRecord, AsccpRecord> ASCCP_MANIFEST_ASCCP_ID_FK = Internal.createForeignKey(AsccpManifest.ASCCP_MANIFEST, DSL.name("asccp_manifest_asccp_id_fk"), new TableField[] { AsccpManifest.ASCCP_MANIFEST.ASCCP_ID }, Keys.KEY_ASCCP_PRIMARY, new TableField[] { Asccp.ASCCP.ASCCP_ID }, true);
    public static final ForeignKey<AsccpManifestRecord, LogRecord> ASCCP_MANIFEST_LOG_ID_FK = Internal.createForeignKey(AsccpManifest.ASCCP_MANIFEST, DSL.name("asccp_manifest_log_id_fk"), new TableField[] { AsccpManifest.ASCCP_MANIFEST.LOG_ID }, Keys.KEY_LOG_PRIMARY, new TableField[] { Log.LOG.LOG_ID }, true);
    public static final ForeignKey<AsccpManifestRecord, AsccpManifestRecord> ASCCP_MANIFEST_NEXT_ASCCP_MANIFEST_ID_FK = Internal.createForeignKey(AsccpManifest.ASCCP_MANIFEST, DSL.name("asccp_manifest_next_asccp_manifest_id_fk"), new TableField[] { AsccpManifest.ASCCP_MANIFEST.NEXT_ASCCP_MANIFEST_ID }, Keys.KEY_ASCCP_MANIFEST_PRIMARY, new TableField[] { AsccpManifest.ASCCP_MANIFEST.ASCCP_MANIFEST_ID }, true);
    public static final ForeignKey<AsccpManifestRecord, AsccpManifestRecord> ASCCP_MANIFEST_PREV_ASCCP_MANIFEST_ID_FK = Internal.createForeignKey(AsccpManifest.ASCCP_MANIFEST, DSL.name("asccp_manifest_prev_asccp_manifest_id_fk"), new TableField[] { AsccpManifest.ASCCP_MANIFEST.PREV_ASCCP_MANIFEST_ID }, Keys.KEY_ASCCP_MANIFEST_PRIMARY, new TableField[] { AsccpManifest.ASCCP_MANIFEST.ASCCP_MANIFEST_ID }, true);
    public static final ForeignKey<AsccpManifestRecord, ReleaseRecord> ASCCP_MANIFEST_RELEASE_ID_FK = Internal.createForeignKey(AsccpManifest.ASCCP_MANIFEST, DSL.name("asccp_manifest_release_id_fk"), new TableField[] { AsccpManifest.ASCCP_MANIFEST.RELEASE_ID }, Keys.KEY_RELEASE_PRIMARY, new TableField[] { Release.RELEASE.RELEASE_ID }, true);
    public static final ForeignKey<AsccpManifestRecord, AccManifestRecord> ASCCP_MANIFEST_ROLE_OF_ACC_MANIFEST_ID_FK = Internal.createForeignKey(AsccpManifest.ASCCP_MANIFEST, DSL.name("asccp_manifest_role_of_acc_manifest_id_fk"), new TableField[] { AsccpManifest.ASCCP_MANIFEST.ROLE_OF_ACC_MANIFEST_ID }, Keys.KEY_ACC_MANIFEST_PRIMARY, new TableField[] { AccManifest.ACC_MANIFEST.ACC_MANIFEST_ID }, true);
    public static final ForeignKey<AsccpManifestRecord, AsccpManifestRecord> ASCCP_REPLACEMENT_ASCCP_MANIFEST_ID_FK = Internal.createForeignKey(AsccpManifest.ASCCP_MANIFEST, DSL.name("asccp_replacement_asccp_manifest_id_fk"), new TableField[] { AsccpManifest.ASCCP_MANIFEST.REPLACEMENT_ASCCP_MANIFEST_ID }, Keys.KEY_ASCCP_MANIFEST_PRIMARY, new TableField[] { AsccpManifest.ASCCP_MANIFEST.ASCCP_MANIFEST_ID }, true);
    public static final ForeignKey<BbieRecord, AgencyIdListRecord> BBIE_AGENCY_ID_LIST_ID_FK = Internal.createForeignKey(Bbie.BBIE, DSL.name("bbie_agency_id_list_id_fk"), new TableField[] { Bbie.BBIE.AGENCY_ID_LIST_ID }, Keys.KEY_AGENCY_ID_LIST_PRIMARY, new TableField[] { AgencyIdList.AGENCY_ID_LIST.AGENCY_ID_LIST_ID }, true);
    public static final ForeignKey<BbieRecord, BccManifestRecord> BBIE_BASED_BCC_MANIFEST_ID_FK = Internal.createForeignKey(Bbie.BBIE, DSL.name("bbie_based_bcc_manifest_id_fk"), new TableField[] { Bbie.BBIE.BASED_BCC_MANIFEST_ID }, Keys.KEY_BCC_MANIFEST_PRIMARY, new TableField[] { BccManifest.BCC_MANIFEST.BCC_MANIFEST_ID }, true);
    public static final ForeignKey<BbieRecord, BdtPriRestriRecord> BBIE_BDT_PRI_RESTRI_ID_FK = Internal.createForeignKey(Bbie.BBIE, DSL.name("bbie_bdt_pri_restri_id_fk"), new TableField[] { Bbie.BBIE.BDT_PRI_RESTRI_ID }, Keys.KEY_BDT_PRI_RESTRI_PRIMARY, new TableField[] { BdtPriRestri.BDT_PRI_RESTRI.BDT_PRI_RESTRI_ID }, true);
    public static final ForeignKey<BbieRecord, CodeListRecord> BBIE_CODE_LIST_ID_FK = Internal.createForeignKey(Bbie.BBIE, DSL.name("bbie_code_list_id_fk"), new TableField[] { Bbie.BBIE.CODE_LIST_ID }, Keys.KEY_CODE_LIST_PRIMARY, new TableField[] { CodeList.CODE_LIST.CODE_LIST_ID }, true);
    public static final ForeignKey<BbieRecord, AppUserRecord> BBIE_CREATED_BY_FK = Internal.createForeignKey(Bbie.BBIE, DSL.name("bbie_created_by_fk"), new TableField[] { Bbie.BBIE.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<BbieRecord, AbieRecord> BBIE_FROM_ABIE_ID_FK = Internal.createForeignKey(Bbie.BBIE, DSL.name("bbie_from_abie_id_fk"), new TableField[] { Bbie.BBIE.FROM_ABIE_ID }, Keys.KEY_ABIE_PRIMARY, new TableField[] { Abie.ABIE.ABIE_ID }, true);
    public static final ForeignKey<BbieRecord, AppUserRecord> BBIE_LAST_UPDATED_BY_FK = Internal.createForeignKey(Bbie.BBIE, DSL.name("bbie_last_updated_by_fk"), new TableField[] { Bbie.BBIE.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<BbieRecord, TopLevelAsbiepRecord> BBIE_OWNER_TOP_LEVEL_ASBIEP_ID_FK = Internal.createForeignKey(Bbie.BBIE, DSL.name("bbie_owner_top_level_asbiep_id_fk"), new TableField[] { Bbie.BBIE.OWNER_TOP_LEVEL_ASBIEP_ID }, Keys.KEY_TOP_LEVEL_ASBIEP_PRIMARY, new TableField[] { TopLevelAsbiep.TOP_LEVEL_ASBIEP.TOP_LEVEL_ASBIEP_ID }, true);
    public static final ForeignKey<BbieRecord, BbiepRecord> BBIE_TO_BBIEP_ID_FK = Internal.createForeignKey(Bbie.BBIE, DSL.name("bbie_to_bbiep_id_fk"), new TableField[] { Bbie.BBIE.TO_BBIEP_ID }, Keys.KEY_BBIEP_PRIMARY, new TableField[] { Bbiep.BBIEP.BBIEP_ID }, true);
    public static final ForeignKey<BbieScRecord, AgencyIdListRecord> BBIE_SC_AGENCY_ID_LIST_ID_FK = Internal.createForeignKey(BbieSc.BBIE_SC, DSL.name("bbie_sc_agency_id_list_id_fk"), new TableField[] { BbieSc.BBIE_SC.AGENCY_ID_LIST_ID }, Keys.KEY_AGENCY_ID_LIST_PRIMARY, new TableField[] { AgencyIdList.AGENCY_ID_LIST.AGENCY_ID_LIST_ID }, true);
    public static final ForeignKey<BbieScRecord, DtScManifestRecord> BBIE_SC_BASED_DT_SC_MANIFEST_ID_FK = Internal.createForeignKey(BbieSc.BBIE_SC, DSL.name("bbie_sc_based_dt_sc_manifest_id_fk"), new TableField[] { BbieSc.BBIE_SC.BASED_DT_SC_MANIFEST_ID }, Keys.KEY_DT_SC_MANIFEST_PRIMARY, new TableField[] { DtScManifest.DT_SC_MANIFEST.DT_SC_MANIFEST_ID }, true);
    public static final ForeignKey<BbieScRecord, BbieRecord> BBIE_SC_BBIE_ID_FK = Internal.createForeignKey(BbieSc.BBIE_SC, DSL.name("bbie_sc_bbie_id_fk"), new TableField[] { BbieSc.BBIE_SC.BBIE_ID }, Keys.KEY_BBIE_PRIMARY, new TableField[] { Bbie.BBIE.BBIE_ID }, true);
    public static final ForeignKey<BbieScRecord, CodeListRecord> BBIE_SC_CODE_LIST_ID_FK = Internal.createForeignKey(BbieSc.BBIE_SC, DSL.name("bbie_sc_code_list_id_fk"), new TableField[] { BbieSc.BBIE_SC.CODE_LIST_ID }, Keys.KEY_CODE_LIST_PRIMARY, new TableField[] { CodeList.CODE_LIST.CODE_LIST_ID }, true);
    public static final ForeignKey<BbieScRecord, AppUserRecord> BBIE_SC_CREATED_BY_FK = Internal.createForeignKey(BbieSc.BBIE_SC, DSL.name("bbie_sc_created_by_fk"), new TableField[] { BbieSc.BBIE_SC.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<BbieScRecord, BdtScPriRestriRecord> BBIE_SC_DT_SC_PRI_RESTRI_ID_FK = Internal.createForeignKey(BbieSc.BBIE_SC, DSL.name("bbie_sc_dt_sc_pri_restri_id_fk"), new TableField[] { BbieSc.BBIE_SC.DT_SC_PRI_RESTRI_ID }, Keys.KEY_BDT_SC_PRI_RESTRI_PRIMARY, new TableField[] { BdtScPriRestri.BDT_SC_PRI_RESTRI.BDT_SC_PRI_RESTRI_ID }, true);
    public static final ForeignKey<BbieScRecord, AppUserRecord> BBIE_SC_LAST_UPDATED_BY_FK = Internal.createForeignKey(BbieSc.BBIE_SC, DSL.name("bbie_sc_last_updated_by_fk"), new TableField[] { BbieSc.BBIE_SC.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<BbieScRecord, TopLevelAsbiepRecord> BBIE_SC_OWNER_TOP_LEVEL_ASBIEP_ID_FK = Internal.createForeignKey(BbieSc.BBIE_SC, DSL.name("bbie_sc_owner_top_level_asbiep_id_fk"), new TableField[] { BbieSc.BBIE_SC.OWNER_TOP_LEVEL_ASBIEP_ID }, Keys.KEY_TOP_LEVEL_ASBIEP_PRIMARY, new TableField[] { TopLevelAsbiep.TOP_LEVEL_ASBIEP.TOP_LEVEL_ASBIEP_ID }, true);
    public static final ForeignKey<BbiepRecord, BccpManifestRecord> BBIEP_BASED_BCCP_MANIFEST_ID_FK = Internal.createForeignKey(Bbiep.BBIEP, DSL.name("bbiep_based_bccp_manifest_id_fk"), new TableField[] { Bbiep.BBIEP.BASED_BCCP_MANIFEST_ID }, Keys.KEY_BCCP_MANIFEST_PRIMARY, new TableField[] { BccpManifest.BCCP_MANIFEST.BCCP_MANIFEST_ID }, true);
    public static final ForeignKey<BbiepRecord, AppUserRecord> BBIEP_CREATED_BY_FK = Internal.createForeignKey(Bbiep.BBIEP, DSL.name("bbiep_created_by_fk"), new TableField[] { Bbiep.BBIEP.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<BbiepRecord, AppUserRecord> BBIEP_LAST_UPDATED_BY_FK = Internal.createForeignKey(Bbiep.BBIEP, DSL.name("bbiep_last_updated_by_fk"), new TableField[] { Bbiep.BBIEP.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<BbiepRecord, TopLevelAsbiepRecord> BBIEP_OWNER_TOP_LEVEL_ASBIEP_ID_FK = Internal.createForeignKey(Bbiep.BBIEP, DSL.name("bbiep_owner_top_level_asbiep_id_fk"), new TableField[] { Bbiep.BBIEP.OWNER_TOP_LEVEL_ASBIEP_ID }, Keys.KEY_TOP_LEVEL_ASBIEP_PRIMARY, new TableField[] { TopLevelAsbiep.TOP_LEVEL_ASBIEP.TOP_LEVEL_ASBIEP_ID }, true);
    public static final ForeignKey<BccRecord, AppUserRecord> BCC_CREATED_BY_FK = Internal.createForeignKey(Bcc.BCC, DSL.name("bcc_created_by_fk"), new TableField[] { Bcc.BCC.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<BccRecord, AccRecord> BCC_FROM_ACC_ID_FK = Internal.createForeignKey(Bcc.BCC, DSL.name("bcc_from_acc_id_fk"), new TableField[] { Bcc.BCC.FROM_ACC_ID }, Keys.KEY_ACC_PRIMARY, new TableField[] { Acc.ACC.ACC_ID }, true);
    public static final ForeignKey<BccRecord, AppUserRecord> BCC_LAST_UPDATED_BY_FK = Internal.createForeignKey(Bcc.BCC, DSL.name("bcc_last_updated_by_fk"), new TableField[] { Bcc.BCC.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<BccRecord, BccRecord> BCC_NEXT_BCC_ID_FK = Internal.createForeignKey(Bcc.BCC, DSL.name("bcc_next_bcc_id_fk"), new TableField[] { Bcc.BCC.NEXT_BCC_ID }, Keys.KEY_BCC_PRIMARY, new TableField[] { Bcc.BCC.BCC_ID }, true);
    public static final ForeignKey<BccRecord, AppUserRecord> BCC_OWNER_USER_ID_FK = Internal.createForeignKey(Bcc.BCC, DSL.name("bcc_owner_user_id_fk"), new TableField[] { Bcc.BCC.OWNER_USER_ID }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<BccRecord, BccRecord> BCC_PREV_BCC_ID_FK = Internal.createForeignKey(Bcc.BCC, DSL.name("bcc_prev_bcc_id_fk"), new TableField[] { Bcc.BCC.PREV_BCC_ID }, Keys.KEY_BCC_PRIMARY, new TableField[] { Bcc.BCC.BCC_ID }, true);
    public static final ForeignKey<BccRecord, BccRecord> BCC_REPLACEMENT_BCC_ID_FK = Internal.createForeignKey(Bcc.BCC, DSL.name("bcc_replacement_bcc_id_fk"), new TableField[] { Bcc.BCC.REPLACEMENT_BCC_ID }, Keys.KEY_BCC_PRIMARY, new TableField[] { Bcc.BCC.BCC_ID }, true);
    public static final ForeignKey<BccRecord, BccpRecord> BCC_TO_BCCP_ID_FK = Internal.createForeignKey(Bcc.BCC, DSL.name("bcc_to_bccp_id_fk"), new TableField[] { Bcc.BCC.TO_BCCP_ID }, Keys.KEY_BCCP_PRIMARY, new TableField[] { Bccp.BCCP.BCCP_ID }, true);
    public static final ForeignKey<BccManifestRecord, BccRecord> BCC_MANIFEST_BCC_ID_FK = Internal.createForeignKey(BccManifest.BCC_MANIFEST, DSL.name("bcc_manifest_bcc_id_fk"), new TableField[] { BccManifest.BCC_MANIFEST.BCC_ID }, Keys.KEY_BCC_PRIMARY, new TableField[] { Bcc.BCC.BCC_ID }, true);
    public static final ForeignKey<BccManifestRecord, AccManifestRecord> BCC_MANIFEST_FROM_ACC_MANIFEST_ID_FK = Internal.createForeignKey(BccManifest.BCC_MANIFEST, DSL.name("bcc_manifest_from_acc_manifest_id_fk"), new TableField[] { BccManifest.BCC_MANIFEST.FROM_ACC_MANIFEST_ID }, Keys.KEY_ACC_MANIFEST_PRIMARY, new TableField[] { AccManifest.ACC_MANIFEST.ACC_MANIFEST_ID }, true);
    public static final ForeignKey<BccManifestRecord, BccManifestRecord> BCC_MANIFEST_NEXT_BCC_MANIFEST_ID_FK = Internal.createForeignKey(BccManifest.BCC_MANIFEST, DSL.name("bcc_manifest_next_bcc_manifest_id_fk"), new TableField[] { BccManifest.BCC_MANIFEST.NEXT_BCC_MANIFEST_ID }, Keys.KEY_BCC_MANIFEST_PRIMARY, new TableField[] { BccManifest.BCC_MANIFEST.BCC_MANIFEST_ID }, true);
    public static final ForeignKey<BccManifestRecord, BccManifestRecord> BCC_MANIFEST_PREV_BCC_MANIFEST_ID_FK = Internal.createForeignKey(BccManifest.BCC_MANIFEST, DSL.name("bcc_manifest_prev_bcc_manifest_id_fk"), new TableField[] { BccManifest.BCC_MANIFEST.PREV_BCC_MANIFEST_ID }, Keys.KEY_BCC_MANIFEST_PRIMARY, new TableField[] { BccManifest.BCC_MANIFEST.BCC_MANIFEST_ID }, true);
    public static final ForeignKey<BccManifestRecord, ReleaseRecord> BCC_MANIFEST_RELEASE_ID_FK = Internal.createForeignKey(BccManifest.BCC_MANIFEST, DSL.name("bcc_manifest_release_id_fk"), new TableField[] { BccManifest.BCC_MANIFEST.RELEASE_ID }, Keys.KEY_RELEASE_PRIMARY, new TableField[] { Release.RELEASE.RELEASE_ID }, true);
    public static final ForeignKey<BccManifestRecord, SeqKeyRecord> BCC_MANIFEST_SEQ_KEY_ID_FK = Internal.createForeignKey(BccManifest.BCC_MANIFEST, DSL.name("bcc_manifest_seq_key_id_fk"), new TableField[] { BccManifest.BCC_MANIFEST.SEQ_KEY_ID }, Keys.KEY_SEQ_KEY_PRIMARY, new TableField[] { SeqKey.SEQ_KEY.SEQ_KEY_ID }, true);
    public static final ForeignKey<BccManifestRecord, BccpManifestRecord> BCC_MANIFEST_TO_BCCP_MANIFEST_ID_FK = Internal.createForeignKey(BccManifest.BCC_MANIFEST, DSL.name("bcc_manifest_to_bccp_manifest_id_fk"), new TableField[] { BccManifest.BCC_MANIFEST.TO_BCCP_MANIFEST_ID }, Keys.KEY_BCCP_MANIFEST_PRIMARY, new TableField[] { BccpManifest.BCCP_MANIFEST.BCCP_MANIFEST_ID }, true);
    public static final ForeignKey<BccManifestRecord, BccManifestRecord> BCC_REPLACEMENT_BCC_MANIFEST_ID_FK = Internal.createForeignKey(BccManifest.BCC_MANIFEST, DSL.name("bcc_replacement_bcc_manifest_id_fk"), new TableField[] { BccManifest.BCC_MANIFEST.REPLACEMENT_BCC_MANIFEST_ID }, Keys.KEY_BCC_MANIFEST_PRIMARY, new TableField[] { BccManifest.BCC_MANIFEST.BCC_MANIFEST_ID }, true);
    public static final ForeignKey<BccpRecord, DtRecord> BCCP_BDT_ID_FK = Internal.createForeignKey(Bccp.BCCP, DSL.name("bccp_bdt_id_fk"), new TableField[] { Bccp.BCCP.BDT_ID }, Keys.KEY_DT_PRIMARY, new TableField[] { Dt.DT.DT_ID }, true);
    public static final ForeignKey<BccpRecord, AppUserRecord> BCCP_CREATED_BY_FK = Internal.createForeignKey(Bccp.BCCP, DSL.name("bccp_created_by_fk"), new TableField[] { Bccp.BCCP.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<BccpRecord, AppUserRecord> BCCP_LAST_UPDATED_BY_FK = Internal.createForeignKey(Bccp.BCCP, DSL.name("bccp_last_updated_by_fk"), new TableField[] { Bccp.BCCP.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<BccpRecord, NamespaceRecord> BCCP_NAMESPACE_ID_FK = Internal.createForeignKey(Bccp.BCCP, DSL.name("bccp_namespace_id_fk"), new TableField[] { Bccp.BCCP.NAMESPACE_ID }, Keys.KEY_NAMESPACE_PRIMARY, new TableField[] { Namespace.NAMESPACE.NAMESPACE_ID }, true);
    public static final ForeignKey<BccpRecord, BccpRecord> BCCP_NEXT_BCCP_ID_FK = Internal.createForeignKey(Bccp.BCCP, DSL.name("bccp_next_bccp_id_fk"), new TableField[] { Bccp.BCCP.NEXT_BCCP_ID }, Keys.KEY_BCCP_PRIMARY, new TableField[] { Bccp.BCCP.BCCP_ID }, true);
    public static final ForeignKey<BccpRecord, AppUserRecord> BCCP_OWNER_USER_ID_FK = Internal.createForeignKey(Bccp.BCCP, DSL.name("bccp_owner_user_id_fk"), new TableField[] { Bccp.BCCP.OWNER_USER_ID }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<BccpRecord, BccpRecord> BCCP_PREV_BCCP_ID_FK = Internal.createForeignKey(Bccp.BCCP, DSL.name("bccp_prev_bccp_id_fk"), new TableField[] { Bccp.BCCP.PREV_BCCP_ID }, Keys.KEY_BCCP_PRIMARY, new TableField[] { Bccp.BCCP.BCCP_ID }, true);
    public static final ForeignKey<BccpRecord, BccpRecord> BCCP_REPLACEMENT_BCCP_ID_FK = Internal.createForeignKey(Bccp.BCCP, DSL.name("bccp_replacement_bccp_id_fk"), new TableField[] { Bccp.BCCP.REPLACEMENT_BCCP_ID }, Keys.KEY_BCCP_PRIMARY, new TableField[] { Bccp.BCCP.BCCP_ID }, true);
    public static final ForeignKey<BccpManifestRecord, BccpRecord> BCCP_MANIFEST_BCCP_ID_FK = Internal.createForeignKey(BccpManifest.BCCP_MANIFEST, DSL.name("bccp_manifest_bccp_id_fk"), new TableField[] { BccpManifest.BCCP_MANIFEST.BCCP_ID }, Keys.KEY_BCCP_PRIMARY, new TableField[] { Bccp.BCCP.BCCP_ID }, true);
    public static final ForeignKey<BccpManifestRecord, DtManifestRecord> BCCP_MANIFEST_BDT_MANIFEST_ID_FK = Internal.createForeignKey(BccpManifest.BCCP_MANIFEST, DSL.name("bccp_manifest_bdt_manifest_id_fk"), new TableField[] { BccpManifest.BCCP_MANIFEST.BDT_MANIFEST_ID }, Keys.KEY_DT_MANIFEST_PRIMARY, new TableField[] { DtManifest.DT_MANIFEST.DT_MANIFEST_ID }, true);
    public static final ForeignKey<BccpManifestRecord, LogRecord> BCCP_MANIFEST_LOG_ID_FK = Internal.createForeignKey(BccpManifest.BCCP_MANIFEST, DSL.name("bccp_manifest_log_id_fk"), new TableField[] { BccpManifest.BCCP_MANIFEST.LOG_ID }, Keys.KEY_LOG_PRIMARY, new TableField[] { Log.LOG.LOG_ID }, true);
    public static final ForeignKey<BccpManifestRecord, BccpManifestRecord> BCCP_MANIFEST_NEXT_BCCP_MANIFEST_ID_FK = Internal.createForeignKey(BccpManifest.BCCP_MANIFEST, DSL.name("bccp_manifest_next_bccp_manifest_id_fk"), new TableField[] { BccpManifest.BCCP_MANIFEST.NEXT_BCCP_MANIFEST_ID }, Keys.KEY_BCCP_MANIFEST_PRIMARY, new TableField[] { BccpManifest.BCCP_MANIFEST.BCCP_MANIFEST_ID }, true);
    public static final ForeignKey<BccpManifestRecord, BccpManifestRecord> BCCP_MANIFEST_PREV_BCCP_MANIFEST_ID_FK = Internal.createForeignKey(BccpManifest.BCCP_MANIFEST, DSL.name("bccp_manifest_prev_bccp_manifest_id_fk"), new TableField[] { BccpManifest.BCCP_MANIFEST.PREV_BCCP_MANIFEST_ID }, Keys.KEY_BCCP_MANIFEST_PRIMARY, new TableField[] { BccpManifest.BCCP_MANIFEST.BCCP_MANIFEST_ID }, true);
    public static final ForeignKey<BccpManifestRecord, ReleaseRecord> BCCP_MANIFEST_RELEASE_ID_FK = Internal.createForeignKey(BccpManifest.BCCP_MANIFEST, DSL.name("bccp_manifest_release_id_fk"), new TableField[] { BccpManifest.BCCP_MANIFEST.RELEASE_ID }, Keys.KEY_RELEASE_PRIMARY, new TableField[] { Release.RELEASE.RELEASE_ID }, true);
    public static final ForeignKey<BccpManifestRecord, BccpManifestRecord> BCCP_REPLACEMENT_BCCP_MANIFEST_ID_FK = Internal.createForeignKey(BccpManifest.BCCP_MANIFEST, DSL.name("bccp_replacement_bccp_manifest_id_fk"), new TableField[] { BccpManifest.BCCP_MANIFEST.REPLACEMENT_BCCP_MANIFEST_ID }, Keys.KEY_BCCP_MANIFEST_PRIMARY, new TableField[] { BccpManifest.BCCP_MANIFEST.BCCP_MANIFEST_ID }, true);
    public static final ForeignKey<BdtPriRestriRecord, AgencyIdListRecord> BDT_PRI_RESTRI_AGENCY_ID_LIST_ID_FK = Internal.createForeignKey(BdtPriRestri.BDT_PRI_RESTRI, DSL.name("bdt_pri_restri_agency_id_list_id_fk"), new TableField[] { BdtPriRestri.BDT_PRI_RESTRI.AGENCY_ID_LIST_ID }, Keys.KEY_AGENCY_ID_LIST_PRIMARY, new TableField[] { AgencyIdList.AGENCY_ID_LIST.AGENCY_ID_LIST_ID }, true);
    public static final ForeignKey<BdtPriRestriRecord, DtRecord> BDT_PRI_RESTRI_BDT_ID_FK = Internal.createForeignKey(BdtPriRestri.BDT_PRI_RESTRI, DSL.name("bdt_pri_restri_bdt_id_fk"), new TableField[] { BdtPriRestri.BDT_PRI_RESTRI.BDT_ID }, Keys.KEY_DT_PRIMARY, new TableField[] { Dt.DT.DT_ID }, true);
    public static final ForeignKey<BdtPriRestriRecord, CdtAwdPriXpsTypeMapRecord> BDT_PRI_RESTRI_CDT_AWD_PRI_XPS_TYPE_MAP_ID_FK = Internal.createForeignKey(BdtPriRestri.BDT_PRI_RESTRI, DSL.name("bdt_pri_restri_cdt_awd_pri_xps_type_map_id_fk"), new TableField[] { BdtPriRestri.BDT_PRI_RESTRI.CDT_AWD_PRI_XPS_TYPE_MAP_ID }, Keys.KEY_CDT_AWD_PRI_XPS_TYPE_MAP_PRIMARY, new TableField[] { CdtAwdPriXpsTypeMap.CDT_AWD_PRI_XPS_TYPE_MAP.CDT_AWD_PRI_XPS_TYPE_MAP_ID }, true);
    public static final ForeignKey<BdtPriRestriRecord, CodeListRecord> BDT_PRI_RESTRI_CODE_LIST_ID_FK = Internal.createForeignKey(BdtPriRestri.BDT_PRI_RESTRI, DSL.name("bdt_pri_restri_code_list_id_fk"), new TableField[] { BdtPriRestri.BDT_PRI_RESTRI.CODE_LIST_ID }, Keys.KEY_CODE_LIST_PRIMARY, new TableField[] { CodeList.CODE_LIST.CODE_LIST_ID }, true);
    public static final ForeignKey<BdtScPriRestriRecord, AgencyIdListRecord> BDT_SC_PRI_RESTRI_AGENCY_ID_LIST_ID_FK = Internal.createForeignKey(BdtScPriRestri.BDT_SC_PRI_RESTRI, DSL.name("bdt_sc_pri_restri_agency_id_list_id_fk"), new TableField[] { BdtScPriRestri.BDT_SC_PRI_RESTRI.AGENCY_ID_LIST_ID }, Keys.KEY_AGENCY_ID_LIST_PRIMARY, new TableField[] { AgencyIdList.AGENCY_ID_LIST.AGENCY_ID_LIST_ID }, true);
    public static final ForeignKey<BdtScPriRestriRecord, DtScRecord> BDT_SC_PRI_RESTRI_BDT_SC_ID_FK = Internal.createForeignKey(BdtScPriRestri.BDT_SC_PRI_RESTRI, DSL.name("bdt_sc_pri_restri_bdt_sc_id_fk"), new TableField[] { BdtScPriRestri.BDT_SC_PRI_RESTRI.BDT_SC_ID }, Keys.KEY_DT_SC_PRIMARY, new TableField[] { DtSc.DT_SC.DT_SC_ID }, true);
    public static final ForeignKey<BdtScPriRestriRecord, CdtScAwdPriXpsTypeMapRecord> BDT_SC_PRI_RESTRI_CDT_SC_AWD_PRI_XPS_TYPE_MAP_ID_FK = Internal.createForeignKey(BdtScPriRestri.BDT_SC_PRI_RESTRI, DSL.name("bdt_sc_pri_restri_cdt_sc_awd_pri_xps_type_map_id_fk"), new TableField[] { BdtScPriRestri.BDT_SC_PRI_RESTRI.CDT_SC_AWD_PRI_XPS_TYPE_MAP_ID }, Keys.KEY_CDT_SC_AWD_PRI_XPS_TYPE_MAP_PRIMARY, new TableField[] { CdtScAwdPriXpsTypeMap.CDT_SC_AWD_PRI_XPS_TYPE_MAP.CDT_SC_AWD_PRI_XPS_TYPE_MAP_ID }, true);
    public static final ForeignKey<BdtScPriRestriRecord, CodeListRecord> BDT_SC_PRI_RESTRI_CODE_LIST_ID_FK = Internal.createForeignKey(BdtScPriRestri.BDT_SC_PRI_RESTRI, DSL.name("bdt_sc_pri_restri_code_list_id_fk"), new TableField[] { BdtScPriRestri.BDT_SC_PRI_RESTRI.CODE_LIST_ID }, Keys.KEY_CODE_LIST_PRIMARY, new TableField[] { CodeList.CODE_LIST.CODE_LIST_ID }, true);
    public static final ForeignKey<BieUsageRuleRecord, UsageRuleRecord> BIE_USAGE_RULE_ASSIGNED_USAGE_RULE_ID_FK = Internal.createForeignKey(BieUsageRule.BIE_USAGE_RULE, DSL.name("bie_usage_rule_assigned_usage_rule_id_fk"), new TableField[] { BieUsageRule.BIE_USAGE_RULE.ASSIGNED_USAGE_RULE_ID }, Keys.KEY_USAGE_RULE_PRIMARY, new TableField[] { UsageRule.USAGE_RULE.USAGE_RULE_ID }, true);
    public static final ForeignKey<BieUsageRuleRecord, AbieRecord> BIE_USAGE_RULE_TARGET_ABIE_ID_FK = Internal.createForeignKey(BieUsageRule.BIE_USAGE_RULE, DSL.name("bie_usage_rule_target_abie_id_fk"), new TableField[] { BieUsageRule.BIE_USAGE_RULE.TARGET_ABIE_ID }, Keys.KEY_ABIE_PRIMARY, new TableField[] { Abie.ABIE.ABIE_ID }, true);
    public static final ForeignKey<BieUsageRuleRecord, AsbieRecord> BIE_USAGE_RULE_TARGET_ASBIE_ID_FK = Internal.createForeignKey(BieUsageRule.BIE_USAGE_RULE, DSL.name("bie_usage_rule_target_asbie_id_fk"), new TableField[] { BieUsageRule.BIE_USAGE_RULE.TARGET_ASBIE_ID }, Keys.KEY_ASBIE_PRIMARY, new TableField[] { Asbie.ASBIE.ASBIE_ID }, true);
    public static final ForeignKey<BieUsageRuleRecord, AsbiepRecord> BIE_USAGE_RULE_TARGET_ASBIEP_ID_FK = Internal.createForeignKey(BieUsageRule.BIE_USAGE_RULE, DSL.name("bie_usage_rule_target_asbiep_id_fk"), new TableField[] { BieUsageRule.BIE_USAGE_RULE.TARGET_ASBIEP_ID }, Keys.KEY_ASBIEP_PRIMARY, new TableField[] { Asbiep.ASBIEP.ASBIEP_ID }, true);
    public static final ForeignKey<BieUsageRuleRecord, BbieRecord> BIE_USAGE_RULE_TARGET_BBIE_ID_FK = Internal.createForeignKey(BieUsageRule.BIE_USAGE_RULE, DSL.name("bie_usage_rule_target_bbie_id_fk"), new TableField[] { BieUsageRule.BIE_USAGE_RULE.TARGET_BBIE_ID }, Keys.KEY_BBIE_PRIMARY, new TableField[] { Bbie.BBIE.BBIE_ID }, true);
    public static final ForeignKey<BieUsageRuleRecord, BbiepRecord> BIE_USAGE_RULE_TARGET_BBIEP_ID_FK = Internal.createForeignKey(BieUsageRule.BIE_USAGE_RULE, DSL.name("bie_usage_rule_target_bbiep_id_fk"), new TableField[] { BieUsageRule.BIE_USAGE_RULE.TARGET_BBIEP_ID }, Keys.KEY_BBIEP_PRIMARY, new TableField[] { Bbiep.BBIEP.BBIEP_ID }, true);
    public static final ForeignKey<BieUserExtRevisionRecord, AbieRecord> BIE_USER_EXT_REVISION_EXT_ABIE_ID_FK = Internal.createForeignKey(BieUserExtRevision.BIE_USER_EXT_REVISION, DSL.name("bie_user_ext_revision_ext_abie_id_fk"), new TableField[] { BieUserExtRevision.BIE_USER_EXT_REVISION.EXT_ABIE_ID }, Keys.KEY_ABIE_PRIMARY, new TableField[] { Abie.ABIE.ABIE_ID }, true);
    public static final ForeignKey<BieUserExtRevisionRecord, AccRecord> BIE_USER_EXT_REVISION_EXT_ACC_ID_FK = Internal.createForeignKey(BieUserExtRevision.BIE_USER_EXT_REVISION, DSL.name("bie_user_ext_revision_ext_acc_id_fk"), new TableField[] { BieUserExtRevision.BIE_USER_EXT_REVISION.EXT_ACC_ID }, Keys.KEY_ACC_PRIMARY, new TableField[] { Acc.ACC.ACC_ID }, true);
    public static final ForeignKey<BieUserExtRevisionRecord, TopLevelAsbiepRecord> BIE_USER_EXT_REVISION_TOP_LEVEL_ASBIEP_ID_FK = Internal.createForeignKey(BieUserExtRevision.BIE_USER_EXT_REVISION, DSL.name("bie_user_ext_revision_top_level_asbiep_id_fk"), new TableField[] { BieUserExtRevision.BIE_USER_EXT_REVISION.TOP_LEVEL_ASBIEP_ID }, Keys.KEY_TOP_LEVEL_ASBIEP_PRIMARY, new TableField[] { TopLevelAsbiep.TOP_LEVEL_ASBIEP.TOP_LEVEL_ASBIEP_ID }, true);
    public static final ForeignKey<BieUserExtRevisionRecord, AccRecord> BIE_USER_EXT_REVISION_USER_EXT_ACC_ID_FK = Internal.createForeignKey(BieUserExtRevision.BIE_USER_EXT_REVISION, DSL.name("bie_user_ext_revision_user_ext_acc_id_fk"), new TableField[] { BieUserExtRevision.BIE_USER_EXT_REVISION.USER_EXT_ACC_ID }, Keys.KEY_ACC_PRIMARY, new TableField[] { Acc.ACC.ACC_ID }, true);
    public static final ForeignKey<BizCtxRecord, AppUserRecord> BIZ_CTX_CREATED_BY_FK = Internal.createForeignKey(BizCtx.BIZ_CTX, DSL.name("biz_ctx_created_by_fk"), new TableField[] { BizCtx.BIZ_CTX.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<BizCtxRecord, AppUserRecord> BIZ_CTX_LAST_UPDATED_BY_FK = Internal.createForeignKey(BizCtx.BIZ_CTX, DSL.name("biz_ctx_last_updated_by_fk"), new TableField[] { BizCtx.BIZ_CTX.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<BizCtxAssignmentRecord, BizCtxRecord> BIZ_CTX_ASSIGNMENT_BIZ_CTX_ID_FK = Internal.createForeignKey(BizCtxAssignment.BIZ_CTX_ASSIGNMENT, DSL.name("biz_ctx_assignment_biz_ctx_id_fk"), new TableField[] { BizCtxAssignment.BIZ_CTX_ASSIGNMENT.BIZ_CTX_ID }, Keys.KEY_BIZ_CTX_PRIMARY, new TableField[] { BizCtx.BIZ_CTX.BIZ_CTX_ID }, true);
    public static final ForeignKey<BizCtxAssignmentRecord, TopLevelAsbiepRecord> BIZ_CTX_ASSIGNMENT_TOP_LEVEL_ASBIEP_ID_FK = Internal.createForeignKey(BizCtxAssignment.BIZ_CTX_ASSIGNMENT, DSL.name("biz_ctx_assignment_top_level_asbiep_id_fk"), new TableField[] { BizCtxAssignment.BIZ_CTX_ASSIGNMENT.TOP_LEVEL_ASBIEP_ID }, Keys.KEY_TOP_LEVEL_ASBIEP_PRIMARY, new TableField[] { TopLevelAsbiep.TOP_LEVEL_ASBIEP.TOP_LEVEL_ASBIEP_ID }, true);
    public static final ForeignKey<BizCtxValueRecord, BizCtxRecord> BIZ_CTX_VALUE_BIZ_CTX_ID_FK = Internal.createForeignKey(BizCtxValue.BIZ_CTX_VALUE, DSL.name("biz_ctx_value_biz_ctx_id_fk"), new TableField[] { BizCtxValue.BIZ_CTX_VALUE.BIZ_CTX_ID }, Keys.KEY_BIZ_CTX_PRIMARY, new TableField[] { BizCtx.BIZ_CTX.BIZ_CTX_ID }, true);
    public static final ForeignKey<BizCtxValueRecord, CtxSchemeValueRecord> BIZ_CTX_VALUE_CTX_SCHEME_VALUE_ID_FK = Internal.createForeignKey(BizCtxValue.BIZ_CTX_VALUE, DSL.name("biz_ctx_value_ctx_scheme_value_id_fk"), new TableField[] { BizCtxValue.BIZ_CTX_VALUE.CTX_SCHEME_VALUE_ID }, Keys.KEY_CTX_SCHEME_VALUE_PRIMARY, new TableField[] { CtxSchemeValue.CTX_SCHEME_VALUE.CTX_SCHEME_VALUE_ID }, true);
    public static final ForeignKey<BlobContentManifestRecord, BlobContentRecord> BLOB_CONTENT_MANIFEST_BLOB_CONTENT_ID_FK = Internal.createForeignKey(BlobContentManifest.BLOB_CONTENT_MANIFEST, DSL.name("blob_content_manifest_blob_content_id_fk"), new TableField[] { BlobContentManifest.BLOB_CONTENT_MANIFEST.BLOB_CONTENT_ID }, Keys.KEY_BLOB_CONTENT_PRIMARY, new TableField[] { BlobContent.BLOB_CONTENT.BLOB_CONTENT_ID }, true);
    public static final ForeignKey<BlobContentManifestRecord, BlobContentManifestRecord> BLOB_CONTENT_MANIFEST_NEXT_BLOB_CONTENT_MANIFEST_ID_FK = Internal.createForeignKey(BlobContentManifest.BLOB_CONTENT_MANIFEST, DSL.name("blob_content_manifest_next_blob_content_manifest_id_fk"), new TableField[] { BlobContentManifest.BLOB_CONTENT_MANIFEST.NEXT_BLOB_CONTENT_MANIFEST_ID }, Keys.KEY_BLOB_CONTENT_MANIFEST_PRIMARY, new TableField[] { BlobContentManifest.BLOB_CONTENT_MANIFEST.BLOB_CONTENT_MANIFEST_ID }, true);
    public static final ForeignKey<BlobContentManifestRecord, BlobContentManifestRecord> BLOB_CONTENT_MANIFEST_PREV_BLOB_CONTENT_MANIFEST_ID_FK = Internal.createForeignKey(BlobContentManifest.BLOB_CONTENT_MANIFEST, DSL.name("blob_content_manifest_prev_blob_content_manifest_id_fk"), new TableField[] { BlobContentManifest.BLOB_CONTENT_MANIFEST.PREV_BLOB_CONTENT_MANIFEST_ID }, Keys.KEY_BLOB_CONTENT_MANIFEST_PRIMARY, new TableField[] { BlobContentManifest.BLOB_CONTENT_MANIFEST.BLOB_CONTENT_MANIFEST_ID }, true);
    public static final ForeignKey<BlobContentManifestRecord, ReleaseRecord> BLOB_CONTENT_MANIFEST_RELEASE_ID_FK = Internal.createForeignKey(BlobContentManifest.BLOB_CONTENT_MANIFEST, DSL.name("blob_content_manifest_release_id_fk"), new TableField[] { BlobContentManifest.BLOB_CONTENT_MANIFEST.RELEASE_ID }, Keys.KEY_RELEASE_PRIMARY, new TableField[] { Release.RELEASE.RELEASE_ID }, true);
    public static final ForeignKey<CdtAwdPriRecord, DtRecord> CDT_AWD_PRI_CDT_ID_FK = Internal.createForeignKey(CdtAwdPri.CDT_AWD_PRI, DSL.name("cdt_awd_pri_cdt_id_fk"), new TableField[] { CdtAwdPri.CDT_AWD_PRI.CDT_ID }, Keys.KEY_DT_PRIMARY, new TableField[] { Dt.DT.DT_ID }, true);
    public static final ForeignKey<CdtAwdPriRecord, CdtPriRecord> CDT_AWD_PRI_CDT_PRI_ID_FK = Internal.createForeignKey(CdtAwdPri.CDT_AWD_PRI, DSL.name("cdt_awd_pri_cdt_pri_id_fk"), new TableField[] { CdtAwdPri.CDT_AWD_PRI.CDT_PRI_ID }, Keys.KEY_CDT_PRI_PRIMARY, new TableField[] { CdtPri.CDT_PRI.CDT_PRI_ID }, true);
    public static final ForeignKey<CdtAwdPriXpsTypeMapRecord, CdtAwdPriRecord> CDT_AWD_PRI_XPS_TYPE_MAP_CDT_AWD_PRI_ID_FK = Internal.createForeignKey(CdtAwdPriXpsTypeMap.CDT_AWD_PRI_XPS_TYPE_MAP, DSL.name("cdt_awd_pri_xps_type_map_cdt_awd_pri_id_fk"), new TableField[] { CdtAwdPriXpsTypeMap.CDT_AWD_PRI_XPS_TYPE_MAP.CDT_AWD_PRI_ID }, Keys.KEY_CDT_AWD_PRI_PRIMARY, new TableField[] { CdtAwdPri.CDT_AWD_PRI.CDT_AWD_PRI_ID }, true);
    public static final ForeignKey<CdtAwdPriXpsTypeMapRecord, XbtRecord> CDT_AWD_PRI_XPS_TYPE_MAP_XBT_ID_FK = Internal.createForeignKey(CdtAwdPriXpsTypeMap.CDT_AWD_PRI_XPS_TYPE_MAP, DSL.name("cdt_awd_pri_xps_type_map_xbt_id_fk"), new TableField[] { CdtAwdPriXpsTypeMap.CDT_AWD_PRI_XPS_TYPE_MAP.XBT_ID }, Keys.KEY_XBT_PRIMARY, new TableField[] { Xbt.XBT.XBT_ID }, true);
    public static final ForeignKey<CdtScAwdPriRecord, CdtPriRecord> CDT_SC_AWD_PRI_CDT_PRI_ID_FK = Internal.createForeignKey(CdtScAwdPri.CDT_SC_AWD_PRI, DSL.name("cdt_sc_awd_pri_cdt_pri_id_fk"), new TableField[] { CdtScAwdPri.CDT_SC_AWD_PRI.CDT_PRI_ID }, Keys.KEY_CDT_PRI_PRIMARY, new TableField[] { CdtPri.CDT_PRI.CDT_PRI_ID }, true);
    public static final ForeignKey<CdtScAwdPriRecord, DtScRecord> CDT_SC_AWD_PRI_CDT_SC_ID_FK = Internal.createForeignKey(CdtScAwdPri.CDT_SC_AWD_PRI, DSL.name("cdt_sc_awd_pri_cdt_sc_id_fk"), new TableField[] { CdtScAwdPri.CDT_SC_AWD_PRI.CDT_SC_ID }, Keys.KEY_DT_SC_PRIMARY, new TableField[] { DtSc.DT_SC.DT_SC_ID }, true);
    public static final ForeignKey<CdtScAwdPriXpsTypeMapRecord, CdtScAwdPriRecord> CDT_SC_AWD_PRI_XPS_TYPE_MAP_CDT_SC_AWD_PRI_ID_FK = Internal.createForeignKey(CdtScAwdPriXpsTypeMap.CDT_SC_AWD_PRI_XPS_TYPE_MAP, DSL.name("cdt_sc_awd_pri_xps_type_map_cdt_sc_awd_pri_id_fk"), new TableField[] { CdtScAwdPriXpsTypeMap.CDT_SC_AWD_PRI_XPS_TYPE_MAP.CDT_SC_AWD_PRI_ID }, Keys.KEY_CDT_SC_AWD_PRI_PRIMARY, new TableField[] { CdtScAwdPri.CDT_SC_AWD_PRI.CDT_SC_AWD_PRI_ID }, true);
    public static final ForeignKey<CdtScAwdPriXpsTypeMapRecord, XbtRecord> CDT_SC_AWD_PRI_XPS_TYPE_MAP_XBT_ID_FK = Internal.createForeignKey(CdtScAwdPriXpsTypeMap.CDT_SC_AWD_PRI_XPS_TYPE_MAP, DSL.name("cdt_sc_awd_pri_xps_type_map_xbt_id_fk"), new TableField[] { CdtScAwdPriXpsTypeMap.CDT_SC_AWD_PRI_XPS_TYPE_MAP.XBT_ID }, Keys.KEY_XBT_PRIMARY, new TableField[] { Xbt.XBT.XBT_ID }, true);
    public static final ForeignKey<CodeListRecord, AgencyIdListValueRecord> CODE_LIST_AGENCY_ID_FK = Internal.createForeignKey(CodeList.CODE_LIST, DSL.name("code_list_agency_id_fk"), new TableField[] { CodeList.CODE_LIST.AGENCY_ID }, Keys.KEY_AGENCY_ID_LIST_VALUE_PRIMARY, new TableField[] { AgencyIdListValue.AGENCY_ID_LIST_VALUE.AGENCY_ID_LIST_VALUE_ID }, true);
    public static final ForeignKey<CodeListRecord, CodeListRecord> CODE_LIST_BASED_CODE_LIST_ID_FK = Internal.createForeignKey(CodeList.CODE_LIST, DSL.name("code_list_based_code_list_id_fk"), new TableField[] { CodeList.CODE_LIST.BASED_CODE_LIST_ID }, Keys.KEY_CODE_LIST_PRIMARY, new TableField[] { CodeList.CODE_LIST.CODE_LIST_ID }, true);
    public static final ForeignKey<CodeListRecord, AppUserRecord> CODE_LIST_CREATED_BY_FK = Internal.createForeignKey(CodeList.CODE_LIST, DSL.name("code_list_created_by_fk"), new TableField[] { CodeList.CODE_LIST.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<CodeListRecord, AppUserRecord> CODE_LIST_LAST_UPDATED_BY_FK = Internal.createForeignKey(CodeList.CODE_LIST, DSL.name("code_list_last_updated_by_fk"), new TableField[] { CodeList.CODE_LIST.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<CodeListRecord, NamespaceRecord> CODE_LIST_NAMESPACE_ID_FK = Internal.createForeignKey(CodeList.CODE_LIST, DSL.name("code_list_namespace_id_fk"), new TableField[] { CodeList.CODE_LIST.NAMESPACE_ID }, Keys.KEY_NAMESPACE_PRIMARY, new TableField[] { Namespace.NAMESPACE.NAMESPACE_ID }, true);
    public static final ForeignKey<CodeListRecord, CodeListRecord> CODE_LIST_NEXT_CODE_LIST_ID_FK = Internal.createForeignKey(CodeList.CODE_LIST, DSL.name("code_list_next_code_list_id_fk"), new TableField[] { CodeList.CODE_LIST.NEXT_CODE_LIST_ID }, Keys.KEY_CODE_LIST_PRIMARY, new TableField[] { CodeList.CODE_LIST.CODE_LIST_ID }, true);
    public static final ForeignKey<CodeListRecord, AppUserRecord> CODE_LIST_OWNER_USER_ID_FK = Internal.createForeignKey(CodeList.CODE_LIST, DSL.name("code_list_owner_user_id_fk"), new TableField[] { CodeList.CODE_LIST.OWNER_USER_ID }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<CodeListRecord, CodeListRecord> CODE_LIST_PREV_CODE_LIST_ID_FK = Internal.createForeignKey(CodeList.CODE_LIST, DSL.name("code_list_prev_code_list_id_fk"), new TableField[] { CodeList.CODE_LIST.PREV_CODE_LIST_ID }, Keys.KEY_CODE_LIST_PRIMARY, new TableField[] { CodeList.CODE_LIST.CODE_LIST_ID }, true);
    public static final ForeignKey<CodeListRecord, CodeListRecord> CODE_LIST_REPLACEMENT_CODE_LIST_ID_FK = Internal.createForeignKey(CodeList.CODE_LIST, DSL.name("code_list_replacement_code_list_id_fk"), new TableField[] { CodeList.CODE_LIST.REPLACEMENT_CODE_LIST_ID }, Keys.KEY_CODE_LIST_PRIMARY, new TableField[] { CodeList.CODE_LIST.CODE_LIST_ID }, true);
    public static final ForeignKey<CodeListManifestRecord, CodeListManifestRecord> CODE_LIST_MANIFEST_BASED_CODE_LIST_MANIFEST_ID_FK = Internal.createForeignKey(CodeListManifest.CODE_LIST_MANIFEST, DSL.name("code_list_manifest_based_code_list_manifest_id_fk"), new TableField[] { CodeListManifest.CODE_LIST_MANIFEST.BASED_CODE_LIST_MANIFEST_ID }, Keys.KEY_CODE_LIST_MANIFEST_PRIMARY, new TableField[] { CodeListManifest.CODE_LIST_MANIFEST.CODE_LIST_MANIFEST_ID }, true);
    public static final ForeignKey<CodeListManifestRecord, CodeListRecord> CODE_LIST_MANIFEST_CODE_LIST_ID_FK = Internal.createForeignKey(CodeListManifest.CODE_LIST_MANIFEST, DSL.name("code_list_manifest_code_list_id_fk"), new TableField[] { CodeListManifest.CODE_LIST_MANIFEST.CODE_LIST_ID }, Keys.KEY_CODE_LIST_PRIMARY, new TableField[] { CodeList.CODE_LIST.CODE_LIST_ID }, true);
    public static final ForeignKey<CodeListManifestRecord, LogRecord> CODE_LIST_MANIFEST_LOG_ID_FK = Internal.createForeignKey(CodeListManifest.CODE_LIST_MANIFEST, DSL.name("code_list_manifest_log_id_fk"), new TableField[] { CodeListManifest.CODE_LIST_MANIFEST.LOG_ID }, Keys.KEY_LOG_PRIMARY, new TableField[] { Log.LOG.LOG_ID }, true);
    public static final ForeignKey<CodeListManifestRecord, CodeListManifestRecord> CODE_LIST_MANIFEST_NEXT_CODE_LIST_MANIFEST_ID_FK = Internal.createForeignKey(CodeListManifest.CODE_LIST_MANIFEST, DSL.name("code_list_manifest_next_code_list_manifest_id_fk"), new TableField[] { CodeListManifest.CODE_LIST_MANIFEST.NEXT_CODE_LIST_MANIFEST_ID }, Keys.KEY_CODE_LIST_MANIFEST_PRIMARY, new TableField[] { CodeListManifest.CODE_LIST_MANIFEST.CODE_LIST_MANIFEST_ID }, true);
    public static final ForeignKey<CodeListManifestRecord, CodeListManifestRecord> CODE_LIST_MANIFEST_PREV_CODE_LIST_MANIFEST_ID_FK = Internal.createForeignKey(CodeListManifest.CODE_LIST_MANIFEST, DSL.name("code_list_manifest_prev_code_list_manifest_id_fk"), new TableField[] { CodeListManifest.CODE_LIST_MANIFEST.PREV_CODE_LIST_MANIFEST_ID }, Keys.KEY_CODE_LIST_MANIFEST_PRIMARY, new TableField[] { CodeListManifest.CODE_LIST_MANIFEST.CODE_LIST_MANIFEST_ID }, true);
    public static final ForeignKey<CodeListManifestRecord, ReleaseRecord> CODE_LIST_MANIFEST_RELEASE_ID_FK = Internal.createForeignKey(CodeListManifest.CODE_LIST_MANIFEST, DSL.name("code_list_manifest_release_id_fk"), new TableField[] { CodeListManifest.CODE_LIST_MANIFEST.RELEASE_ID }, Keys.KEY_RELEASE_PRIMARY, new TableField[] { Release.RELEASE.RELEASE_ID }, true);
    public static final ForeignKey<CodeListManifestRecord, CodeListManifestRecord> CODE_LIST_REPLACEMENT_CODE_LIST_MANIFEST_ID_FK = Internal.createForeignKey(CodeListManifest.CODE_LIST_MANIFEST, DSL.name("code_list_replacement_code_list_manifest_id_fk"), new TableField[] { CodeListManifest.CODE_LIST_MANIFEST.REPLACEMENT_CODE_LIST_MANIFEST_ID }, Keys.KEY_CODE_LIST_MANIFEST_PRIMARY, new TableField[] { CodeListManifest.CODE_LIST_MANIFEST.CODE_LIST_MANIFEST_ID }, true);
    public static final ForeignKey<CodeListValueRecord, CodeListRecord> CODE_LIST_VALUE_CODE_LIST_ID_FK = Internal.createForeignKey(CodeListValue.CODE_LIST_VALUE, DSL.name("code_list_value_code_list_id_fk"), new TableField[] { CodeListValue.CODE_LIST_VALUE.CODE_LIST_ID }, Keys.KEY_CODE_LIST_PRIMARY, new TableField[] { CodeList.CODE_LIST.CODE_LIST_ID }, true);
    public static final ForeignKey<CodeListValueRecord, AppUserRecord> CODE_LIST_VALUE_CREATED_BY_FK = Internal.createForeignKey(CodeListValue.CODE_LIST_VALUE, DSL.name("code_list_value_created_by_fk"), new TableField[] { CodeListValue.CODE_LIST_VALUE.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<CodeListValueRecord, AppUserRecord> CODE_LIST_VALUE_LAST_UPDATED_BY_FK = Internal.createForeignKey(CodeListValue.CODE_LIST_VALUE, DSL.name("code_list_value_last_updated_by_fk"), new TableField[] { CodeListValue.CODE_LIST_VALUE.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<CodeListValueRecord, CodeListValueRecord> CODE_LIST_VALUE_NEXT_CODE_LIST_VALUE_ID_FK = Internal.createForeignKey(CodeListValue.CODE_LIST_VALUE, DSL.name("code_list_value_next_code_list_value_id_fk"), new TableField[] { CodeListValue.CODE_LIST_VALUE.NEXT_CODE_LIST_VALUE_ID }, Keys.KEY_CODE_LIST_VALUE_PRIMARY, new TableField[] { CodeListValue.CODE_LIST_VALUE.CODE_LIST_VALUE_ID }, true);
    public static final ForeignKey<CodeListValueRecord, AppUserRecord> CODE_LIST_VALUE_OWNER_USER_ID_FK = Internal.createForeignKey(CodeListValue.CODE_LIST_VALUE, DSL.name("code_list_value_owner_user_id_fk"), new TableField[] { CodeListValue.CODE_LIST_VALUE.OWNER_USER_ID }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<CodeListValueRecord, CodeListValueRecord> CODE_LIST_VALUE_PREV_CODE_LIST_VALUE_ID_FK = Internal.createForeignKey(CodeListValue.CODE_LIST_VALUE, DSL.name("code_list_value_prev_code_list_value_id_fk"), new TableField[] { CodeListValue.CODE_LIST_VALUE.PREV_CODE_LIST_VALUE_ID }, Keys.KEY_CODE_LIST_VALUE_PRIMARY, new TableField[] { CodeListValue.CODE_LIST_VALUE.CODE_LIST_VALUE_ID }, true);
    public static final ForeignKey<CodeListValueRecord, CodeListValueRecord> CODE_LIST_VALUE_REPLACEMENT_CODE_LIST_VALUE_ID_FK = Internal.createForeignKey(CodeListValue.CODE_LIST_VALUE, DSL.name("code_list_value_replacement_code_list_value_id_fk"), new TableField[] { CodeListValue.CODE_LIST_VALUE.REPLACEMENT_CODE_LIST_VALUE_ID }, Keys.KEY_CODE_LIST_VALUE_PRIMARY, new TableField[] { CodeListValue.CODE_LIST_VALUE.CODE_LIST_VALUE_ID }, true);
    public static final ForeignKey<CodeListValueManifestRecord, CodeListManifestRecord> CODE_LIST_VALUE_MANIFEST_CODE_LIST_MANIFEST_ID_FK = Internal.createForeignKey(CodeListValueManifest.CODE_LIST_VALUE_MANIFEST, DSL.name("code_list_value_manifest_code_list_manifest_id_fk"), new TableField[] { CodeListValueManifest.CODE_LIST_VALUE_MANIFEST.CODE_LIST_MANIFEST_ID }, Keys.KEY_CODE_LIST_MANIFEST_PRIMARY, new TableField[] { CodeListManifest.CODE_LIST_MANIFEST.CODE_LIST_MANIFEST_ID }, true);
    public static final ForeignKey<CodeListValueManifestRecord, CodeListValueRecord> CODE_LIST_VALUE_MANIFEST_CODE_LIST_VALUE_ID_FK = Internal.createForeignKey(CodeListValueManifest.CODE_LIST_VALUE_MANIFEST, DSL.name("code_list_value_manifest_code_list_value_id_fk"), new TableField[] { CodeListValueManifest.CODE_LIST_VALUE_MANIFEST.CODE_LIST_VALUE_ID }, Keys.KEY_CODE_LIST_VALUE_PRIMARY, new TableField[] { CodeListValue.CODE_LIST_VALUE.CODE_LIST_VALUE_ID }, true);
    public static final ForeignKey<CodeListValueManifestRecord, CodeListValueManifestRecord> CODE_LIST_VALUE_MANIFEST_NEXT_CODE_LIST_VALUE_MANIFEST_ID_FK = Internal.createForeignKey(CodeListValueManifest.CODE_LIST_VALUE_MANIFEST, DSL.name("code_list_value_manifest_next_code_list_value_manifest_id_fk"), new TableField[] { CodeListValueManifest.CODE_LIST_VALUE_MANIFEST.NEXT_CODE_LIST_VALUE_MANIFEST_ID }, Keys.KEY_CODE_LIST_VALUE_MANIFEST_PRIMARY, new TableField[] { CodeListValueManifest.CODE_LIST_VALUE_MANIFEST.CODE_LIST_VALUE_MANIFEST_ID }, true);
    public static final ForeignKey<CodeListValueManifestRecord, CodeListValueManifestRecord> CODE_LIST_VALUE_MANIFEST_PREV_CODE_LIST_VALUE_MANIFEST_ID_FK = Internal.createForeignKey(CodeListValueManifest.CODE_LIST_VALUE_MANIFEST, DSL.name("code_list_value_manifest_prev_code_list_value_manifest_id_fk"), new TableField[] { CodeListValueManifest.CODE_LIST_VALUE_MANIFEST.PREV_CODE_LIST_VALUE_MANIFEST_ID }, Keys.KEY_CODE_LIST_VALUE_MANIFEST_PRIMARY, new TableField[] { CodeListValueManifest.CODE_LIST_VALUE_MANIFEST.CODE_LIST_VALUE_MANIFEST_ID }, true);
    public static final ForeignKey<CodeListValueManifestRecord, ReleaseRecord> CODE_LIST_VALUE_MANIFEST_RELEASE_ID_FK = Internal.createForeignKey(CodeListValueManifest.CODE_LIST_VALUE_MANIFEST, DSL.name("code_list_value_manifest_release_id_fk"), new TableField[] { CodeListValueManifest.CODE_LIST_VALUE_MANIFEST.RELEASE_ID }, Keys.KEY_RELEASE_PRIMARY, new TableField[] { Release.RELEASE.RELEASE_ID }, true);
    public static final ForeignKey<CodeListValueManifestRecord, CodeListValueManifestRecord> CODE_LIST_VALUE_REPLACEMENT_CODE_LIST_VALUE_MANIFEST_ID_FK = Internal.createForeignKey(CodeListValueManifest.CODE_LIST_VALUE_MANIFEST, DSL.name("code_list_value_replacement_code_list_value_manifest_id_fk"), new TableField[] { CodeListValueManifest.CODE_LIST_VALUE_MANIFEST.REPLACEMENT_CODE_LIST_VALUE_MANIFEST_ID }, Keys.KEY_CODE_LIST_VALUE_MANIFEST_PRIMARY, new TableField[] { CodeListValueManifest.CODE_LIST_VALUE_MANIFEST.CODE_LIST_VALUE_MANIFEST_ID }, true);
    public static final ForeignKey<CommentRecord, AppUserRecord> COMMENT_CREATED_BY_FK = Internal.createForeignKey(Comment.COMMENT, DSL.name("comment_created_by_fk"), new TableField[] { Comment.COMMENT.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<CommentRecord, CommentRecord> COMMENT_PREV_COMMENT_ID_FK = Internal.createForeignKey(Comment.COMMENT, DSL.name("comment_prev_comment_id_fk"), new TableField[] { Comment.COMMENT.PREV_COMMENT_ID }, Keys.KEY_COMMENT_PRIMARY, new TableField[] { Comment.COMMENT.COMMENT_ID }, true);
    public static final ForeignKey<CtxCategoryRecord, AppUserRecord> CTX_CATEGORY_CREATED_BY_FK = Internal.createForeignKey(CtxCategory.CTX_CATEGORY, DSL.name("ctx_category_created_by_fk"), new TableField[] { CtxCategory.CTX_CATEGORY.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<CtxCategoryRecord, AppUserRecord> CTX_CATEGORY_LAST_UPDATED_BY_FK = Internal.createForeignKey(CtxCategory.CTX_CATEGORY, DSL.name("ctx_category_last_updated_by_fk"), new TableField[] { CtxCategory.CTX_CATEGORY.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<CtxSchemeRecord, CodeListRecord> CTX_SCHEME_CODE_LIST_ID_FK = Internal.createForeignKey(CtxScheme.CTX_SCHEME, DSL.name("ctx_scheme_code_list_id_fk"), new TableField[] { CtxScheme.CTX_SCHEME.CODE_LIST_ID }, Keys.KEY_CODE_LIST_PRIMARY, new TableField[] { CodeList.CODE_LIST.CODE_LIST_ID }, true);
    public static final ForeignKey<CtxSchemeRecord, AppUserRecord> CTX_SCHEME_CREATED_BY_FK = Internal.createForeignKey(CtxScheme.CTX_SCHEME, DSL.name("ctx_scheme_created_by_fk"), new TableField[] { CtxScheme.CTX_SCHEME.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<CtxSchemeRecord, CtxCategoryRecord> CTX_SCHEME_CTX_CATEGORY_ID_FK = Internal.createForeignKey(CtxScheme.CTX_SCHEME, DSL.name("ctx_scheme_ctx_category_id_fk"), new TableField[] { CtxScheme.CTX_SCHEME.CTX_CATEGORY_ID }, Keys.KEY_CTX_CATEGORY_PRIMARY, new TableField[] { CtxCategory.CTX_CATEGORY.CTX_CATEGORY_ID }, true);
    public static final ForeignKey<CtxSchemeRecord, AppUserRecord> CTX_SCHEME_LAST_UPDATED_BY_FK = Internal.createForeignKey(CtxScheme.CTX_SCHEME, DSL.name("ctx_scheme_last_updated_by_fk"), new TableField[] { CtxScheme.CTX_SCHEME.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<CtxSchemeValueRecord, CtxSchemeRecord> CTX_SCHEME_VALUE_OWNER_CTX_SCHEME_ID_FK = Internal.createForeignKey(CtxSchemeValue.CTX_SCHEME_VALUE, DSL.name("ctx_scheme_value_owner_ctx_scheme_id_fk"), new TableField[] { CtxSchemeValue.CTX_SCHEME_VALUE.OWNER_CTX_SCHEME_ID }, Keys.KEY_CTX_SCHEME_PRIMARY, new TableField[] { CtxScheme.CTX_SCHEME.CTX_SCHEME_ID }, true);
    public static final ForeignKey<DtRecord, DtRecord> DT_BASED_DT_ID_FK = Internal.createForeignKey(Dt.DT, DSL.name("dt_based_dt_id_fk"), new TableField[] { Dt.DT.BASED_DT_ID }, Keys.KEY_DT_PRIMARY, new TableField[] { Dt.DT.DT_ID }, true);
    public static final ForeignKey<DtRecord, AppUserRecord> DT_CREATED_BY_FK = Internal.createForeignKey(Dt.DT, DSL.name("dt_created_by_fk"), new TableField[] { Dt.DT.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<DtRecord, AppUserRecord> DT_LAST_UPDATED_BY_FK = Internal.createForeignKey(Dt.DT, DSL.name("dt_last_updated_by_fk"), new TableField[] { Dt.DT.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<DtRecord, NamespaceRecord> DT_NAMESPACE_ID_FK = Internal.createForeignKey(Dt.DT, DSL.name("dt_namespace_id_fk"), new TableField[] { Dt.DT.NAMESPACE_ID }, Keys.KEY_NAMESPACE_PRIMARY, new TableField[] { Namespace.NAMESPACE.NAMESPACE_ID }, true);
    public static final ForeignKey<DtRecord, DtRecord> DT_NEXT_DT_ID_FK = Internal.createForeignKey(Dt.DT, DSL.name("dt_next_dt_id_fk"), new TableField[] { Dt.DT.NEXT_DT_ID }, Keys.KEY_DT_PRIMARY, new TableField[] { Dt.DT.DT_ID }, true);
    public static final ForeignKey<DtRecord, AppUserRecord> DT_OWNER_USER_ID_FK = Internal.createForeignKey(Dt.DT, DSL.name("dt_owner_user_id_fk"), new TableField[] { Dt.DT.OWNER_USER_ID }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<DtRecord, DtRecord> DT_PREV_DT_ID_FK = Internal.createForeignKey(Dt.DT, DSL.name("dt_prev_dt_id_fk"), new TableField[] { Dt.DT.PREV_DT_ID }, Keys.KEY_DT_PRIMARY, new TableField[] { Dt.DT.DT_ID }, true);
    public static final ForeignKey<DtRecord, DtRecord> DT_PREVIOUS_VERSION_DT_ID_FK = Internal.createForeignKey(Dt.DT, DSL.name("dt_previous_version_dt_id_fk"), new TableField[] { Dt.DT.PREVIOUS_VERSION_DT_ID }, Keys.KEY_DT_PRIMARY, new TableField[] { Dt.DT.DT_ID }, true);
    public static final ForeignKey<DtRecord, DtRecord> DT_REPLACEMENT_DT_ID_FK = Internal.createForeignKey(Dt.DT, DSL.name("dt_replacement_dt_id_fk"), new TableField[] { Dt.DT.REPLACEMENT_DT_ID }, Keys.KEY_DT_PRIMARY, new TableField[] { Dt.DT.DT_ID }, true);
    public static final ForeignKey<DtManifestRecord, DtManifestRecord> DT_MANIFEST_BASED_DT_MANIFEST_ID_FK = Internal.createForeignKey(DtManifest.DT_MANIFEST, DSL.name("dt_manifest_based_dt_manifest_id_fk"), new TableField[] { DtManifest.DT_MANIFEST.BASED_DT_MANIFEST_ID }, Keys.KEY_DT_MANIFEST_PRIMARY, new TableField[] { DtManifest.DT_MANIFEST.DT_MANIFEST_ID }, true);
    public static final ForeignKey<DtManifestRecord, DtRecord> DT_MANIFEST_DT_ID_FK = Internal.createForeignKey(DtManifest.DT_MANIFEST, DSL.name("dt_manifest_dt_id_fk"), new TableField[] { DtManifest.DT_MANIFEST.DT_ID }, Keys.KEY_DT_PRIMARY, new TableField[] { Dt.DT.DT_ID }, true);
    public static final ForeignKey<DtManifestRecord, LogRecord> DT_MANIFEST_LOG_ID_FK = Internal.createForeignKey(DtManifest.DT_MANIFEST, DSL.name("dt_manifest_log_id_fk"), new TableField[] { DtManifest.DT_MANIFEST.LOG_ID }, Keys.KEY_LOG_PRIMARY, new TableField[] { Log.LOG.LOG_ID }, true);
    public static final ForeignKey<DtManifestRecord, DtManifestRecord> DT_MANIFEST_NEXT_DT_MANIFEST_ID_FK = Internal.createForeignKey(DtManifest.DT_MANIFEST, DSL.name("dt_manifest_next_dt_manifest_id_fk"), new TableField[] { DtManifest.DT_MANIFEST.NEXT_DT_MANIFEST_ID }, Keys.KEY_DT_MANIFEST_PRIMARY, new TableField[] { DtManifest.DT_MANIFEST.DT_MANIFEST_ID }, true);
    public static final ForeignKey<DtManifestRecord, DtManifestRecord> DT_MANIFEST_PREV_DT_MANIFEST_ID_FK = Internal.createForeignKey(DtManifest.DT_MANIFEST, DSL.name("dt_manifest_prev_dt_manifest_id_fk"), new TableField[] { DtManifest.DT_MANIFEST.PREV_DT_MANIFEST_ID }, Keys.KEY_DT_MANIFEST_PRIMARY, new TableField[] { DtManifest.DT_MANIFEST.DT_MANIFEST_ID }, true);
    public static final ForeignKey<DtManifestRecord, ReleaseRecord> DT_MANIFEST_RELEASE_ID_FK = Internal.createForeignKey(DtManifest.DT_MANIFEST, DSL.name("dt_manifest_release_id_fk"), new TableField[] { DtManifest.DT_MANIFEST.RELEASE_ID }, Keys.KEY_RELEASE_PRIMARY, new TableField[] { Release.RELEASE.RELEASE_ID }, true);
    public static final ForeignKey<DtManifestRecord, DtManifestRecord> DT_REPLACEMENT_DT_MANIFEST_ID_FK = Internal.createForeignKey(DtManifest.DT_MANIFEST, DSL.name("dt_replacement_dt_manifest_id_fk"), new TableField[] { DtManifest.DT_MANIFEST.REPLACEMENT_DT_MANIFEST_ID }, Keys.KEY_DT_MANIFEST_PRIMARY, new TableField[] { DtManifest.DT_MANIFEST.DT_MANIFEST_ID }, true);
    public static final ForeignKey<DtScRecord, DtScRecord> DT_SC_BASED_DT_SC_ID_FK = Internal.createForeignKey(DtSc.DT_SC, DSL.name("dt_sc_based_dt_sc_id_fk"), new TableField[] { DtSc.DT_SC.BASED_DT_SC_ID }, Keys.KEY_DT_SC_PRIMARY, new TableField[] { DtSc.DT_SC.DT_SC_ID }, true);
    public static final ForeignKey<DtScRecord, DtRecord> DT_SC_OWNER_DT_ID_FK = Internal.createForeignKey(DtSc.DT_SC, DSL.name("dt_sc_owner_dt_id_fk"), new TableField[] { DtSc.DT_SC.OWNER_DT_ID }, Keys.KEY_DT_PRIMARY, new TableField[] { Dt.DT.DT_ID }, true);
    public static final ForeignKey<DtScRecord, DtScRecord> DT_SC_REPLACEMENT_DT_SC_ID_FK = Internal.createForeignKey(DtSc.DT_SC, DSL.name("dt_sc_replacement_dt_sc_id_fk"), new TableField[] { DtSc.DT_SC.REPLACEMENT_DT_SC_ID }, Keys.KEY_DT_SC_PRIMARY, new TableField[] { DtSc.DT_SC.DT_SC_ID }, true);
    public static final ForeignKey<DtScManifestRecord, DtScRecord> DT_SC_MANIFEST_DT_SC_ID_FK = Internal.createForeignKey(DtScManifest.DT_SC_MANIFEST, DSL.name("dt_sc_manifest_dt_sc_id_fk"), new TableField[] { DtScManifest.DT_SC_MANIFEST.DT_SC_ID }, Keys.KEY_DT_SC_PRIMARY, new TableField[] { DtSc.DT_SC.DT_SC_ID }, true);
    public static final ForeignKey<DtScManifestRecord, DtManifestRecord> DT_SC_MANIFEST_OWNER_DT_MANIFEST_ID_FK = Internal.createForeignKey(DtScManifest.DT_SC_MANIFEST, DSL.name("dt_sc_manifest_owner_dt_manifest_id_fk"), new TableField[] { DtScManifest.DT_SC_MANIFEST.OWNER_DT_MANIFEST_ID }, Keys.KEY_DT_MANIFEST_PRIMARY, new TableField[] { DtManifest.DT_MANIFEST.DT_MANIFEST_ID }, true);
    public static final ForeignKey<DtScManifestRecord, ReleaseRecord> DT_SC_MANIFEST_RELEASE_ID_FK = Internal.createForeignKey(DtScManifest.DT_SC_MANIFEST, DSL.name("dt_sc_manifest_release_id_fk"), new TableField[] { DtScManifest.DT_SC_MANIFEST.RELEASE_ID }, Keys.KEY_RELEASE_PRIMARY, new TableField[] { Release.RELEASE.RELEASE_ID }, true);
    public static final ForeignKey<DtScManifestRecord, DtScManifestRecord> DT_SC_NEXT_DT_SC_MANIFEST_ID_FK = Internal.createForeignKey(DtScManifest.DT_SC_MANIFEST, DSL.name("dt_sc_next_dt_sc_manifest_id_fk"), new TableField[] { DtScManifest.DT_SC_MANIFEST.NEXT_DT_SC_MANIFEST_ID }, Keys.KEY_DT_SC_MANIFEST_PRIMARY, new TableField[] { DtScManifest.DT_SC_MANIFEST.DT_SC_MANIFEST_ID }, true);
    public static final ForeignKey<DtScManifestRecord, DtScManifestRecord> DT_SC_PREV_DT_SC_MANIFEST_ID_FK = Internal.createForeignKey(DtScManifest.DT_SC_MANIFEST, DSL.name("dt_sc_prev_dt_sc_manifest_id_fk"), new TableField[] { DtScManifest.DT_SC_MANIFEST.PREV_DT_SC_MANIFEST_ID }, Keys.KEY_DT_SC_MANIFEST_PRIMARY, new TableField[] { DtScManifest.DT_SC_MANIFEST.DT_SC_MANIFEST_ID }, true);
    public static final ForeignKey<DtScManifestRecord, DtScManifestRecord> DT_SC_REPLACEMENT_DT_SC_MANIFEST_ID_FK = Internal.createForeignKey(DtScManifest.DT_SC_MANIFEST, DSL.name("dt_sc_replacement_dt_sc_manifest_id_fk"), new TableField[] { DtScManifest.DT_SC_MANIFEST.REPLACEMENT_DT_SC_MANIFEST_ID }, Keys.KEY_DT_SC_MANIFEST_PRIMARY, new TableField[] { DtScManifest.DT_SC_MANIFEST.DT_SC_MANIFEST_ID }, true);
    public static final ForeignKey<DtUsageRuleRecord, UsageRuleRecord> DT_USAGE_RULE_ASSIGNED_USAGE_RULE_ID_FK = Internal.createForeignKey(DtUsageRule.DT_USAGE_RULE, DSL.name("dt_usage_rule_assigned_usage_rule_id_fk"), new TableField[] { DtUsageRule.DT_USAGE_RULE.ASSIGNED_USAGE_RULE_ID }, Keys.KEY_USAGE_RULE_PRIMARY, new TableField[] { UsageRule.USAGE_RULE.USAGE_RULE_ID }, true);
    public static final ForeignKey<DtUsageRuleRecord, DtRecord> DT_USAGE_RULE_TARGET_DT_ID_FK = Internal.createForeignKey(DtUsageRule.DT_USAGE_RULE, DSL.name("dt_usage_rule_target_dt_id_fk"), new TableField[] { DtUsageRule.DT_USAGE_RULE.TARGET_DT_ID }, Keys.KEY_DT_PRIMARY, new TableField[] { Dt.DT.DT_ID }, true);
    public static final ForeignKey<DtUsageRuleRecord, DtScRecord> DT_USAGE_RULE_TARGET_DT_SC_ID_FK = Internal.createForeignKey(DtUsageRule.DT_USAGE_RULE, DSL.name("dt_usage_rule_target_dt_sc_id_fk"), new TableField[] { DtUsageRule.DT_USAGE_RULE.TARGET_DT_SC_ID }, Keys.KEY_DT_SC_PRIMARY, new TableField[] { DtSc.DT_SC.DT_SC_ID }, true);
    public static final ForeignKey<ExceptionRecord, AppUserRecord> EXCEPTION_CREATED_BY_FK = Internal.createForeignKey(Exception.EXCEPTION, DSL.name("exception_created_by_fk"), new TableField[] { Exception.EXCEPTION.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<LogRecord, AppUserRecord> LOG_CREATED_BY_FK = Internal.createForeignKey(Log.LOG, DSL.name("log_created_by_fk"), new TableField[] { Log.LOG.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<LogRecord, LogRecord> LOG_NEXT_LOG_ID_FK = Internal.createForeignKey(Log.LOG, DSL.name("log_next_log_id_fk"), new TableField[] { Log.LOG.NEXT_LOG_ID }, Keys.KEY_LOG_PRIMARY, new TableField[] { Log.LOG.LOG_ID }, true);
    public static final ForeignKey<LogRecord, LogRecord> LOG_PREV_LOG_ID_FK = Internal.createForeignKey(Log.LOG, DSL.name("log_prev_log_id_fk"), new TableField[] { Log.LOG.PREV_LOG_ID }, Keys.KEY_LOG_PRIMARY, new TableField[] { Log.LOG.LOG_ID }, true);
    public static final ForeignKey<MessageRecord, AppUserRecord> MESSAGE_RECIPIENT_ID_FK = Internal.createForeignKey(Message.MESSAGE, DSL.name("message_recipient_id_fk"), new TableField[] { Message.MESSAGE.RECIPIENT_ID }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<MessageRecord, AppUserRecord> MESSAGE_SENDER_ID_FK = Internal.createForeignKey(Message.MESSAGE, DSL.name("message_sender_id_fk"), new TableField[] { Message.MESSAGE.SENDER_ID }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleRecord, AppUserRecord> MODULE_CREATED_BY_FK = Internal.createForeignKey(Module.MODULE, DSL.name("module_created_by_fk"), new TableField[] { Module.MODULE.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleRecord, AppUserRecord> MODULE_LAST_UPDATED_BY_FK = Internal.createForeignKey(Module.MODULE, DSL.name("module_last_updated_by_fk"), new TableField[] { Module.MODULE.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleRecord, ModuleSetRecord> MODULE_MODULE_SET_ID_FK = Internal.createForeignKey(Module.MODULE, DSL.name("module_module_set_id_fk"), new TableField[] { Module.MODULE.MODULE_SET_ID }, Keys.KEY_MODULE_SET_PRIMARY, new TableField[] { ModuleSet.MODULE_SET.MODULE_SET_ID }, true);
    public static final ForeignKey<ModuleRecord, NamespaceRecord> MODULE_NAMESPACE_ID_FK = Internal.createForeignKey(Module.MODULE, DSL.name("module_namespace_id_fk"), new TableField[] { Module.MODULE.NAMESPACE_ID }, Keys.KEY_NAMESPACE_PRIMARY, new TableField[] { Namespace.NAMESPACE.NAMESPACE_ID }, true);
    public static final ForeignKey<ModuleRecord, AppUserRecord> MODULE_OWNER_USER_ID_FK = Internal.createForeignKey(Module.MODULE, DSL.name("module_owner_user_id_fk"), new TableField[] { Module.MODULE.OWNER_USER_ID }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleRecord, ModuleRecord> MODULE_PARENT_MODULE_ID_FK = Internal.createForeignKey(Module.MODULE, DSL.name("module_parent_module_id_fk"), new TableField[] { Module.MODULE.PARENT_MODULE_ID }, Keys.KEY_MODULE_PRIMARY, new TableField[] { Module.MODULE.MODULE_ID }, true);
    public static final ForeignKey<ModuleAccManifestRecord, AccManifestRecord> MODULE_ACC_MANIFEST_ACC_MANIFEST_ID_FK = Internal.createForeignKey(ModuleAccManifest.MODULE_ACC_MANIFEST, DSL.name("module_acc_manifest_acc_manifest_id_fk"), new TableField[] { ModuleAccManifest.MODULE_ACC_MANIFEST.ACC_MANIFEST_ID }, Keys.KEY_ACC_MANIFEST_PRIMARY, new TableField[] { AccManifest.ACC_MANIFEST.ACC_MANIFEST_ID }, true);
    public static final ForeignKey<ModuleAccManifestRecord, AppUserRecord> MODULE_ACC_MANIFEST_CREATED_BY_FK = Internal.createForeignKey(ModuleAccManifest.MODULE_ACC_MANIFEST, DSL.name("module_acc_manifest_created_by_fk"), new TableField[] { ModuleAccManifest.MODULE_ACC_MANIFEST.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleAccManifestRecord, AppUserRecord> MODULE_ACC_MANIFEST_LAST_UPDATED_BY_FK = Internal.createForeignKey(ModuleAccManifest.MODULE_ACC_MANIFEST, DSL.name("module_acc_manifest_last_updated_by_fk"), new TableField[] { ModuleAccManifest.MODULE_ACC_MANIFEST.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleAccManifestRecord, ModuleRecord> MODULE_ACC_MANIFEST_MODULE_ID_FK = Internal.createForeignKey(ModuleAccManifest.MODULE_ACC_MANIFEST, DSL.name("module_acc_manifest_module_id_fk"), new TableField[] { ModuleAccManifest.MODULE_ACC_MANIFEST.MODULE_ID }, Keys.KEY_MODULE_PRIMARY, new TableField[] { Module.MODULE.MODULE_ID }, true);
    public static final ForeignKey<ModuleAccManifestRecord, ModuleSetReleaseRecord> MODULE_ACC_MANIFEST_MODULE_SET_RELEASE_ID_FK = Internal.createForeignKey(ModuleAccManifest.MODULE_ACC_MANIFEST, DSL.name("module_acc_manifest_module_set_release_id_fk"), new TableField[] { ModuleAccManifest.MODULE_ACC_MANIFEST.MODULE_SET_RELEASE_ID }, Keys.KEY_MODULE_SET_RELEASE_PRIMARY, new TableField[] { ModuleSetRelease.MODULE_SET_RELEASE.MODULE_SET_RELEASE_ID }, true);
    public static final ForeignKey<ModuleAgencyIdListManifestRecord, AgencyIdListManifestRecord> MODULE_AGENCY_ID_LIST_MANIFEST_AGENCY_ID_LIST_MANIFEST_ID_FK = Internal.createForeignKey(ModuleAgencyIdListManifest.MODULE_AGENCY_ID_LIST_MANIFEST, DSL.name("module_agency_id_list_manifest_agency_id_list_manifest_id_fk"), new TableField[] { ModuleAgencyIdListManifest.MODULE_AGENCY_ID_LIST_MANIFEST.AGENCY_ID_LIST_MANIFEST_ID }, Keys.KEY_AGENCY_ID_LIST_MANIFEST_PRIMARY, new TableField[] { AgencyIdListManifest.AGENCY_ID_LIST_MANIFEST.AGENCY_ID_LIST_MANIFEST_ID }, true);
    public static final ForeignKey<ModuleAgencyIdListManifestRecord, AppUserRecord> MODULE_AGENCY_ID_LIST_MANIFEST_CREATED_BY_FK = Internal.createForeignKey(ModuleAgencyIdListManifest.MODULE_AGENCY_ID_LIST_MANIFEST, DSL.name("module_agency_id_list_manifest_created_by_fk"), new TableField[] { ModuleAgencyIdListManifest.MODULE_AGENCY_ID_LIST_MANIFEST.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleAgencyIdListManifestRecord, AppUserRecord> MODULE_AGENCY_ID_LIST_MANIFEST_LAST_UPDATED_BY_FK = Internal.createForeignKey(ModuleAgencyIdListManifest.MODULE_AGENCY_ID_LIST_MANIFEST, DSL.name("module_agency_id_list_manifest_last_updated_by_fk"), new TableField[] { ModuleAgencyIdListManifest.MODULE_AGENCY_ID_LIST_MANIFEST.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleAgencyIdListManifestRecord, ModuleRecord> MODULE_AGENCY_ID_LIST_MANIFEST_MODULE_ID_FK = Internal.createForeignKey(ModuleAgencyIdListManifest.MODULE_AGENCY_ID_LIST_MANIFEST, DSL.name("module_agency_id_list_manifest_module_id_fk"), new TableField[] { ModuleAgencyIdListManifest.MODULE_AGENCY_ID_LIST_MANIFEST.MODULE_ID }, Keys.KEY_MODULE_PRIMARY, new TableField[] { Module.MODULE.MODULE_ID }, true);
    public static final ForeignKey<ModuleAgencyIdListManifestRecord, ModuleSetReleaseRecord> MODULE_AGENCY_ID_LIST_MANIFEST_MODULE_SET_RELEASE_ID_FK = Internal.createForeignKey(ModuleAgencyIdListManifest.MODULE_AGENCY_ID_LIST_MANIFEST, DSL.name("module_agency_id_list_manifest_module_set_release_id_fk"), new TableField[] { ModuleAgencyIdListManifest.MODULE_AGENCY_ID_LIST_MANIFEST.MODULE_SET_RELEASE_ID }, Keys.KEY_MODULE_SET_RELEASE_PRIMARY, new TableField[] { ModuleSetRelease.MODULE_SET_RELEASE.MODULE_SET_RELEASE_ID }, true);
    public static final ForeignKey<ModuleAsccpManifestRecord, AsccpManifestRecord> MODULE_ASCCP_MANIFEST_ASCCP_MANIFEST_ID_FK = Internal.createForeignKey(ModuleAsccpManifest.MODULE_ASCCP_MANIFEST, DSL.name("module_asccp_manifest_asccp_manifest_id_fk"), new TableField[] { ModuleAsccpManifest.MODULE_ASCCP_MANIFEST.ASCCP_MANIFEST_ID }, Keys.KEY_ASCCP_MANIFEST_PRIMARY, new TableField[] { AsccpManifest.ASCCP_MANIFEST.ASCCP_MANIFEST_ID }, true);
    public static final ForeignKey<ModuleAsccpManifestRecord, AppUserRecord> MODULE_ASCCP_MANIFEST_CREATED_BY_FK = Internal.createForeignKey(ModuleAsccpManifest.MODULE_ASCCP_MANIFEST, DSL.name("module_asccp_manifest_created_by_fk"), new TableField[] { ModuleAsccpManifest.MODULE_ASCCP_MANIFEST.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleAsccpManifestRecord, AppUserRecord> MODULE_ASCCP_MANIFEST_LAST_UPDATED_BY_FK = Internal.createForeignKey(ModuleAsccpManifest.MODULE_ASCCP_MANIFEST, DSL.name("module_asccp_manifest_last_updated_by_fk"), new TableField[] { ModuleAsccpManifest.MODULE_ASCCP_MANIFEST.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleAsccpManifestRecord, ModuleRecord> MODULE_ASCCP_MANIFEST_MODULE_ID_FK = Internal.createForeignKey(ModuleAsccpManifest.MODULE_ASCCP_MANIFEST, DSL.name("module_asccp_manifest_module_id_fk"), new TableField[] { ModuleAsccpManifest.MODULE_ASCCP_MANIFEST.MODULE_ID }, Keys.KEY_MODULE_PRIMARY, new TableField[] { Module.MODULE.MODULE_ID }, true);
    public static final ForeignKey<ModuleAsccpManifestRecord, ModuleSetReleaseRecord> MODULE_ASCCP_MANIFEST_MODULE_SET_RELEASE_ID_FK = Internal.createForeignKey(ModuleAsccpManifest.MODULE_ASCCP_MANIFEST, DSL.name("module_asccp_manifest_module_set_release_id_fk"), new TableField[] { ModuleAsccpManifest.MODULE_ASCCP_MANIFEST.MODULE_SET_RELEASE_ID }, Keys.KEY_MODULE_SET_RELEASE_PRIMARY, new TableField[] { ModuleSetRelease.MODULE_SET_RELEASE.MODULE_SET_RELEASE_ID }, true);
    public static final ForeignKey<ModuleBccpManifestRecord, BccpManifestRecord> MODULE_BCCP_MANIFEST_BCCP_MANIFEST_ID_FK = Internal.createForeignKey(ModuleBccpManifest.MODULE_BCCP_MANIFEST, DSL.name("module_bccp_manifest_bccp_manifest_id_fk"), new TableField[] { ModuleBccpManifest.MODULE_BCCP_MANIFEST.BCCP_MANIFEST_ID }, Keys.KEY_BCCP_MANIFEST_PRIMARY, new TableField[] { BccpManifest.BCCP_MANIFEST.BCCP_MANIFEST_ID }, true);
    public static final ForeignKey<ModuleBccpManifestRecord, AppUserRecord> MODULE_BCCP_MANIFEST_CREATED_BY_FK = Internal.createForeignKey(ModuleBccpManifest.MODULE_BCCP_MANIFEST, DSL.name("module_bccp_manifest_created_by_fk"), new TableField[] { ModuleBccpManifest.MODULE_BCCP_MANIFEST.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleBccpManifestRecord, AppUserRecord> MODULE_BCCP_MANIFEST_LAST_UPDATED_BY_FK = Internal.createForeignKey(ModuleBccpManifest.MODULE_BCCP_MANIFEST, DSL.name("module_bccp_manifest_last_updated_by_fk"), new TableField[] { ModuleBccpManifest.MODULE_BCCP_MANIFEST.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleBccpManifestRecord, ModuleRecord> MODULE_BCCP_MANIFEST_MODULE_ID_FK = Internal.createForeignKey(ModuleBccpManifest.MODULE_BCCP_MANIFEST, DSL.name("module_bccp_manifest_module_id_fk"), new TableField[] { ModuleBccpManifest.MODULE_BCCP_MANIFEST.MODULE_ID }, Keys.KEY_MODULE_PRIMARY, new TableField[] { Module.MODULE.MODULE_ID }, true);
    public static final ForeignKey<ModuleBccpManifestRecord, ModuleSetReleaseRecord> MODULE_BCCP_MANIFEST_MODULE_SET_RELEASE_ID_FK = Internal.createForeignKey(ModuleBccpManifest.MODULE_BCCP_MANIFEST, DSL.name("module_bccp_manifest_module_set_release_id_fk"), new TableField[] { ModuleBccpManifest.MODULE_BCCP_MANIFEST.MODULE_SET_RELEASE_ID }, Keys.KEY_MODULE_SET_RELEASE_PRIMARY, new TableField[] { ModuleSetRelease.MODULE_SET_RELEASE.MODULE_SET_RELEASE_ID }, true);
    public static final ForeignKey<ModuleBlobContentManifestRecord, BlobContentManifestRecord> MODULE_BLOB_CONTENT_MANIFEST_ACC_MANIFEST_ID_FK = Internal.createForeignKey(ModuleBlobContentManifest.MODULE_BLOB_CONTENT_MANIFEST, DSL.name("module_blob_content_manifest_acc_manifest_id_fk"), new TableField[] { ModuleBlobContentManifest.MODULE_BLOB_CONTENT_MANIFEST.BLOB_CONTENT_MANIFEST_ID }, Keys.KEY_BLOB_CONTENT_MANIFEST_PRIMARY, new TableField[] { BlobContentManifest.BLOB_CONTENT_MANIFEST.BLOB_CONTENT_MANIFEST_ID }, true);
    public static final ForeignKey<ModuleBlobContentManifestRecord, AppUserRecord> MODULE_BLOB_CONTENT_MANIFEST_CREATED_BY_FK = Internal.createForeignKey(ModuleBlobContentManifest.MODULE_BLOB_CONTENT_MANIFEST, DSL.name("module_blob_content_manifest_created_by_fk"), new TableField[] { ModuleBlobContentManifest.MODULE_BLOB_CONTENT_MANIFEST.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleBlobContentManifestRecord, AppUserRecord> MODULE_BLOB_CONTENT_MANIFEST_LAST_UPDATED_BY_FK = Internal.createForeignKey(ModuleBlobContentManifest.MODULE_BLOB_CONTENT_MANIFEST, DSL.name("module_blob_content_manifest_last_updated_by_fk"), new TableField[] { ModuleBlobContentManifest.MODULE_BLOB_CONTENT_MANIFEST.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleBlobContentManifestRecord, ModuleRecord> MODULE_BLOB_CONTENT_MANIFEST_MODULE_ID_FK = Internal.createForeignKey(ModuleBlobContentManifest.MODULE_BLOB_CONTENT_MANIFEST, DSL.name("module_blob_content_manifest_module_id_fk"), new TableField[] { ModuleBlobContentManifest.MODULE_BLOB_CONTENT_MANIFEST.MODULE_ID }, Keys.KEY_MODULE_PRIMARY, new TableField[] { Module.MODULE.MODULE_ID }, true);
    public static final ForeignKey<ModuleBlobContentManifestRecord, ModuleSetReleaseRecord> MODULE_BLOB_CONTENT_MANIFEST_MODULE_SET_RELEASE_ID_FK = Internal.createForeignKey(ModuleBlobContentManifest.MODULE_BLOB_CONTENT_MANIFEST, DSL.name("module_blob_content_manifest_module_set_release_id_fk"), new TableField[] { ModuleBlobContentManifest.MODULE_BLOB_CONTENT_MANIFEST.MODULE_SET_RELEASE_ID }, Keys.KEY_MODULE_SET_RELEASE_PRIMARY, new TableField[] { ModuleSetRelease.MODULE_SET_RELEASE.MODULE_SET_RELEASE_ID }, true);
    public static final ForeignKey<ModuleCodeListManifestRecord, CodeListManifestRecord> MODULE_CODE_LIST_MANIFEST_CODE_LIST_MANIFEST_ID_FK = Internal.createForeignKey(ModuleCodeListManifest.MODULE_CODE_LIST_MANIFEST, DSL.name("module_code_list_manifest_code_list_manifest_id_fk"), new TableField[] { ModuleCodeListManifest.MODULE_CODE_LIST_MANIFEST.CODE_LIST_MANIFEST_ID }, Keys.KEY_CODE_LIST_MANIFEST_PRIMARY, new TableField[] { CodeListManifest.CODE_LIST_MANIFEST.CODE_LIST_MANIFEST_ID }, true);
    public static final ForeignKey<ModuleCodeListManifestRecord, AppUserRecord> MODULE_CODE_LIST_MANIFEST_CREATED_BY_FK = Internal.createForeignKey(ModuleCodeListManifest.MODULE_CODE_LIST_MANIFEST, DSL.name("module_code_list_manifest_created_by_fk"), new TableField[] { ModuleCodeListManifest.MODULE_CODE_LIST_MANIFEST.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleCodeListManifestRecord, AppUserRecord> MODULE_CODE_LIST_MANIFEST_LAST_UPDATED_BY_FK = Internal.createForeignKey(ModuleCodeListManifest.MODULE_CODE_LIST_MANIFEST, DSL.name("module_code_list_manifest_last_updated_by_fk"), new TableField[] { ModuleCodeListManifest.MODULE_CODE_LIST_MANIFEST.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleCodeListManifestRecord, ModuleRecord> MODULE_CODE_LIST_MANIFEST_MODULE_ID_FK = Internal.createForeignKey(ModuleCodeListManifest.MODULE_CODE_LIST_MANIFEST, DSL.name("module_code_list_manifest_module_id_fk"), new TableField[] { ModuleCodeListManifest.MODULE_CODE_LIST_MANIFEST.MODULE_ID }, Keys.KEY_MODULE_PRIMARY, new TableField[] { Module.MODULE.MODULE_ID }, true);
    public static final ForeignKey<ModuleCodeListManifestRecord, ModuleSetReleaseRecord> MODULE_CODE_LIST_MANIFEST_MODULE_SET_RELEASE_ID_FK = Internal.createForeignKey(ModuleCodeListManifest.MODULE_CODE_LIST_MANIFEST, DSL.name("module_code_list_manifest_module_set_release_id_fk"), new TableField[] { ModuleCodeListManifest.MODULE_CODE_LIST_MANIFEST.MODULE_SET_RELEASE_ID }, Keys.KEY_MODULE_SET_RELEASE_PRIMARY, new TableField[] { ModuleSetRelease.MODULE_SET_RELEASE.MODULE_SET_RELEASE_ID }, true);
    public static final ForeignKey<ModuleDtManifestRecord, AppUserRecord> MODULE_DT_MANIFEST_CREATED_BY_FK = Internal.createForeignKey(ModuleDtManifest.MODULE_DT_MANIFEST, DSL.name("module_dt_manifest_created_by_fk"), new TableField[] { ModuleDtManifest.MODULE_DT_MANIFEST.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleDtManifestRecord, DtManifestRecord> MODULE_DT_MANIFEST_DT_MANIFEST_ID_FK = Internal.createForeignKey(ModuleDtManifest.MODULE_DT_MANIFEST, DSL.name("module_dt_manifest_dt_manifest_id_fk"), new TableField[] { ModuleDtManifest.MODULE_DT_MANIFEST.DT_MANIFEST_ID }, Keys.KEY_DT_MANIFEST_PRIMARY, new TableField[] { DtManifest.DT_MANIFEST.DT_MANIFEST_ID }, true);
    public static final ForeignKey<ModuleDtManifestRecord, AppUserRecord> MODULE_DT_MANIFEST_LAST_UPDATED_BY_FK = Internal.createForeignKey(ModuleDtManifest.MODULE_DT_MANIFEST, DSL.name("module_dt_manifest_last_updated_by_fk"), new TableField[] { ModuleDtManifest.MODULE_DT_MANIFEST.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleDtManifestRecord, ModuleRecord> MODULE_DT_MANIFEST_MODULE_ID_FK = Internal.createForeignKey(ModuleDtManifest.MODULE_DT_MANIFEST, DSL.name("module_dt_manifest_module_id_fk"), new TableField[] { ModuleDtManifest.MODULE_DT_MANIFEST.MODULE_ID }, Keys.KEY_MODULE_PRIMARY, new TableField[] { Module.MODULE.MODULE_ID }, true);
    public static final ForeignKey<ModuleDtManifestRecord, ModuleSetReleaseRecord> MODULE_DT_MANIFEST_MODULE_SET_RELEASE_ID_FK = Internal.createForeignKey(ModuleDtManifest.MODULE_DT_MANIFEST, DSL.name("module_dt_manifest_module_set_release_id_fk"), new TableField[] { ModuleDtManifest.MODULE_DT_MANIFEST.MODULE_SET_RELEASE_ID }, Keys.KEY_MODULE_SET_RELEASE_PRIMARY, new TableField[] { ModuleSetRelease.MODULE_SET_RELEASE.MODULE_SET_RELEASE_ID }, true);
    public static final ForeignKey<ModuleSetRecord, AppUserRecord> MODULE_SET_CREATED_BY_FK = Internal.createForeignKey(ModuleSet.MODULE_SET, DSL.name("module_set_created_by_fk"), new TableField[] { ModuleSet.MODULE_SET.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleSetRecord, AppUserRecord> MODULE_SET_LAST_UPDATED_BY_FK = Internal.createForeignKey(ModuleSet.MODULE_SET, DSL.name("module_set_last_updated_by_fk"), new TableField[] { ModuleSet.MODULE_SET.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleSetReleaseRecord, AppUserRecord> MODULE_SET_RELEASE_ASSIGNMENT_CREATED_BY_FK = Internal.createForeignKey(ModuleSetRelease.MODULE_SET_RELEASE, DSL.name("module_set_release_assignment_created_by_fk"), new TableField[] { ModuleSetRelease.MODULE_SET_RELEASE.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleSetReleaseRecord, AppUserRecord> MODULE_SET_RELEASE_ASSIGNMENT_LAST_UPDATED_BY_FK = Internal.createForeignKey(ModuleSetRelease.MODULE_SET_RELEASE, DSL.name("module_set_release_assignment_last_updated_by_fk"), new TableField[] { ModuleSetRelease.MODULE_SET_RELEASE.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleSetReleaseRecord, ModuleSetRecord> MODULE_SET_RELEASE_MODULE_SET_ID_FK = Internal.createForeignKey(ModuleSetRelease.MODULE_SET_RELEASE, DSL.name("module_set_release_module_set_id_fk"), new TableField[] { ModuleSetRelease.MODULE_SET_RELEASE.MODULE_SET_ID }, Keys.KEY_MODULE_SET_PRIMARY, new TableField[] { ModuleSet.MODULE_SET.MODULE_SET_ID }, true);
    public static final ForeignKey<ModuleSetReleaseRecord, ReleaseRecord> MODULE_SET_RELEASE_RELEASE_ID_FK = Internal.createForeignKey(ModuleSetRelease.MODULE_SET_RELEASE, DSL.name("module_set_release_release_id_fk"), new TableField[] { ModuleSetRelease.MODULE_SET_RELEASE.RELEASE_ID }, Keys.KEY_RELEASE_PRIMARY, new TableField[] { Release.RELEASE.RELEASE_ID }, true);
    public static final ForeignKey<ModuleXbtManifestRecord, XbtManifestRecord> MODULE_XBT_MANIFEST_BCCP_MANIFEST_ID_FK = Internal.createForeignKey(ModuleXbtManifest.MODULE_XBT_MANIFEST, DSL.name("module_xbt_manifest_bccp_manifest_id_fk"), new TableField[] { ModuleXbtManifest.MODULE_XBT_MANIFEST.XBT_MANIFEST_ID }, Keys.KEY_XBT_MANIFEST_PRIMARY, new TableField[] { XbtManifest.XBT_MANIFEST.XBT_MANIFEST_ID }, true);
    public static final ForeignKey<ModuleXbtManifestRecord, AppUserRecord> MODULE_XBT_MANIFEST_CREATED_BY_FK = Internal.createForeignKey(ModuleXbtManifest.MODULE_XBT_MANIFEST, DSL.name("module_xbt_manifest_created_by_fk"), new TableField[] { ModuleXbtManifest.MODULE_XBT_MANIFEST.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleXbtManifestRecord, AppUserRecord> MODULE_XBT_MANIFEST_LAST_UPDATED_BY_FK = Internal.createForeignKey(ModuleXbtManifest.MODULE_XBT_MANIFEST, DSL.name("module_xbt_manifest_last_updated_by_fk"), new TableField[] { ModuleXbtManifest.MODULE_XBT_MANIFEST.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ModuleXbtManifestRecord, ModuleRecord> MODULE_XBT_MANIFEST_MODULE_ID_FK = Internal.createForeignKey(ModuleXbtManifest.MODULE_XBT_MANIFEST, DSL.name("module_xbt_manifest_module_id_fk"), new TableField[] { ModuleXbtManifest.MODULE_XBT_MANIFEST.MODULE_ID }, Keys.KEY_MODULE_PRIMARY, new TableField[] { Module.MODULE.MODULE_ID }, true);
    public static final ForeignKey<ModuleXbtManifestRecord, ModuleSetReleaseRecord> MODULE_XBT_MANIFEST_MODULE_SET_RELEASE_ID_FK = Internal.createForeignKey(ModuleXbtManifest.MODULE_XBT_MANIFEST, DSL.name("module_xbt_manifest_module_set_release_id_fk"), new TableField[] { ModuleXbtManifest.MODULE_XBT_MANIFEST.MODULE_SET_RELEASE_ID }, Keys.KEY_MODULE_SET_RELEASE_PRIMARY, new TableField[] { ModuleSetRelease.MODULE_SET_RELEASE.MODULE_SET_RELEASE_ID }, true);
    public static final ForeignKey<NamespaceRecord, AppUserRecord> NAMESPACE_CREATED_BY_FK = Internal.createForeignKey(Namespace.NAMESPACE, DSL.name("namespace_created_by_fk"), new TableField[] { Namespace.NAMESPACE.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<NamespaceRecord, AppUserRecord> NAMESPACE_LAST_UPDATED_BY_FK = Internal.createForeignKey(Namespace.NAMESPACE, DSL.name("namespace_last_updated_by_fk"), new TableField[] { Namespace.NAMESPACE.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<NamespaceRecord, AppUserRecord> NAMESPACE_OWNER_USER_ID_FK = Internal.createForeignKey(Namespace.NAMESPACE, DSL.name("namespace_owner_user_id_fk"), new TableField[] { Namespace.NAMESPACE.OWNER_USER_ID }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<Oauth2AppScopeRecord, Oauth2AppRecord> OAUTH2_APP_SCOPE_OAUTH2_APP_ID_FK = Internal.createForeignKey(Oauth2AppScope.OAUTH2_APP_SCOPE, DSL.name("oauth2_app_scope_oauth2_app_id_fk"), new TableField[] { Oauth2AppScope.OAUTH2_APP_SCOPE.OAUTH2_APP_ID }, Keys.KEY_OAUTH2_APP_PRIMARY, new TableField[] { Oauth2App.OAUTH2_APP.OAUTH2_APP_ID }, true);
    public static final ForeignKey<ReleaseRecord, AppUserRecord> RELEASE_CREATED_BY_FK = Internal.createForeignKey(Release.RELEASE, DSL.name("release_created_by_fk"), new TableField[] { Release.RELEASE.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ReleaseRecord, AppUserRecord> RELEASE_LAST_UPDATED_BY_FK = Internal.createForeignKey(Release.RELEASE, DSL.name("release_last_updated_by_fk"), new TableField[] { Release.RELEASE.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<ReleaseRecord, NamespaceRecord> RELEASE_NAMESPACE_ID_FK = Internal.createForeignKey(Release.RELEASE, DSL.name("release_namespace_id_fk"), new TableField[] { Release.RELEASE.NAMESPACE_ID }, Keys.KEY_NAMESPACE_PRIMARY, new TableField[] { Namespace.NAMESPACE.NAMESPACE_ID }, true);
    public static final ForeignKey<SeqKeyRecord, AsccManifestRecord> SEQ_KEY_ASCC_MANIFEST_ID_FK = Internal.createForeignKey(SeqKey.SEQ_KEY, DSL.name("seq_key_ascc_manifest_id_fk"), new TableField[] { SeqKey.SEQ_KEY.ASCC_MANIFEST_ID }, Keys.KEY_ASCC_MANIFEST_PRIMARY, new TableField[] { AsccManifest.ASCC_MANIFEST.ASCC_MANIFEST_ID }, true);
    public static final ForeignKey<SeqKeyRecord, BccManifestRecord> SEQ_KEY_BCC_MANIFEST_ID_FK = Internal.createForeignKey(SeqKey.SEQ_KEY, DSL.name("seq_key_bcc_manifest_id_fk"), new TableField[] { SeqKey.SEQ_KEY.BCC_MANIFEST_ID }, Keys.KEY_BCC_MANIFEST_PRIMARY, new TableField[] { BccManifest.BCC_MANIFEST.BCC_MANIFEST_ID }, true);
    public static final ForeignKey<SeqKeyRecord, AccManifestRecord> SEQ_KEY_FROM_ACC_MANIFEST_ID_FK = Internal.createForeignKey(SeqKey.SEQ_KEY, DSL.name("seq_key_from_acc_manifest_id_fk"), new TableField[] { SeqKey.SEQ_KEY.FROM_ACC_MANIFEST_ID }, Keys.KEY_ACC_MANIFEST_PRIMARY, new TableField[] { AccManifest.ACC_MANIFEST.ACC_MANIFEST_ID }, true);
    public static final ForeignKey<SeqKeyRecord, SeqKeyRecord> SEQ_KEY_NEXT_SEQ_KEY_ID_FK = Internal.createForeignKey(SeqKey.SEQ_KEY, DSL.name("seq_key_next_seq_key_id_fk"), new TableField[] { SeqKey.SEQ_KEY.NEXT_SEQ_KEY_ID }, Keys.KEY_SEQ_KEY_PRIMARY, new TableField[] { SeqKey.SEQ_KEY.SEQ_KEY_ID }, true);
    public static final ForeignKey<SeqKeyRecord, SeqKeyRecord> SEQ_KEY_PREV_SEQ_KEY_ID_FK = Internal.createForeignKey(SeqKey.SEQ_KEY, DSL.name("seq_key_prev_seq_key_id_fk"), new TableField[] { SeqKey.SEQ_KEY.PREV_SEQ_KEY_ID }, Keys.KEY_SEQ_KEY_PRIMARY, new TableField[] { SeqKey.SEQ_KEY.SEQ_KEY_ID }, true);
    public static final ForeignKey<TopLevelAsbiepRecord, AsbiepRecord> TOP_LEVEL_ASBIEP_ASBIEP_ID_FK = Internal.createForeignKey(TopLevelAsbiep.TOP_LEVEL_ASBIEP, DSL.name("top_level_asbiep_asbiep_id_fk"), new TableField[] { TopLevelAsbiep.TOP_LEVEL_ASBIEP.ASBIEP_ID }, Keys.KEY_ASBIEP_PRIMARY, new TableField[] { Asbiep.ASBIEP.ASBIEP_ID }, true);
    public static final ForeignKey<TopLevelAsbiepRecord, AppUserRecord> TOP_LEVEL_ASBIEP_LAST_UPDATED_BY_FK = Internal.createForeignKey(TopLevelAsbiep.TOP_LEVEL_ASBIEP, DSL.name("top_level_asbiep_last_updated_by_fk"), new TableField[] { TopLevelAsbiep.TOP_LEVEL_ASBIEP.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<TopLevelAsbiepRecord, AppUserRecord> TOP_LEVEL_ASBIEP_OWNER_USER_ID_FK = Internal.createForeignKey(TopLevelAsbiep.TOP_LEVEL_ASBIEP, DSL.name("top_level_asbiep_owner_user_id_fk"), new TableField[] { TopLevelAsbiep.TOP_LEVEL_ASBIEP.OWNER_USER_ID }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<TopLevelAsbiepRecord, ReleaseRecord> TOP_LEVEL_ASBIEP_RELEASE_ID_FK = Internal.createForeignKey(TopLevelAsbiep.TOP_LEVEL_ASBIEP, DSL.name("top_level_asbiep_release_id_fk"), new TableField[] { TopLevelAsbiep.TOP_LEVEL_ASBIEP.RELEASE_ID }, Keys.KEY_RELEASE_PRIMARY, new TableField[] { Release.RELEASE.RELEASE_ID }, true);
    public static final ForeignKey<UsageRuleExpressionRecord, UsageRuleRecord> USAGE_RULE_EXPRESSION_REPRESENTED_USAGE_RULE_ID_FK = Internal.createForeignKey(UsageRuleExpression.USAGE_RULE_EXPRESSION, DSL.name("usage_rule_expression_represented_usage_rule_id_fk"), new TableField[] { UsageRuleExpression.USAGE_RULE_EXPRESSION.REPRESENTED_USAGE_RULE_ID }, Keys.KEY_USAGE_RULE_PRIMARY, new TableField[] { UsageRule.USAGE_RULE.USAGE_RULE_ID }, true);
    public static final ForeignKey<XbtRecord, AppUserRecord> XBT_CREATED_BY_FK = Internal.createForeignKey(Xbt.XBT, DSL.name("xbt_created_by_fk"), new TableField[] { Xbt.XBT.CREATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<XbtRecord, AppUserRecord> XBT_LAST_UPDATED_BY_FK = Internal.createForeignKey(Xbt.XBT, DSL.name("xbt_last_updated_by_fk"), new TableField[] { Xbt.XBT.LAST_UPDATED_BY }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<XbtRecord, AppUserRecord> XBT_OWNER_USER_ID_FK = Internal.createForeignKey(Xbt.XBT, DSL.name("xbt_owner_user_id_fk"), new TableField[] { Xbt.XBT.OWNER_USER_ID }, Keys.KEY_APP_USER_PRIMARY, new TableField[] { AppUser.APP_USER.APP_USER_ID }, true);
    public static final ForeignKey<XbtRecord, XbtRecord> XBT_SUBTYPE_OF_XBT_ID_FK = Internal.createForeignKey(Xbt.XBT, DSL.name("xbt_subtype_of_xbt_id_fk"), new TableField[] { Xbt.XBT.SUBTYPE_OF_XBT_ID }, Keys.KEY_XBT_PRIMARY, new TableField[] { Xbt.XBT.XBT_ID }, true);
    public static final ForeignKey<XbtManifestRecord, LogRecord> XBT_MANIFEST_LOG_ID_FK = Internal.createForeignKey(XbtManifest.XBT_MANIFEST, DSL.name("xbt_manifest_log_id_fk"), new TableField[] { XbtManifest.XBT_MANIFEST.LOG_ID }, Keys.KEY_LOG_PRIMARY, new TableField[] { Log.LOG.LOG_ID }, true);
    public static final ForeignKey<XbtManifestRecord, XbtManifestRecord> XBT_MANIFEST_NEXT_XBT_MANIFEST_ID_FK = Internal.createForeignKey(XbtManifest.XBT_MANIFEST, DSL.name("xbt_manifest_next_xbt_manifest_id_fk"), new TableField[] { XbtManifest.XBT_MANIFEST.NEXT_XBT_MANIFEST_ID }, Keys.KEY_XBT_MANIFEST_PRIMARY, new TableField[] { XbtManifest.XBT_MANIFEST.XBT_MANIFEST_ID }, true);
    public static final ForeignKey<XbtManifestRecord, XbtManifestRecord> XBT_MANIFEST_PREV_XBT_MANIFEST_ID_FK = Internal.createForeignKey(XbtManifest.XBT_MANIFEST, DSL.name("xbt_manifest_prev_xbt_manifest_id_fk"), new TableField[] { XbtManifest.XBT_MANIFEST.PREV_XBT_MANIFEST_ID }, Keys.KEY_XBT_MANIFEST_PRIMARY, new TableField[] { XbtManifest.XBT_MANIFEST.XBT_MANIFEST_ID }, true);
    public static final ForeignKey<XbtManifestRecord, ReleaseRecord> XBT_MANIFEST_RELEASE_ID_FK = Internal.createForeignKey(XbtManifest.XBT_MANIFEST, DSL.name("xbt_manifest_release_id_fk"), new TableField[] { XbtManifest.XBT_MANIFEST.RELEASE_ID }, Keys.KEY_RELEASE_PRIMARY, new TableField[] { Release.RELEASE.RELEASE_ID }, true);
    public static final ForeignKey<XbtManifestRecord, XbtRecord> XBT_MANIFEST_XBT_ID_FK = Internal.createForeignKey(XbtManifest.XBT_MANIFEST, DSL.name("xbt_manifest_xbt_id_fk"), new TableField[] { XbtManifest.XBT_MANIFEST.XBT_ID }, Keys.KEY_XBT_PRIMARY, new TableField[] { Xbt.XBT.XBT_ID }, true);
}
