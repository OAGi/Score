/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.OasServerVariableRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OasServerVariable extends TableImpl<OasServerVariableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.oas_server_variable</code>
     */
    public static final OasServerVariable OAS_SERVER_VARIABLE = new OasServerVariable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OasServerVariableRecord> getRecordType() {
        return OasServerVariableRecord.class;
    }

    /**
     * The column <code>oagi.oas_server_variable.oas_server_variable_id</code>.
     * The primary key of the record.
     */
    public final TableField<OasServerVariableRecord, ULong> OAS_SERVER_VARIABLE_ID = createField(DSL.name("oas_server_variable_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "The primary key of the record.");

    /**
     * The column <code>oagi.oas_server_variable.oas_server_id</code>. A
     * reference of the server record.
     */
    public final TableField<OasServerVariableRecord, ULong> OAS_SERVER_ID = createField(DSL.name("oas_server_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A reference of the server record.");

    /**
     * The column <code>oagi.oas_server_variable.name</code>. "port",
     * "username", "basePath" are the examples in the OpenAPI Specification.
     */
    public final TableField<OasServerVariableRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "\"port\", \"username\", \"basePath\" are the examples in the OpenAPI Specification.");

    /**
     * The column <code>oagi.oas_server_variable.description</code>. An optional
     * description for the server variable. CommonMark syntax MAY be used for
     * rich text representation.
     */
    public final TableField<OasServerVariableRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "An optional description for the server variable. CommonMark syntax MAY be used for rich text representation.");

    /**
     * The column <code>oagi.oas_server_variable.default</code>. REQUIRED. The
     * default value to use for substitution, which SHALL be sent if an
     * alternate value is not supplied. Note this behavior is different than the
     * Schema Object's treatment of default values, because in those cases
     * parameter values are optional. If the enum is defined, the value SHOULD
     * exist in the enum's values.
     */
    public final TableField<OasServerVariableRecord, String> DEFAULT = createField(DSL.name("default"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "REQUIRED. The default value to use for substitution, which SHALL be sent if an alternate value is not supplied. Note this behavior is different than the Schema Object's treatment of default values, because in those cases parameter values are optional. If the enum is defined, the value SHOULD exist in the enum's values.");

    /**
     * The column <code>oagi.oas_server_variable.enum</code>. An enumeration of
     * string values to be used if the substitution options are from a limited
     * set. The array SHOULD NOT be empty.
     */
    public final TableField<OasServerVariableRecord, String> ENUM = createField(DSL.name("enum"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "An enumeration of string values to be used if the substitution options are from a limited set. The array SHOULD NOT be empty.");

    /**
     * The column <code>oagi.oas_server_variable.created_by</code>. The user who
     * creates the record.
     */
    public final TableField<OasServerVariableRecord, ULong> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The user who creates the record.");

    /**
     * The column <code>oagi.oas_server_variable.last_updated_by</code>. The
     * user who last updates the record.
     */
    public final TableField<OasServerVariableRecord, ULong> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The user who last updates the record.");

    /**
     * The column <code>oagi.oas_server_variable.creation_timestamp</code>. The
     * timestamp when the record is created.
     */
    public final TableField<OasServerVariableRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "The timestamp when the record is created.");

    /**
     * The column <code>oagi.oas_server_variable.last_update_timestamp</code>.
     * The timestamp when the record is last updated.
     */
    public final TableField<OasServerVariableRecord, LocalDateTime> LAST_UPDATE_TIMESTAMP = createField(DSL.name("last_update_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "The timestamp when the record is last updated.");

    private OasServerVariable(Name alias, Table<OasServerVariableRecord> aliased) {
        this(alias, aliased, null);
    }

    private OasServerVariable(Name alias, Table<OasServerVariableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>oagi.oas_server_variable</code> table reference
     */
    public OasServerVariable(String alias) {
        this(DSL.name(alias), OAS_SERVER_VARIABLE);
    }

    /**
     * Create an aliased <code>oagi.oas_server_variable</code> table reference
     */
    public OasServerVariable(Name alias) {
        this(alias, OAS_SERVER_VARIABLE);
    }

    /**
     * Create a <code>oagi.oas_server_variable</code> table reference
     */
    public OasServerVariable() {
        this(DSL.name("oas_server_variable"), null);
    }

    public <O extends Record> OasServerVariable(Table<O> child, ForeignKey<O, OasServerVariableRecord> key) {
        super(child, key, OAS_SERVER_VARIABLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<OasServerVariableRecord, ULong> getIdentity() {
        return (Identity<OasServerVariableRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<OasServerVariableRecord> getPrimaryKey() {
        return Keys.KEY_OAS_SERVER_VARIABLE_PRIMARY;
    }

    @Override
    public List<ForeignKey<OasServerVariableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OAS_SERVER_VARIABLE_OAS_SERVER_ID_FK, Keys.OAS_SERVER_VARIABLE_CREATED_BY_FK, Keys.OAS_SERVER_VARIABLE_LAST_UPDATED_BY_FK);
    }

    private transient OasServer _oasServer;
    private transient AppUser _oasServerVariableCreatedByFk;
    private transient AppUser _oasServerVariableLastUpdatedByFk;

    /**
     * Get the implicit join path to the <code>oagi.oas_server</code> table.
     */
    public OasServer oasServer() {
        if (_oasServer == null)
            _oasServer = new OasServer(this, Keys.OAS_SERVER_VARIABLE_OAS_SERVER_ID_FK);

        return _oasServer;
    }

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>oas_server_variable_created_by_fk</code> key.
     */
    public AppUser oasServerVariableCreatedByFk() {
        if (_oasServerVariableCreatedByFk == null)
            _oasServerVariableCreatedByFk = new AppUser(this, Keys.OAS_SERVER_VARIABLE_CREATED_BY_FK);

        return _oasServerVariableCreatedByFk;
    }

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>oas_server_variable_last_updated_by_fk</code> key.
     */
    public AppUser oasServerVariableLastUpdatedByFk() {
        if (_oasServerVariableLastUpdatedByFk == null)
            _oasServerVariableLastUpdatedByFk = new AppUser(this, Keys.OAS_SERVER_VARIABLE_LAST_UPDATED_BY_FK);

        return _oasServerVariableLastUpdatedByFk;
    }

    @Override
    public OasServerVariable as(String alias) {
        return new OasServerVariable(DSL.name(alias), this);
    }

    @Override
    public OasServerVariable as(Name alias) {
        return new OasServerVariable(alias, this);
    }

    @Override
    public OasServerVariable as(Table<?> alias) {
        return new OasServerVariable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OasServerVariable rename(String name) {
        return new OasServerVariable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OasServerVariable rename(Name name) {
        return new OasServerVariable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OasServerVariable rename(Table<?> name) {
        return new OasServerVariable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<ULong, ULong, String, String, String, String, ULong, ULong, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super ULong, ? super ULong, ? super String, ? super String, ? super String, ? super String, ? super ULong, ? super ULong, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super ULong, ? super ULong, ? super String, ? super String, ? super String, ? super String, ? super ULong, ? super ULong, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
