/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AgencyIdListManifest.AgencyIdListManifestPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BbieSc.BbieScPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CdtScAwdPriXpsTypeMap.CdtScAwdPriXpsTypeMapPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CodeListManifest.CodeListManifestPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.DtScManifest.DtScManifestPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BdtScPriRestriRecord;


/**
 * This table is similar to the BDT_PRI_RESTRI table but it is for the BDT SC.
 * The allowed primitives are captured by three columns the
 * CDT_SC_AWD_PRI_XPS_TYPE_MAP, CODE_LIST_ID, and AGENCY_ID_LIST_ID. The first
 * column specifies the primitive by the built-in type of an expression language
 * such as the XML Schema built-in type. The second specifies the primitive,
 * which is a code list, while the last one specifies the primitive which is an
 * agency identification list. Only one column among the three can have a value
 * in a particular record.
 * 
 * It should be noted that the table does not store the fact about primitive
 * restriction hierarchical relationships. In other words, if a BDT SC is
 * derived from another BDT SC and the derivative BDT SC applies some primitive
 * restrictions, that relationship will not be explicitly stored. The derivative
 * BDT SC points directly to the CDT_AWD_PRI_XPS_TYPE_MAP key rather than the
 * BDT_SC_PRI_RESTRI key.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BdtScPriRestri extends TableImpl<BdtScPriRestriRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.bdt_sc_pri_restri</code>
     */
    public static final BdtScPriRestri BDT_SC_PRI_RESTRI = new BdtScPriRestri();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BdtScPriRestriRecord> getRecordType() {
        return BdtScPriRestriRecord.class;
    }

    /**
     * The column <code>oagi.bdt_sc_pri_restri.bdt_sc_pri_restri_id</code>.
     * Primary, internal database key.
     */
    public final TableField<BdtScPriRestriRecord, ULong> BDT_SC_PRI_RESTRI_ID = createField(DSL.name("bdt_sc_pri_restri_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary, internal database key.");

    /**
     * The column <code>oagi.bdt_sc_pri_restri.bdt_sc_manifest_id</code>.
     * Foreign key to the DT_SC_MANIFEST table. It shall point to only DT that
     * is a BDT (not a CDT).
     */
    public final TableField<BdtScPriRestriRecord, ULong> BDT_SC_MANIFEST_ID = createField(DSL.name("bdt_sc_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the DT_SC_MANIFEST table. It shall point to only DT that is a BDT (not a CDT).");

    /**
     * The column
     * <code>oagi.bdt_sc_pri_restri.cdt_sc_awd_pri_xps_type_map_id</code>. This
     * column is a forieng key to the CDT_SC_AWD_PRI_XPS_TYPE_MAP table. It
     * allows for a primitive restriction based on a built-in type of schema
     * expressions.
     */
    public final TableField<BdtScPriRestriRecord, ULong> CDT_SC_AWD_PRI_XPS_TYPE_MAP_ID = createField(DSL.name("cdt_sc_awd_pri_xps_type_map_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "This column is a forieng key to the CDT_SC_AWD_PRI_XPS_TYPE_MAP table. It allows for a primitive restriction based on a built-in type of schema expressions.");

    /**
     * The column <code>oagi.bdt_sc_pri_restri.code_list_manifest_id</code>.
     * Foreign key to the CODE_LIST_MANIFEST table.
     */
    public final TableField<BdtScPriRestriRecord, ULong> CODE_LIST_MANIFEST_ID = createField(DSL.name("code_list_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "Foreign key to the CODE_LIST_MANIFEST table.");

    /**
     * The column
     * <code>oagi.bdt_sc_pri_restri.agency_id_list_manifest_id</code>. This is a
     * foreign key to the AGENCY_ID_LIST_MANIFEST table. It is used in the case
     * that the BDT content can be restricted to an agency identification.
     */
    public final TableField<BdtScPriRestriRecord, ULong> AGENCY_ID_LIST_MANIFEST_ID = createField(DSL.name("agency_id_list_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "This is a foreign key to the AGENCY_ID_LIST_MANIFEST table. It is used in the case that the BDT content can be restricted to an agency identification.");

    /**
     * The column <code>oagi.bdt_sc_pri_restri.is_default</code>. This column
     * specifies the default primitive for a BDT. It is typically the most
     * generic primitive allowed for the BDT.
     */
    public final TableField<BdtScPriRestriRecord, Byte> IS_DEFAULT = createField(DSL.name("is_default"), SQLDataType.TINYINT.nullable(false), this, "This column specifies the default primitive for a BDT. It is typically the most generic primitive allowed for the BDT.");

    private BdtScPriRestri(Name alias, Table<BdtScPriRestriRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BdtScPriRestri(Name alias, Table<BdtScPriRestriRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("This table is similar to the BDT_PRI_RESTRI table but it is for the BDT SC. The allowed primitives are captured by three columns the CDT_SC_AWD_PRI_XPS_TYPE_MAP, CODE_LIST_ID, and AGENCY_ID_LIST_ID. The first column specifies the primitive by the built-in type of an expression language such as the XML Schema built-in type. The second specifies the primitive, which is a code list, while the last one specifies the primitive which is an agency identification list. Only one column among the three can have a value in a particular record.\n\nIt should be noted that the table does not store the fact about primitive restriction hierarchical relationships. In other words, if a BDT SC is derived from another BDT SC and the derivative BDT SC applies some primitive restrictions, that relationship will not be explicitly stored. The derivative BDT SC points directly to the CDT_AWD_PRI_XPS_TYPE_MAP key rather than the BDT_SC_PRI_RESTRI key."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.bdt_sc_pri_restri</code> table reference
     */
    public BdtScPriRestri(String alias) {
        this(DSL.name(alias), BDT_SC_PRI_RESTRI);
    }

    /**
     * Create an aliased <code>oagi.bdt_sc_pri_restri</code> table reference
     */
    public BdtScPriRestri(Name alias) {
        this(alias, BDT_SC_PRI_RESTRI);
    }

    /**
     * Create a <code>oagi.bdt_sc_pri_restri</code> table reference
     */
    public BdtScPriRestri() {
        this(DSL.name("bdt_sc_pri_restri"), null);
    }

    public <O extends Record> BdtScPriRestri(Table<O> path, ForeignKey<O, BdtScPriRestriRecord> childPath, InverseForeignKey<O, BdtScPriRestriRecord> parentPath) {
        super(path, childPath, parentPath, BDT_SC_PRI_RESTRI);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BdtScPriRestriPath extends BdtScPriRestri implements Path<BdtScPriRestriRecord> {
        public <O extends Record> BdtScPriRestriPath(Table<O> path, ForeignKey<O, BdtScPriRestriRecord> childPath, InverseForeignKey<O, BdtScPriRestriRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BdtScPriRestriPath(Name alias, Table<BdtScPriRestriRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BdtScPriRestriPath as(String alias) {
            return new BdtScPriRestriPath(DSL.name(alias), this);
        }

        @Override
        public BdtScPriRestriPath as(Name alias) {
            return new BdtScPriRestriPath(alias, this);
        }

        @Override
        public BdtScPriRestriPath as(Table<?> alias) {
            return new BdtScPriRestriPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<BdtScPriRestriRecord, ULong> getIdentity() {
        return (Identity<BdtScPriRestriRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<BdtScPriRestriRecord> getPrimaryKey() {
        return Keys.KEY_BDT_SC_PRI_RESTRI_PRIMARY;
    }

    @Override
    public List<ForeignKey<BdtScPriRestriRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BDT_SC_PRI_RESTRI_BDT_MANIFEST_ID_FK, Keys.BDT_SC_PRI_RESTRI_CDT_SC_AWD_PRI_XPS_TYPE_MAP_ID_FK, Keys.BDT_SC_PRI_RESTRI_CODE_LIST_MANIFEST_ID_FK, Keys.BDT_SC_PRI_RESTRI_AGENCY_ID_LIST_MANIFEST_ID_FK);
    }

    private transient DtScManifestPath _dtScManifest;

    /**
     * Get the implicit join path to the <code>oagi.dt_sc_manifest</code> table.
     */
    public DtScManifestPath dtScManifest() {
        if (_dtScManifest == null)
            _dtScManifest = new DtScManifestPath(this, Keys.BDT_SC_PRI_RESTRI_BDT_MANIFEST_ID_FK, null);

        return _dtScManifest;
    }

    private transient CdtScAwdPriXpsTypeMapPath _cdtScAwdPriXpsTypeMap;

    /**
     * Get the implicit join path to the
     * <code>oagi.cdt_sc_awd_pri_xps_type_map</code> table.
     */
    public CdtScAwdPriXpsTypeMapPath cdtScAwdPriXpsTypeMap() {
        if (_cdtScAwdPriXpsTypeMap == null)
            _cdtScAwdPriXpsTypeMap = new CdtScAwdPriXpsTypeMapPath(this, Keys.BDT_SC_PRI_RESTRI_CDT_SC_AWD_PRI_XPS_TYPE_MAP_ID_FK, null);

        return _cdtScAwdPriXpsTypeMap;
    }

    private transient CodeListManifestPath _codeListManifest;

    /**
     * Get the implicit join path to the <code>oagi.code_list_manifest</code>
     * table.
     */
    public CodeListManifestPath codeListManifest() {
        if (_codeListManifest == null)
            _codeListManifest = new CodeListManifestPath(this, Keys.BDT_SC_PRI_RESTRI_CODE_LIST_MANIFEST_ID_FK, null);

        return _codeListManifest;
    }

    private transient AgencyIdListManifestPath _agencyIdListManifest;

    /**
     * Get the implicit join path to the
     * <code>oagi.agency_id_list_manifest</code> table.
     */
    public AgencyIdListManifestPath agencyIdListManifest() {
        if (_agencyIdListManifest == null)
            _agencyIdListManifest = new AgencyIdListManifestPath(this, Keys.BDT_SC_PRI_RESTRI_AGENCY_ID_LIST_MANIFEST_ID_FK, null);

        return _agencyIdListManifest;
    }

    private transient BbieScPath _bbieSc;

    /**
     * Get the implicit to-many join path to the <code>oagi.bbie_sc</code> table
     */
    public BbieScPath bbieSc() {
        if (_bbieSc == null)
            _bbieSc = new BbieScPath(this, null, Keys.BBIE_SC_DT_SC_PRI_RESTRI_ID_FK.getInverseKey());

        return _bbieSc;
    }

    @Override
    public BdtScPriRestri as(String alias) {
        return new BdtScPriRestri(DSL.name(alias), this);
    }

    @Override
    public BdtScPriRestri as(Name alias) {
        return new BdtScPriRestri(alias, this);
    }

    @Override
    public BdtScPriRestri as(Table<?> alias) {
        return new BdtScPriRestri(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BdtScPriRestri rename(String name) {
        return new BdtScPriRestri(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BdtScPriRestri rename(Name name) {
        return new BdtScPriRestri(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BdtScPriRestri rename(Table<?> name) {
        return new BdtScPriRestri(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BdtScPriRestri where(Condition condition) {
        return new BdtScPriRestri(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BdtScPriRestri where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BdtScPriRestri where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BdtScPriRestri where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BdtScPriRestri where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BdtScPriRestri where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BdtScPriRestri where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BdtScPriRestri where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BdtScPriRestri whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BdtScPriRestri whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
