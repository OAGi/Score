/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables.records;


import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Ascc;


/**
 * An ASCC represents a relationship/association between two ACCs through an
 * ASCCP. 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AsccRecord extends UpdatableRecordImpl<AsccRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>oagi.ascc.ascc_id</code>. An internal, primary database
     * key of an ASCC.
     */
    public void setAsccId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>oagi.ascc.ascc_id</code>. An internal, primary database
     * key of an ASCC.
     */
    public ULong getAsccId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>oagi.ascc.guid</code>. A globally unique identifier
     * (GUID).
     */
    public void setGuid(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>oagi.ascc.guid</code>. A globally unique identifier
     * (GUID).
     */
    public String getGuid() {
        return (String) get(1);
    }

    /**
     * Setter for <code>oagi.ascc.cardinality_min</code>. Minimum occurrence of
     * the TO_ASCCP_ID. The valid values are non-negative integer.
     */
    public void setCardinalityMin(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>oagi.ascc.cardinality_min</code>. Minimum occurrence of
     * the TO_ASCCP_ID. The valid values are non-negative integer.
     */
    public Integer getCardinalityMin() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>oagi.ascc.cardinality_max</code>. Maximum cardinality of
     * the TO_ASCCP_ID. A valid value is integer -1 and up. Specifically, -1
     * means unbounded. 0 means prohibited or not to use.
     */
    public void setCardinalityMax(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>oagi.ascc.cardinality_max</code>. Maximum cardinality of
     * the TO_ASCCP_ID. A valid value is integer -1 and up. Specifically, -1
     * means unbounded. 0 means prohibited or not to use.
     */
    public Integer getCardinalityMax() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>oagi.ascc.seq_key</code>. @deprecated since 2.0.0. This
     * indicates the order of the associations among other siblings. A valid
     * value is positive integer. The SEQ_KEY at the CC side is localized. In
     * other words, if an ACC is based on another ACC, SEQ_KEY of ASCCs or BCCs
     * of the former ACC starts at 1 again.
     */
    public void setSeqKey(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>oagi.ascc.seq_key</code>. @deprecated since 2.0.0. This
     * indicates the order of the associations among other siblings. A valid
     * value is positive integer. The SEQ_KEY at the CC side is localized. In
     * other words, if an ACC is based on another ACC, SEQ_KEY of ASCCs or BCCs
     * of the former ACC starts at 1 again.
     */
    public Integer getSeqKey() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>oagi.ascc.from_acc_id</code>. FROM_ACC_ID is a foreign
     * key pointing to an ACC record. It is basically pointing to a parent data
     * element (type) of the TO_ASCCP_ID.
     */
    public void setFromAccId(ULong value) {
        set(5, value);
    }

    /**
     * Getter for <code>oagi.ascc.from_acc_id</code>. FROM_ACC_ID is a foreign
     * key pointing to an ACC record. It is basically pointing to a parent data
     * element (type) of the TO_ASCCP_ID.
     */
    public ULong getFromAccId() {
        return (ULong) get(5);
    }

    /**
     * Setter for <code>oagi.ascc.to_asccp_id</code>. TO_ASCCP_ID is a foreign
     * key to an ASCCP table record. It is basically pointing to a child data
     * element of the FROM_ACC_ID. 
     */
    public void setToAsccpId(ULong value) {
        set(6, value);
    }

    /**
     * Getter for <code>oagi.ascc.to_asccp_id</code>. TO_ASCCP_ID is a foreign
     * key to an ASCCP table record. It is basically pointing to a child data
     * element of the FROM_ACC_ID. 
     */
    public ULong getToAsccpId() {
        return (ULong) get(6);
    }

    /**
     * Setter for <code>oagi.ascc.definition</code>. This is a documentation or
     * description of the ASCC. Since ASCC is business context independent, this
     * is a business context independent description of the ASCC. Since there
     * are definitions also in the ASCCP (as referenced by the TO_ASCCP_ID
     * column) and the ACC under that ASCCP, definition in the ASCC is a
     * specific description about the relationship between the ACC (as in
     * FROM_ACC_ID) and the ASCCP.
     */
    public void setDefinition(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>oagi.ascc.definition</code>. This is a documentation or
     * description of the ASCC. Since ASCC is business context independent, this
     * is a business context independent description of the ASCC. Since there
     * are definitions also in the ASCCP (as referenced by the TO_ASCCP_ID
     * column) and the ACC under that ASCCP, definition in the ASCC is a
     * specific description about the relationship between the ACC (as in
     * FROM_ACC_ID) and the ASCCP.
     */
    public String getDefinition() {
        return (String) get(7);
    }

    /**
     * Setter for <code>oagi.ascc.definition_source</code>. This is typically a
     * URL identifying the source of the DEFINITION column.
     */
    public void setDefinitionSource(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>oagi.ascc.definition_source</code>. This is typically a
     * URL identifying the source of the DEFINITION column.
     */
    public String getDefinitionSource() {
        return (String) get(8);
    }

    /**
     * Setter for <code>oagi.ascc.is_deprecated</code>. Indicates whether the CC
     * is deprecated and should not be reused (i.e., no new reference to this
     * record should be created).
     */
    public void setIsDeprecated(Byte value) {
        set(9, value);
    }

    /**
     * Getter for <code>oagi.ascc.is_deprecated</code>. Indicates whether the CC
     * is deprecated and should not be reused (i.e., no new reference to this
     * record should be created).
     */
    public Byte getIsDeprecated() {
        return (Byte) get(9);
    }

    /**
     * Setter for <code>oagi.ascc.replacement_ascc_id</code>. This refers to a
     * replacement if the record is deprecated.
     */
    public void setReplacementAsccId(ULong value) {
        set(10, value);
    }

    /**
     * Getter for <code>oagi.ascc.replacement_ascc_id</code>. This refers to a
     * replacement if the record is deprecated.
     */
    public ULong getReplacementAsccId() {
        return (ULong) get(10);
    }

    /**
     * Setter for <code>oagi.ascc.created_by</code>. A foreign key to the
     * APP_USER table referring to the user who creates the entity.
     * 
     * This column never change between the history and the current record for a
     * given revision. The history record should have the same value as that of
     * its current record.
     */
    public void setCreatedBy(ULong value) {
        set(11, value);
    }

    /**
     * Getter for <code>oagi.ascc.created_by</code>. A foreign key to the
     * APP_USER table referring to the user who creates the entity.
     * 
     * This column never change between the history and the current record for a
     * given revision. The history record should have the same value as that of
     * its current record.
     */
    public ULong getCreatedBy() {
        return (ULong) get(11);
    }

    /**
     * Setter for <code>oagi.ascc.owner_user_id</code>. Foreign key to the
     * APP_USER table. This is the user who owns the entity, is allowed to edit
     * the entity, and who can transfer the ownership to another user.
     * 
     * The ownership can change throughout the history, but undoing shouldn't
     * rollback the ownership. 
     */
    public void setOwnerUserId(ULong value) {
        set(12, value);
    }

    /**
     * Getter for <code>oagi.ascc.owner_user_id</code>. Foreign key to the
     * APP_USER table. This is the user who owns the entity, is allowed to edit
     * the entity, and who can transfer the ownership to another user.
     * 
     * The ownership can change throughout the history, but undoing shouldn't
     * rollback the ownership. 
     */
    public ULong getOwnerUserId() {
        return (ULong) get(12);
    }

    /**
     * Setter for <code>oagi.ascc.last_updated_by</code>. A foreign key to the
     * APP_USER table referring to the last user who has updated the record. 
     * 
     * In the history record, this should always be the user who is editing the
     * entity (perhaps except when the ownership has just been changed).
     */
    public void setLastUpdatedBy(ULong value) {
        set(13, value);
    }

    /**
     * Getter for <code>oagi.ascc.last_updated_by</code>. A foreign key to the
     * APP_USER table referring to the last user who has updated the record. 
     * 
     * In the history record, this should always be the user who is editing the
     * entity (perhaps except when the ownership has just been changed).
     */
    public ULong getLastUpdatedBy() {
        return (ULong) get(13);
    }

    /**
     * Setter for <code>oagi.ascc.creation_timestamp</code>. Timestamp when the
     * revision of the ASCC was created. 
     * 
     * This never change for a revision.
     */
    public void setCreationTimestamp(LocalDateTime value) {
        set(14, value);
    }

    /**
     * Getter for <code>oagi.ascc.creation_timestamp</code>. Timestamp when the
     * revision of the ASCC was created. 
     * 
     * This never change for a revision.
     */
    public LocalDateTime getCreationTimestamp() {
        return (LocalDateTime) get(14);
    }

    /**
     * Setter for <code>oagi.ascc.last_update_timestamp</code>. The timestamp
     * when the record was last updated.
     * 
     * The value of this column in the latest history record should be the same
     * as that of the current record. This column keeps the record of when the
     * change has occurred.
     */
    public void setLastUpdateTimestamp(LocalDateTime value) {
        set(15, value);
    }

    /**
     * Getter for <code>oagi.ascc.last_update_timestamp</code>. The timestamp
     * when the record was last updated.
     * 
     * The value of this column in the latest history record should be the same
     * as that of the current record. This column keeps the record of when the
     * change has occurred.
     */
    public LocalDateTime getLastUpdateTimestamp() {
        return (LocalDateTime) get(15);
    }

    /**
     * Setter for <code>oagi.ascc.state</code>. Deleted, WIP, Draft, QA,
     * Candidate, Production, Release Draft, Published. This the revision life
     * cycle state of the BCC.
     * 
     * State change can't be undone. But the history record can still keep the
     * records of when the state was changed.
     */
    public void setState(String value) {
        set(16, value);
    }

    /**
     * Getter for <code>oagi.ascc.state</code>. Deleted, WIP, Draft, QA,
     * Candidate, Production, Release Draft, Published. This the revision life
     * cycle state of the BCC.
     * 
     * State change can't be undone. But the history record can still keep the
     * records of when the state was changed.
     */
    public String getState() {
        return (String) get(16);
    }

    /**
     * Setter for <code>oagi.ascc.prev_ascc_id</code>. A self-foreign key to
     * indicate the previous history record.
     */
    public void setPrevAsccId(ULong value) {
        set(17, value);
    }

    /**
     * Getter for <code>oagi.ascc.prev_ascc_id</code>. A self-foreign key to
     * indicate the previous history record.
     */
    public ULong getPrevAsccId() {
        return (ULong) get(17);
    }

    /**
     * Setter for <code>oagi.ascc.next_ascc_id</code>. A self-foreign key to
     * indicate the next history record.
     */
    public void setNextAsccId(ULong value) {
        set(18, value);
    }

    /**
     * Getter for <code>oagi.ascc.next_ascc_id</code>. A self-foreign key to
     * indicate the next history record.
     */
    public ULong getNextAsccId() {
        return (ULong) get(18);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AsccRecord
     */
    public AsccRecord() {
        super(Ascc.ASCC);
    }

    /**
     * Create a detached, initialised AsccRecord
     */
    public AsccRecord(ULong asccId, String guid, Integer cardinalityMin, Integer cardinalityMax, Integer seqKey, ULong fromAccId, ULong toAsccpId, String definition, String definitionSource, Byte isDeprecated, ULong replacementAsccId, ULong createdBy, ULong ownerUserId, ULong lastUpdatedBy, LocalDateTime creationTimestamp, LocalDateTime lastUpdateTimestamp, String state, ULong prevAsccId, ULong nextAsccId) {
        super(Ascc.ASCC);

        setAsccId(asccId);
        setGuid(guid);
        setCardinalityMin(cardinalityMin);
        setCardinalityMax(cardinalityMax);
        setSeqKey(seqKey);
        setFromAccId(fromAccId);
        setToAsccpId(toAsccpId);
        setDefinition(definition);
        setDefinitionSource(definitionSource);
        setIsDeprecated(isDeprecated);
        setReplacementAsccId(replacementAsccId);
        setCreatedBy(createdBy);
        setOwnerUserId(ownerUserId);
        setLastUpdatedBy(lastUpdatedBy);
        setCreationTimestamp(creationTimestamp);
        setLastUpdateTimestamp(lastUpdateTimestamp);
        setState(state);
        setPrevAsccId(prevAsccId);
        setNextAsccId(nextAsccId);
        resetChangedOnNotNull();
    }
}
