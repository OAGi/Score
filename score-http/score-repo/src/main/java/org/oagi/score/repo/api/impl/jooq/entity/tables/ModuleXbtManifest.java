/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AppUser.AppUserPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Module.ModulePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.ModuleSetRelease.ModuleSetReleasePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.XbtManifest.XbtManifestPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.ModuleXbtManifestRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ModuleXbtManifest extends TableImpl<ModuleXbtManifestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.module_xbt_manifest</code>
     */
    public static final ModuleXbtManifest MODULE_XBT_MANIFEST = new ModuleXbtManifest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModuleXbtManifestRecord> getRecordType() {
        return ModuleXbtManifestRecord.class;
    }

    /**
     * The column <code>oagi.module_xbt_manifest.module_xbt_manifest_id</code>.
     * Primary key.
     */
    public final TableField<ModuleXbtManifestRecord, ULong> MODULE_XBT_MANIFEST_ID = createField(DSL.name("module_xbt_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key.");

    /**
     * The column <code>oagi.module_xbt_manifest.module_set_release_id</code>. A
     * foreign key of the module set release record.
     */
    public final TableField<ModuleXbtManifestRecord, ULong> MODULE_SET_RELEASE_ID = createField(DSL.name("module_set_release_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A foreign key of the module set release record.");

    /**
     * The column <code>oagi.module_xbt_manifest.xbt_manifest_id</code>. A
     * foreign key of the xbt manifest record.
     */
    public final TableField<ModuleXbtManifestRecord, ULong> XBT_MANIFEST_ID = createField(DSL.name("xbt_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A foreign key of the xbt manifest record.");

    /**
     * The column <code>oagi.module_xbt_manifest.module_id</code>. This
     * indicates a module.
     */
    public final TableField<ModuleXbtManifestRecord, ULong> MODULE_ID = createField(DSL.name("module_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "This indicates a module.");

    /**
     * The column <code>oagi.module_xbt_manifest.created_by</code>. Foreign key
     * to the APP_USER table. It indicates the user who created this record.
     */
    public final TableField<ModuleXbtManifestRecord, ULong> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the APP_USER table. It indicates the user who created this record.");

    /**
     * The column <code>oagi.module_xbt_manifest.last_updated_by</code>. Foreign
     * key to the APP_USER table referring to the last user who updated the
     * record.
     */
    public final TableField<ModuleXbtManifestRecord, ULong> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key to the APP_USER table referring to the last user who updated the record.");

    /**
     * The column <code>oagi.module_xbt_manifest.creation_timestamp</code>. The
     * timestamp when the record was first created.
     */
    public final TableField<ModuleXbtManifestRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "The timestamp when the record was first created.");

    /**
     * The column <code>oagi.module_xbt_manifest.last_update_timestamp</code>.
     * The timestamp when the record was last updated.
     */
    public final TableField<ModuleXbtManifestRecord, LocalDateTime> LAST_UPDATE_TIMESTAMP = createField(DSL.name("last_update_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "The timestamp when the record was last updated.");

    private ModuleXbtManifest(Name alias, Table<ModuleXbtManifestRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ModuleXbtManifest(Name alias, Table<ModuleXbtManifestRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.module_xbt_manifest</code> table reference
     */
    public ModuleXbtManifest(String alias) {
        this(DSL.name(alias), MODULE_XBT_MANIFEST);
    }

    /**
     * Create an aliased <code>oagi.module_xbt_manifest</code> table reference
     */
    public ModuleXbtManifest(Name alias) {
        this(alias, MODULE_XBT_MANIFEST);
    }

    /**
     * Create a <code>oagi.module_xbt_manifest</code> table reference
     */
    public ModuleXbtManifest() {
        this(DSL.name("module_xbt_manifest"), null);
    }

    public <O extends Record> ModuleXbtManifest(Table<O> path, ForeignKey<O, ModuleXbtManifestRecord> childPath, InverseForeignKey<O, ModuleXbtManifestRecord> parentPath) {
        super(path, childPath, parentPath, MODULE_XBT_MANIFEST);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ModuleXbtManifestPath extends ModuleXbtManifest implements Path<ModuleXbtManifestRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ModuleXbtManifestPath(Table<O> path, ForeignKey<O, ModuleXbtManifestRecord> childPath, InverseForeignKey<O, ModuleXbtManifestRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ModuleXbtManifestPath(Name alias, Table<ModuleXbtManifestRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ModuleXbtManifestPath as(String alias) {
            return new ModuleXbtManifestPath(DSL.name(alias), this);
        }

        @Override
        public ModuleXbtManifestPath as(Name alias) {
            return new ModuleXbtManifestPath(alias, this);
        }

        @Override
        public ModuleXbtManifestPath as(Table<?> alias) {
            return new ModuleXbtManifestPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<ModuleXbtManifestRecord, ULong> getIdentity() {
        return (Identity<ModuleXbtManifestRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<ModuleXbtManifestRecord> getPrimaryKey() {
        return Keys.KEY_MODULE_XBT_MANIFEST_PRIMARY;
    }

    @Override
    public List<ForeignKey<ModuleXbtManifestRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MODULE_XBT_MANIFEST_BCCP_MANIFEST_ID_FK, Keys.MODULE_XBT_MANIFEST_CREATED_BY_FK, Keys.MODULE_XBT_MANIFEST_LAST_UPDATED_BY_FK, Keys.MODULE_XBT_MANIFEST_MODULE_ID_FK, Keys.MODULE_XBT_MANIFEST_MODULE_SET_RELEASE_ID_FK);
    }

    private transient XbtManifestPath _xbtManifest;

    /**
     * Get the implicit join path to the <code>oagi.xbt_manifest</code> table.
     */
    public XbtManifestPath xbtManifest() {
        if (_xbtManifest == null)
            _xbtManifest = new XbtManifestPath(this, Keys.MODULE_XBT_MANIFEST_BCCP_MANIFEST_ID_FK, null);

        return _xbtManifest;
    }

    private transient AppUserPath _moduleXbtManifestCreatedByFk;

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>module_xbt_manifest_created_by_fk</code> key.
     */
    public AppUserPath moduleXbtManifestCreatedByFk() {
        if (_moduleXbtManifestCreatedByFk == null)
            _moduleXbtManifestCreatedByFk = new AppUserPath(this, Keys.MODULE_XBT_MANIFEST_CREATED_BY_FK, null);

        return _moduleXbtManifestCreatedByFk;
    }

    private transient AppUserPath _moduleXbtManifestLastUpdatedByFk;

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>module_xbt_manifest_last_updated_by_fk</code> key.
     */
    public AppUserPath moduleXbtManifestLastUpdatedByFk() {
        if (_moduleXbtManifestLastUpdatedByFk == null)
            _moduleXbtManifestLastUpdatedByFk = new AppUserPath(this, Keys.MODULE_XBT_MANIFEST_LAST_UPDATED_BY_FK, null);

        return _moduleXbtManifestLastUpdatedByFk;
    }

    private transient ModulePath _module;

    /**
     * Get the implicit join path to the <code>oagi.module</code> table.
     */
    public ModulePath module() {
        if (_module == null)
            _module = new ModulePath(this, Keys.MODULE_XBT_MANIFEST_MODULE_ID_FK, null);

        return _module;
    }

    private transient ModuleSetReleasePath _moduleSetRelease;

    /**
     * Get the implicit join path to the <code>oagi.module_set_release</code>
     * table.
     */
    public ModuleSetReleasePath moduleSetRelease() {
        if (_moduleSetRelease == null)
            _moduleSetRelease = new ModuleSetReleasePath(this, Keys.MODULE_XBT_MANIFEST_MODULE_SET_RELEASE_ID_FK, null);

        return _moduleSetRelease;
    }

    @Override
    public ModuleXbtManifest as(String alias) {
        return new ModuleXbtManifest(DSL.name(alias), this);
    }

    @Override
    public ModuleXbtManifest as(Name alias) {
        return new ModuleXbtManifest(alias, this);
    }

    @Override
    public ModuleXbtManifest as(Table<?> alias) {
        return new ModuleXbtManifest(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ModuleXbtManifest rename(String name) {
        return new ModuleXbtManifest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ModuleXbtManifest rename(Name name) {
        return new ModuleXbtManifest(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ModuleXbtManifest rename(Table<?> name) {
        return new ModuleXbtManifest(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ModuleXbtManifest where(Condition condition) {
        return new ModuleXbtManifest(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ModuleXbtManifest where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ModuleXbtManifest where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ModuleXbtManifest where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ModuleXbtManifest where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ModuleXbtManifest where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ModuleXbtManifest where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ModuleXbtManifest where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ModuleXbtManifest whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ModuleXbtManifest whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
