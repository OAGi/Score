/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Indexes;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Abie.AbiePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AppUser.AppUserPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AsbieBizterm.AsbieBiztermPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Asbiep.AsbiepPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AsccManifest.AsccManifestPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BieUsageRule.BieUsageRulePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.TopLevelAsbiep.TopLevelAsbiepPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.AsbieRecord;


/**
 * An ASBIE represents a relationship/association between two ABIEs through an
 * ASBIEP. It is a contextualization of an ASCC.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Asbie extends TableImpl<AsbieRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.asbie</code>
     */
    public static final Asbie ASBIE = new Asbie();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AsbieRecord> getRecordType() {
        return AsbieRecord.class;
    }

    /**
     * The column <code>oagi.asbie.asbie_id</code>. A internal, primary database
     * key of an ASBIE.
     */
    public final TableField<AsbieRecord, ULong> ASBIE_ID = createField(DSL.name("asbie_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "A internal, primary database key of an ASBIE.");

    /**
     * The column <code>oagi.asbie.guid</code>. A globally unique identifier
     * (GUID).
     */
    public final TableField<AsbieRecord, String> GUID = createField(DSL.name("guid"), SQLDataType.CHAR(32).nullable(false), this, "A globally unique identifier (GUID).");

    /**
     * The column <code>oagi.asbie.based_ascc_manifest_id</code>. The
     * BASED_ASCC_MANIFEST_ID column refers to the ASCC_MANIFEST record, which
     * this ASBIE contextualizes.
     */
    public final TableField<AsbieRecord, ULong> BASED_ASCC_MANIFEST_ID = createField(DSL.name("based_ascc_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The BASED_ASCC_MANIFEST_ID column refers to the ASCC_MANIFEST record, which this ASBIE contextualizes.");

    /**
     * The column <code>oagi.asbie.path</code>.
     */
    public final TableField<AsbieRecord, String> PATH = createField(DSL.name("path"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>oagi.asbie.hash_path</code>. hash_path generated from
     * the path of the component graph using hash function, so that it is unique
     * in the graph.
     */
    public final TableField<AsbieRecord, String> HASH_PATH = createField(DSL.name("hash_path"), SQLDataType.VARCHAR(64).nullable(false), this, "hash_path generated from the path of the component graph using hash function, so that it is unique in the graph.");

    /**
     * The column <code>oagi.asbie.from_abie_id</code>. A foreign key pointing
     * to the ABIE table. FROM_ABIE_ID is basically  a parent data element
     * (type) of the TO_ASBIEP_ID. FROM_ABIE_ID must be based on the FROM_ACC_ID
     * in the BASED_ASCC_ID except when the FROM_ACC_ID refers to an
     * SEMANTIC_GROUP ACC or USER_EXTENSION_GROUP ACC.
     */
    public final TableField<AsbieRecord, ULong> FROM_ABIE_ID = createField(DSL.name("from_abie_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A foreign key pointing to the ABIE table. FROM_ABIE_ID is basically  a parent data element (type) of the TO_ASBIEP_ID. FROM_ABIE_ID must be based on the FROM_ACC_ID in the BASED_ASCC_ID except when the FROM_ACC_ID refers to an SEMANTIC_GROUP ACC or USER_EXTENSION_GROUP ACC.");

    /**
     * The column <code>oagi.asbie.to_asbiep_id</code>. A foreign key to the
     * ASBIEP table. TO_ASBIEP_ID is basically a child data element of the
     * FROM_ABIE_ID. The TO_ASBIEP_ID must be based on the TO_ASCCP_ID in the
     * BASED_ASCC_ID. the ASBIEP is reused with the OWNER_TOP_LEVEL_ASBIEP is
     * different after joining ASBIE and ASBIEP tables
     */
    public final TableField<AsbieRecord, ULong> TO_ASBIEP_ID = createField(DSL.name("to_asbiep_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "A foreign key to the ASBIEP table. TO_ASBIEP_ID is basically a child data element of the FROM_ABIE_ID. The TO_ASBIEP_ID must be based on the TO_ASCCP_ID in the BASED_ASCC_ID. the ASBIEP is reused with the OWNER_TOP_LEVEL_ASBIEP is different after joining ASBIE and ASBIEP tables");

    /**
     * The column <code>oagi.asbie.definition</code>. Definition to override the
     * ASCC definition. If NULL, it means that the definition should be derived
     * from the based CC on the UI, expression generation, and any API.
     */
    public final TableField<AsbieRecord, String> DEFINITION = createField(DSL.name("definition"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "Definition to override the ASCC definition. If NULL, it means that the definition should be derived from the based CC on the UI, expression generation, and any API.");

    /**
     * The column <code>oagi.asbie.cardinality_min</code>. Minimum occurence
     * constraint of the TO_ASBIEP_ID. A valid value is a non-negative integer.
     */
    public final TableField<AsbieRecord, Integer> CARDINALITY_MIN = createField(DSL.name("cardinality_min"), SQLDataType.INTEGER.nullable(false), this, "Minimum occurence constraint of the TO_ASBIEP_ID. A valid value is a non-negative integer.");

    /**
     * The column <code>oagi.asbie.cardinality_max</code>. Maximum occurrence
     * constraint of the TO_ASBIEP_ID. A valid value is an integer from -1 and
     * up. Specifically, -1 means unbounded. 0 means prohibited or not to use.
     */
    public final TableField<AsbieRecord, Integer> CARDINALITY_MAX = createField(DSL.name("cardinality_max"), SQLDataType.INTEGER.nullable(false), this, "Maximum occurrence constraint of the TO_ASBIEP_ID. A valid value is an integer from -1 and up. Specifically, -1 means unbounded. 0 means prohibited or not to use.");

    /**
     * The column <code>oagi.asbie.is_nillable</code>. Indicate whether the
     * TO_ASBIEP_ID is allowed to be null.
     */
    public final TableField<AsbieRecord, Byte> IS_NILLABLE = createField(DSL.name("is_nillable"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "Indicate whether the TO_ASBIEP_ID is allowed to be null.");

    /**
     * The column <code>oagi.asbie.remark</code>. This column allows the user to
     * specify very context-specific usage of the BIE. It is different from the
     * DEFINITION column in that the DEFINITION column is a description
     * conveying the meaning of the associated concept. Remarks may be a very
     * implementation specific instruction or others. For example, BOM BOD, as
     * an ACC, is a generic BOM structure. In a particular context, a BOM ABIE
     * can be a Super BOM. Explanation of the Super BOM concept should be
     * captured in the Definition of the ABIE. A remark about that ABIE may be
     * "Type of BOM should be recognized in the BOM/typeCode."
     */
    public final TableField<AsbieRecord, String> REMARK = createField(DSL.name("remark"), SQLDataType.VARCHAR(225).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "This column allows the user to specify very context-specific usage of the BIE. It is different from the DEFINITION column in that the DEFINITION column is a description conveying the meaning of the associated concept. Remarks may be a very implementation specific instruction or others. For example, BOM BOD, as an ACC, is a generic BOM structure. In a particular context, a BOM ABIE can be a Super BOM. Explanation of the Super BOM concept should be captured in the Definition of the ABIE. A remark about that ABIE may be \"Type of BOM should be recognized in the BOM/typeCode.\"");

    /**
     * The column <code>oagi.asbie.created_by</code>. A foreign key referring to
     * the user who creates the ASBIE. The creator of the ASBIE is also its
     * owner by default. ASBIEs created as children of another ABIE have the
     * same CREATED_BY.
     */
    public final TableField<AsbieRecord, ULong> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A foreign key referring to the user who creates the ASBIE. The creator of the ASBIE is also its owner by default. ASBIEs created as children of another ABIE have the same CREATED_BY.");

    /**
     * The column <code>oagi.asbie.last_updated_by</code>. A foreign key
     * referring to the user who has last updated the ASBIE record. 
     */
    public final TableField<AsbieRecord, ULong> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A foreign key referring to the user who has last updated the ASBIE record. ");

    /**
     * The column <code>oagi.asbie.creation_timestamp</code>. Timestamp when the
     * ASBIE record was first created. ASBIEs created as children of another
     * ABIE have the same CREATION_TIMESTAMP.
     */
    public final TableField<AsbieRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Timestamp when the ASBIE record was first created. ASBIEs created as children of another ABIE have the same CREATION_TIMESTAMP.");

    /**
     * The column <code>oagi.asbie.last_update_timestamp</code>. The timestamp
     * when the ASBIE was last updated.
     */
    public final TableField<AsbieRecord, LocalDateTime> LAST_UPDATE_TIMESTAMP = createField(DSL.name("last_update_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "The timestamp when the ASBIE was last updated.");

    /**
     * The column <code>oagi.asbie.seq_key</code>. This indicates the order of
     * the associations among other siblings. The SEQ_KEY for BIEs is decimal in
     * order to accomodate the removal of inheritance hierarchy and group. For
     * example, children of the most abstract ACC will have SEQ_KEY = 1.1, 1.2,
     * 1.3, and so on; and SEQ_KEY of the next abstraction level ACC will have
     * SEQ_KEY = 2.1, 2.2, 2.3 and so on so forth.
     */
    public final TableField<AsbieRecord, BigDecimal> SEQ_KEY = createField(DSL.name("seq_key"), SQLDataType.DECIMAL(10, 2).nullable(false), this, "This indicates the order of the associations among other siblings. The SEQ_KEY for BIEs is decimal in order to accomodate the removal of inheritance hierarchy and group. For example, children of the most abstract ACC will have SEQ_KEY = 1.1, 1.2, 1.3, and so on; and SEQ_KEY of the next abstraction level ACC will have SEQ_KEY = 2.1, 2.2, 2.3 and so on so forth.");

    /**
     * The column <code>oagi.asbie.is_used</code>. Flag to indicate whether the
     * field/component is used in the content model. It signifies whether the
     * field/component should be generated.
     */
    public final TableField<AsbieRecord, Byte> IS_USED = createField(DSL.name("is_used"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "Flag to indicate whether the field/component is used in the content model. It signifies whether the field/component should be generated.");

    /**
     * The column <code>oagi.asbie.is_deprecated</code>. Indicates whether the
     * ASBIE is deprecated.
     */
    public final TableField<AsbieRecord, Byte> IS_DEPRECATED = createField(DSL.name("is_deprecated"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "Indicates whether the ASBIE is deprecated.");

    /**
     * The column <code>oagi.asbie.owner_top_level_asbiep_id</code>. This is a
     * foreign key to the top-level ASBIEP.
     */
    public final TableField<AsbieRecord, ULong> OWNER_TOP_LEVEL_ASBIEP_ID = createField(DSL.name("owner_top_level_asbiep_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "This is a foreign key to the top-level ASBIEP.");

    private Asbie(Name alias, Table<AsbieRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Asbie(Name alias, Table<AsbieRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("An ASBIE represents a relationship/association between two ABIEs through an ASBIEP. It is a contextualization of an ASCC."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.asbie</code> table reference
     */
    public Asbie(String alias) {
        this(DSL.name(alias), ASBIE);
    }

    /**
     * Create an aliased <code>oagi.asbie</code> table reference
     */
    public Asbie(Name alias) {
        this(alias, ASBIE);
    }

    /**
     * Create a <code>oagi.asbie</code> table reference
     */
    public Asbie() {
        this(DSL.name("asbie"), null);
    }

    public <O extends Record> Asbie(Table<O> path, ForeignKey<O, AsbieRecord> childPath, InverseForeignKey<O, AsbieRecord> parentPath) {
        super(path, childPath, parentPath, ASBIE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AsbiePath extends Asbie implements Path<AsbieRecord> {
        public <O extends Record> AsbiePath(Table<O> path, ForeignKey<O, AsbieRecord> childPath, InverseForeignKey<O, AsbieRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AsbiePath(Name alias, Table<AsbieRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AsbiePath as(String alias) {
            return new AsbiePath(DSL.name(alias), this);
        }

        @Override
        public AsbiePath as(Name alias) {
            return new AsbiePath(alias, this);
        }

        @Override
        public AsbiePath as(Table<?> alias) {
            return new AsbiePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ASBIE_ASBIE_HASH_PATH_K, Indexes.ASBIE_ASBIE_PATH_K);
    }

    @Override
    public Identity<AsbieRecord, ULong> getIdentity() {
        return (Identity<AsbieRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<AsbieRecord> getPrimaryKey() {
        return Keys.KEY_ASBIE_PRIMARY;
    }

    @Override
    public List<ForeignKey<AsbieRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ASBIE_BASED_ASCC_MANIFEST_ID_FK, Keys.ASBIE_FROM_ABIE_ID_FK, Keys.ASBIE_TO_ASBIEP_ID_FK, Keys.ASBIE_CREATED_BY_FK, Keys.ASBIE_LAST_UPDATED_BY_FK, Keys.ASBIE_OWNER_TOP_LEVEL_ASBIEP_ID_FK);
    }

    private transient AsccManifestPath _asccManifest;

    /**
     * Get the implicit join path to the <code>oagi.ascc_manifest</code> table.
     */
    public AsccManifestPath asccManifest() {
        if (_asccManifest == null)
            _asccManifest = new AsccManifestPath(this, Keys.ASBIE_BASED_ASCC_MANIFEST_ID_FK, null);

        return _asccManifest;
    }

    private transient AbiePath _abie;

    /**
     * Get the implicit join path to the <code>oagi.abie</code> table.
     */
    public AbiePath abie() {
        if (_abie == null)
            _abie = new AbiePath(this, Keys.ASBIE_FROM_ABIE_ID_FK, null);

        return _abie;
    }

    private transient AsbiepPath _asbiep;

    /**
     * Get the implicit join path to the <code>oagi.asbiep</code> table.
     */
    public AsbiepPath asbiep() {
        if (_asbiep == null)
            _asbiep = new AsbiepPath(this, Keys.ASBIE_TO_ASBIEP_ID_FK, null);

        return _asbiep;
    }

    private transient AppUserPath _asbieCreatedByFk;

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>asbie_created_by_fk</code> key.
     */
    public AppUserPath asbieCreatedByFk() {
        if (_asbieCreatedByFk == null)
            _asbieCreatedByFk = new AppUserPath(this, Keys.ASBIE_CREATED_BY_FK, null);

        return _asbieCreatedByFk;
    }

    private transient AppUserPath _asbieLastUpdatedByFk;

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>asbie_last_updated_by_fk</code> key.
     */
    public AppUserPath asbieLastUpdatedByFk() {
        if (_asbieLastUpdatedByFk == null)
            _asbieLastUpdatedByFk = new AppUserPath(this, Keys.ASBIE_LAST_UPDATED_BY_FK, null);

        return _asbieLastUpdatedByFk;
    }

    private transient TopLevelAsbiepPath _topLevelAsbiep;

    /**
     * Get the implicit join path to the <code>oagi.top_level_asbiep</code>
     * table.
     */
    public TopLevelAsbiepPath topLevelAsbiep() {
        if (_topLevelAsbiep == null)
            _topLevelAsbiep = new TopLevelAsbiepPath(this, Keys.ASBIE_OWNER_TOP_LEVEL_ASBIEP_ID_FK, null);

        return _topLevelAsbiep;
    }

    private transient AsbieBiztermPath _asbieBizterm;

    /**
     * Get the implicit to-many join path to the <code>oagi.asbie_bizterm</code>
     * table
     */
    public AsbieBiztermPath asbieBizterm() {
        if (_asbieBizterm == null)
            _asbieBizterm = new AsbieBiztermPath(this, null, Keys.ASBIE_BIZTERM_ASBIE_FK.getInverseKey());

        return _asbieBizterm;
    }

    private transient BieUsageRulePath _bieUsageRule;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.bie_usage_rule</code> table
     */
    public BieUsageRulePath bieUsageRule() {
        if (_bieUsageRule == null)
            _bieUsageRule = new BieUsageRulePath(this, null, Keys.BIE_USAGE_RULE_TARGET_ASBIE_ID_FK.getInverseKey());

        return _bieUsageRule;
    }

    @Override
    public Asbie as(String alias) {
        return new Asbie(DSL.name(alias), this);
    }

    @Override
    public Asbie as(Name alias) {
        return new Asbie(alias, this);
    }

    @Override
    public Asbie as(Table<?> alias) {
        return new Asbie(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Asbie rename(String name) {
        return new Asbie(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Asbie rename(Name name) {
        return new Asbie(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Asbie rename(Table<?> name) {
        return new Asbie(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Asbie where(Condition condition) {
        return new Asbie(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Asbie where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Asbie where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Asbie where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Asbie where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Asbie where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Asbie where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Asbie where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Asbie whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Asbie whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
