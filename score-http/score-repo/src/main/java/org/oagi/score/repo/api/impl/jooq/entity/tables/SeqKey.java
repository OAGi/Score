/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Indexes;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AccManifest.AccManifestPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AsccManifest.AsccManifestPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BccManifest.BccManifestPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.SeqKey.SeqKeyPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.SeqKeyRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SeqKey extends TableImpl<SeqKeyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.seq_key</code>
     */
    public static final SeqKey SEQ_KEY = new SeqKey();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SeqKeyRecord> getRecordType() {
        return SeqKeyRecord.class;
    }

    /**
     * The column <code>oagi.seq_key.seq_key_id</code>.
     */
    public final TableField<SeqKeyRecord, ULong> SEQ_KEY_ID = createField(DSL.name("seq_key_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.seq_key.from_acc_manifest_id</code>.
     */
    public final TableField<SeqKeyRecord, ULong> FROM_ACC_MANIFEST_ID = createField(DSL.name("from_acc_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.seq_key.ascc_manifest_id</code>.
     */
    public final TableField<SeqKeyRecord, ULong> ASCC_MANIFEST_ID = createField(DSL.name("ascc_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>oagi.seq_key.bcc_manifest_id</code>.
     */
    public final TableField<SeqKeyRecord, ULong> BCC_MANIFEST_ID = createField(DSL.name("bcc_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>oagi.seq_key.prev_seq_key_id</code>.
     */
    public final TableField<SeqKeyRecord, ULong> PREV_SEQ_KEY_ID = createField(DSL.name("prev_seq_key_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>oagi.seq_key.next_seq_key_id</code>.
     */
    public final TableField<SeqKeyRecord, ULong> NEXT_SEQ_KEY_ID = createField(DSL.name("next_seq_key_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "");

    private SeqKey(Name alias, Table<SeqKeyRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SeqKey(Name alias, Table<SeqKeyRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.seq_key</code> table reference
     */
    public SeqKey(String alias) {
        this(DSL.name(alias), SEQ_KEY);
    }

    /**
     * Create an aliased <code>oagi.seq_key</code> table reference
     */
    public SeqKey(Name alias) {
        this(alias, SEQ_KEY);
    }

    /**
     * Create a <code>oagi.seq_key</code> table reference
     */
    public SeqKey() {
        this(DSL.name("seq_key"), null);
    }

    public <O extends Record> SeqKey(Table<O> path, ForeignKey<O, SeqKeyRecord> childPath, InverseForeignKey<O, SeqKeyRecord> parentPath) {
        super(path, childPath, parentPath, SEQ_KEY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SeqKeyPath extends SeqKey implements Path<SeqKeyRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SeqKeyPath(Table<O> path, ForeignKey<O, SeqKeyRecord> childPath, InverseForeignKey<O, SeqKeyRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SeqKeyPath(Name alias, Table<SeqKeyRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SeqKeyPath as(String alias) {
            return new SeqKeyPath(DSL.name(alias), this);
        }

        @Override
        public SeqKeyPath as(Name alias) {
            return new SeqKeyPath(alias, this);
        }

        @Override
        public SeqKeyPath as(Table<?> alias) {
            return new SeqKeyPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SEQ_KEY_SEQ_KEY_ASCC_MANIFEST_ID, Indexes.SEQ_KEY_SEQ_KEY_BCC_MANIFEST_ID, Indexes.SEQ_KEY_SEQ_KEY_FROM_ACC_MANIFEST_ID);
    }

    @Override
    public Identity<SeqKeyRecord, ULong> getIdentity() {
        return (Identity<SeqKeyRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SeqKeyRecord> getPrimaryKey() {
        return Keys.KEY_SEQ_KEY_PRIMARY;
    }

    @Override
    public List<ForeignKey<SeqKeyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SEQ_KEY_ASCC_MANIFEST_ID_FK, Keys.SEQ_KEY_BCC_MANIFEST_ID_FK, Keys.SEQ_KEY_FROM_ACC_MANIFEST_ID_FK, Keys.SEQ_KEY_NEXT_SEQ_KEY_ID_FK, Keys.SEQ_KEY_PREV_SEQ_KEY_ID_FK);
    }

    private transient AsccManifestPath _asccManifest;

    /**
     * Get the implicit join path to the <code>oagi.ascc_manifest</code> table.
     */
    public AsccManifestPath asccManifest() {
        if (_asccManifest == null)
            _asccManifest = new AsccManifestPath(this, Keys.SEQ_KEY_ASCC_MANIFEST_ID_FK, null);

        return _asccManifest;
    }

    private transient BccManifestPath _bccManifest;

    /**
     * Get the implicit join path to the <code>oagi.bcc_manifest</code> table.
     */
    public BccManifestPath bccManifest() {
        if (_bccManifest == null)
            _bccManifest = new BccManifestPath(this, Keys.SEQ_KEY_BCC_MANIFEST_ID_FK, null);

        return _bccManifest;
    }

    private transient AccManifestPath _accManifest;

    /**
     * Get the implicit join path to the <code>oagi.acc_manifest</code> table.
     */
    public AccManifestPath accManifest() {
        if (_accManifest == null)
            _accManifest = new AccManifestPath(this, Keys.SEQ_KEY_FROM_ACC_MANIFEST_ID_FK, null);

        return _accManifest;
    }

    private transient SeqKeyPath _seqKeyNextSeqKeyIdFk;

    /**
     * Get the implicit join path to the <code>oagi.seq_key</code> table, via
     * the <code>seq_key_next_seq_key_id_fk</code> key.
     */
    public SeqKeyPath seqKeyNextSeqKeyIdFk() {
        if (_seqKeyNextSeqKeyIdFk == null)
            _seqKeyNextSeqKeyIdFk = new SeqKeyPath(this, Keys.SEQ_KEY_NEXT_SEQ_KEY_ID_FK, null);

        return _seqKeyNextSeqKeyIdFk;
    }

    private transient SeqKeyPath _seqKeyPrevSeqKeyIdFk;

    /**
     * Get the implicit join path to the <code>oagi.seq_key</code> table, via
     * the <code>seq_key_prev_seq_key_id_fk</code> key.
     */
    public SeqKeyPath seqKeyPrevSeqKeyIdFk() {
        if (_seqKeyPrevSeqKeyIdFk == null)
            _seqKeyPrevSeqKeyIdFk = new SeqKeyPath(this, Keys.SEQ_KEY_PREV_SEQ_KEY_ID_FK, null);

        return _seqKeyPrevSeqKeyIdFk;
    }

    @Override
    public SeqKey as(String alias) {
        return new SeqKey(DSL.name(alias), this);
    }

    @Override
    public SeqKey as(Name alias) {
        return new SeqKey(alias, this);
    }

    @Override
    public SeqKey as(Table<?> alias) {
        return new SeqKey(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SeqKey rename(String name) {
        return new SeqKey(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SeqKey rename(Name name) {
        return new SeqKey(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SeqKey rename(Table<?> name) {
        return new SeqKey(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SeqKey where(Condition condition) {
        return new SeqKey(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SeqKey where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SeqKey where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SeqKey where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SeqKey where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SeqKey where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SeqKey where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SeqKey where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SeqKey whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SeqKey whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
