/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Indexes;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AppUser.AppUserPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Bbie.BbiePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BccpManifest.BccpManifestPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BieUsageRule.BieUsageRulePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.TopLevelAsbiep.TopLevelAsbiepPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BbiepRecord;


/**
 * BBIEP represents the usage of basic property in a specific business context.
 * It is a contextualization of a BCCP.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bbiep extends TableImpl<BbiepRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.bbiep</code>
     */
    public static final Bbiep BBIEP = new Bbiep();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BbiepRecord> getRecordType() {
        return BbiepRecord.class;
    }

    /**
     * The column <code>oagi.bbiep.bbiep_id</code>. A internal, primary database
     * key of an BBIEP.
     */
    public final TableField<BbiepRecord, ULong> BBIEP_ID = createField(DSL.name("bbiep_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "A internal, primary database key of an BBIEP.");

    /**
     * The column <code>oagi.bbiep.guid</code>. A globally unique identifier
     * (GUID).
     */
    public final TableField<BbiepRecord, String> GUID = createField(DSL.name("guid"), SQLDataType.CHAR(32).nullable(false), this, "A globally unique identifier (GUID).");

    /**
     * The column <code>oagi.bbiep.based_bccp_manifest_id</code>. A foreign key
     * pointing to the BCCP_MANIFEST record. It is the BCCP, which the BBIEP
     * contextualizes.
     */
    public final TableField<BbiepRecord, ULong> BASED_BCCP_MANIFEST_ID = createField(DSL.name("based_bccp_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A foreign key pointing to the BCCP_MANIFEST record. It is the BCCP, which the BBIEP contextualizes.");

    /**
     * The column <code>oagi.bbiep.path</code>.
     */
    public final TableField<BbiepRecord, String> PATH = createField(DSL.name("path"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>oagi.bbiep.hash_path</code>. hash_path generated from
     * the path of the component graph using hash function, so that it is unique
     * in the graph.
     */
    public final TableField<BbiepRecord, String> HASH_PATH = createField(DSL.name("hash_path"), SQLDataType.VARCHAR(64).nullable(false), this, "hash_path generated from the path of the component graph using hash function, so that it is unique in the graph.");

    /**
     * The column <code>oagi.bbiep.definition</code>. Definition to override the
     * BCCP's Definition. If NULLl, it means that the definition should be
     * inherited from the based CC.
     */
    public final TableField<BbiepRecord, String> DEFINITION = createField(DSL.name("definition"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "Definition to override the BCCP's Definition. If NULLl, it means that the definition should be inherited from the based CC.");

    /**
     * The column <code>oagi.bbiep.remark</code>. This column allows the user to
     * specify very context-specific usage of the BIE. It is different from the
     * Definition column in that the DEFINITION column is a description
     * conveying the meaning of the associated concept. Remarks may be a very
     * implementation specific instruction or others. For example, BOM BOD, as
     * an ACC, is a generic BOM structure. In a particular context, a BOM ABIE
     * can be a Super BOM. Explanation of the Super BOM concept should be
     * captured in the Definition of the ABIE. A remark about that ABIE may be
     * "Type of BOM should be recognized in the BOM/typeCode.
     */
    public final TableField<BbiepRecord, String> REMARK = createField(DSL.name("remark"), SQLDataType.VARCHAR(225).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "This column allows the user to specify very context-specific usage of the BIE. It is different from the Definition column in that the DEFINITION column is a description conveying the meaning of the associated concept. Remarks may be a very implementation specific instruction or others. For example, BOM BOD, as an ACC, is a generic BOM structure. In a particular context, a BOM ABIE can be a Super BOM. Explanation of the Super BOM concept should be captured in the Definition of the ABIE. A remark about that ABIE may be \"Type of BOM should be recognized in the BOM/typeCode.");

    /**
     * The column <code>oagi.bbiep.biz_term</code>. Business term to indicate
     * what the BIE is called in a particular business context such as in an
     * industry.
     */
    public final TableField<BbiepRecord, String> BIZ_TERM = createField(DSL.name("biz_term"), SQLDataType.VARCHAR(225).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "Business term to indicate what the BIE is called in a particular business context such as in an industry.");

    /**
     * The column <code>oagi.bbiep.created_by</code>. A foreign key referring to
     * the user who creates the BBIEP. The creator of the BBIEP is also its
     * owner by default. BBIEPs created as children of another ABIE have the
     * same CREATED_BY',
     */
    public final TableField<BbiepRecord, ULong> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A foreign key referring to the user who creates the BBIEP. The creator of the BBIEP is also its owner by default. BBIEPs created as children of another ABIE have the same CREATED_BY',");

    /**
     * The column <code>oagi.bbiep.last_updated_by</code>. A foreign key
     * referring to the last user who has updated the BBIEP record. 
     */
    public final TableField<BbiepRecord, ULong> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A foreign key referring to the last user who has updated the BBIEP record. ");

    /**
     * The column <code>oagi.bbiep.creation_timestamp</code>. Timestamp when the
     * BBIEP record was first created. BBIEPs created as children of another
     * ABIE have the same CREATION_TIMESTAMP,
     */
    public final TableField<BbiepRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Timestamp when the BBIEP record was first created. BBIEPs created as children of another ABIE have the same CREATION_TIMESTAMP,");

    /**
     * The column <code>oagi.bbiep.last_update_timestamp</code>. The timestamp
     * when the BBIEP was last updated.
     */
    public final TableField<BbiepRecord, LocalDateTime> LAST_UPDATE_TIMESTAMP = createField(DSL.name("last_update_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "The timestamp when the BBIEP was last updated.");

    /**
     * The column <code>oagi.bbiep.owner_top_level_asbiep_id</code>. This is a
     * foreign key to the top-level ASBIEP.
     */
    public final TableField<BbiepRecord, ULong> OWNER_TOP_LEVEL_ASBIEP_ID = createField(DSL.name("owner_top_level_asbiep_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "This is a foreign key to the top-level ASBIEP.");

    private Bbiep(Name alias, Table<BbiepRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Bbiep(Name alias, Table<BbiepRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("BBIEP represents the usage of basic property in a specific business context. It is a contextualization of a BCCP."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.bbiep</code> table reference
     */
    public Bbiep(String alias) {
        this(DSL.name(alias), BBIEP);
    }

    /**
     * Create an aliased <code>oagi.bbiep</code> table reference
     */
    public Bbiep(Name alias) {
        this(alias, BBIEP);
    }

    /**
     * Create a <code>oagi.bbiep</code> table reference
     */
    public Bbiep() {
        this(DSL.name("bbiep"), null);
    }

    public <O extends Record> Bbiep(Table<O> path, ForeignKey<O, BbiepRecord> childPath, InverseForeignKey<O, BbiepRecord> parentPath) {
        super(path, childPath, parentPath, BBIEP);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BbiepPath extends Bbiep implements Path<BbiepRecord> {
        public <O extends Record> BbiepPath(Table<O> path, ForeignKey<O, BbiepRecord> childPath, InverseForeignKey<O, BbiepRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BbiepPath(Name alias, Table<BbiepRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BbiepPath as(String alias) {
            return new BbiepPath(DSL.name(alias), this);
        }

        @Override
        public BbiepPath as(Name alias) {
            return new BbiepPath(alias, this);
        }

        @Override
        public BbiepPath as(Table<?> alias) {
            return new BbiepPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.BBIEP_BBIEP_HASH_PATH_K, Indexes.BBIEP_BBIEP_PATH_K);
    }

    @Override
    public Identity<BbiepRecord, ULong> getIdentity() {
        return (Identity<BbiepRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<BbiepRecord> getPrimaryKey() {
        return Keys.KEY_BBIEP_PRIMARY;
    }

    @Override
    public List<ForeignKey<BbiepRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BBIEP_BASED_BCCP_MANIFEST_ID_FK, Keys.BBIEP_CREATED_BY_FK, Keys.BBIEP_LAST_UPDATED_BY_FK, Keys.BBIEP_OWNER_TOP_LEVEL_ASBIEP_ID_FK);
    }

    private transient BccpManifestPath _bccpManifest;

    /**
     * Get the implicit join path to the <code>oagi.bccp_manifest</code> table.
     */
    public BccpManifestPath bccpManifest() {
        if (_bccpManifest == null)
            _bccpManifest = new BccpManifestPath(this, Keys.BBIEP_BASED_BCCP_MANIFEST_ID_FK, null);

        return _bccpManifest;
    }

    private transient AppUserPath _bbiepCreatedByFk;

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>bbiep_created_by_fk</code> key.
     */
    public AppUserPath bbiepCreatedByFk() {
        if (_bbiepCreatedByFk == null)
            _bbiepCreatedByFk = new AppUserPath(this, Keys.BBIEP_CREATED_BY_FK, null);

        return _bbiepCreatedByFk;
    }

    private transient AppUserPath _bbiepLastUpdatedByFk;

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>bbiep_last_updated_by_fk</code> key.
     */
    public AppUserPath bbiepLastUpdatedByFk() {
        if (_bbiepLastUpdatedByFk == null)
            _bbiepLastUpdatedByFk = new AppUserPath(this, Keys.BBIEP_LAST_UPDATED_BY_FK, null);

        return _bbiepLastUpdatedByFk;
    }

    private transient TopLevelAsbiepPath _topLevelAsbiep;

    /**
     * Get the implicit join path to the <code>oagi.top_level_asbiep</code>
     * table.
     */
    public TopLevelAsbiepPath topLevelAsbiep() {
        if (_topLevelAsbiep == null)
            _topLevelAsbiep = new TopLevelAsbiepPath(this, Keys.BBIEP_OWNER_TOP_LEVEL_ASBIEP_ID_FK, null);

        return _topLevelAsbiep;
    }

    private transient BbiePath _bbie;

    /**
     * Get the implicit to-many join path to the <code>oagi.bbie</code> table
     */
    public BbiePath bbie() {
        if (_bbie == null)
            _bbie = new BbiePath(this, null, Keys.BBIE_TO_BBIEP_ID_FK.getInverseKey());

        return _bbie;
    }

    private transient BieUsageRulePath _bieUsageRule;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.bie_usage_rule</code> table
     */
    public BieUsageRulePath bieUsageRule() {
        if (_bieUsageRule == null)
            _bieUsageRule = new BieUsageRulePath(this, null, Keys.BIE_USAGE_RULE_TARGET_BBIEP_ID_FK.getInverseKey());

        return _bieUsageRule;
    }

    @Override
    public Bbiep as(String alias) {
        return new Bbiep(DSL.name(alias), this);
    }

    @Override
    public Bbiep as(Name alias) {
        return new Bbiep(alias, this);
    }

    @Override
    public Bbiep as(Table<?> alias) {
        return new Bbiep(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bbiep rename(String name) {
        return new Bbiep(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bbiep rename(Name name) {
        return new Bbiep(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bbiep rename(Table<?> name) {
        return new Bbiep(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bbiep where(Condition condition) {
        return new Bbiep(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bbiep where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bbiep where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bbiep where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bbiep where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bbiep where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bbiep where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bbiep where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bbiep whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bbiep whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
