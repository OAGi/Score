/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BbieSc.BbieScPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BdtScPriRestri.BdtScPriRestriPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.DtManifest.DtManifestPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.DtSc.DtScPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.DtScManifest.DtScManifestPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Release.ReleasePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.DtScManifestRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DtScManifest extends TableImpl<DtScManifestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.dt_sc_manifest</code>
     */
    public static final DtScManifest DT_SC_MANIFEST = new DtScManifest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DtScManifestRecord> getRecordType() {
        return DtScManifestRecord.class;
    }

    /**
     * The column <code>oagi.dt_sc_manifest.dt_sc_manifest_id</code>.
     */
    public final TableField<DtScManifestRecord, ULong> DT_SC_MANIFEST_ID = createField(DSL.name("dt_sc_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.dt_sc_manifest.release_id</code>.
     */
    public final TableField<DtScManifestRecord, ULong> RELEASE_ID = createField(DSL.name("release_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.dt_sc_manifest.dt_sc_id</code>.
     */
    public final TableField<DtScManifestRecord, ULong> DT_SC_ID = createField(DSL.name("dt_sc_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.dt_sc_manifest.owner_dt_manifest_id</code>.
     */
    public final TableField<DtScManifestRecord, ULong> OWNER_DT_MANIFEST_ID = createField(DSL.name("owner_dt_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.dt_sc_manifest.based_dt_sc_manifest_id</code>.
     */
    public final TableField<DtScManifestRecord, ULong> BASED_DT_SC_MANIFEST_ID = createField(DSL.name("based_dt_sc_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>oagi.dt_sc_manifest.conflict</code>. This indicates that
     * there is a conflict between self and relationship.
     */
    public final TableField<DtScManifestRecord, Byte> CONFLICT = createField(DSL.name("conflict"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "This indicates that there is a conflict between self and relationship.");

    /**
     * The column
     * <code>oagi.dt_sc_manifest.replacement_dt_sc_manifest_id</code>. This
     * refers to a replacement manifest if the record is deprecated.
     */
    public final TableField<DtScManifestRecord, ULong> REPLACEMENT_DT_SC_MANIFEST_ID = createField(DSL.name("replacement_dt_sc_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "This refers to a replacement manifest if the record is deprecated.");

    /**
     * The column <code>oagi.dt_sc_manifest.prev_dt_sc_manifest_id</code>.
     */
    public final TableField<DtScManifestRecord, ULong> PREV_DT_SC_MANIFEST_ID = createField(DSL.name("prev_dt_sc_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>oagi.dt_sc_manifest.next_dt_sc_manifest_id</code>.
     */
    public final TableField<DtScManifestRecord, ULong> NEXT_DT_SC_MANIFEST_ID = createField(DSL.name("next_dt_sc_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "");

    private DtScManifest(Name alias, Table<DtScManifestRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DtScManifest(Name alias, Table<DtScManifestRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.dt_sc_manifest</code> table reference
     */
    public DtScManifest(String alias) {
        this(DSL.name(alias), DT_SC_MANIFEST);
    }

    /**
     * Create an aliased <code>oagi.dt_sc_manifest</code> table reference
     */
    public DtScManifest(Name alias) {
        this(alias, DT_SC_MANIFEST);
    }

    /**
     * Create a <code>oagi.dt_sc_manifest</code> table reference
     */
    public DtScManifest() {
        this(DSL.name("dt_sc_manifest"), null);
    }

    public <O extends Record> DtScManifest(Table<O> path, ForeignKey<O, DtScManifestRecord> childPath, InverseForeignKey<O, DtScManifestRecord> parentPath) {
        super(path, childPath, parentPath, DT_SC_MANIFEST);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DtScManifestPath extends DtScManifest implements Path<DtScManifestRecord> {
        public <O extends Record> DtScManifestPath(Table<O> path, ForeignKey<O, DtScManifestRecord> childPath, InverseForeignKey<O, DtScManifestRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DtScManifestPath(Name alias, Table<DtScManifestRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DtScManifestPath as(String alias) {
            return new DtScManifestPath(DSL.name(alias), this);
        }

        @Override
        public DtScManifestPath as(Name alias) {
            return new DtScManifestPath(alias, this);
        }

        @Override
        public DtScManifestPath as(Table<?> alias) {
            return new DtScManifestPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<DtScManifestRecord, ULong> getIdentity() {
        return (Identity<DtScManifestRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<DtScManifestRecord> getPrimaryKey() {
        return Keys.KEY_DT_SC_MANIFEST_PRIMARY;
    }

    @Override
    public List<ForeignKey<DtScManifestRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DT_SC_MANIFEST_RELEASE_ID_FK, Keys.DT_SC_MANIFEST_DT_SC_ID_FK, Keys.DT_SC_MANIFEST_OWNER_DT_MANIFEST_ID_FK, Keys.BASED_DT_SC_MANIFEST_ID_FK, Keys.DT_SC_REPLACEMENT_DT_SC_MANIFEST_ID_FK, Keys.DT_SC_PREV_DT_SC_MANIFEST_ID_FK, Keys.DT_SC_NEXT_DT_SC_MANIFEST_ID_FK);
    }

    private transient ReleasePath _release;

    /**
     * Get the implicit join path to the <code>oagi.release</code> table.
     */
    public ReleasePath release() {
        if (_release == null)
            _release = new ReleasePath(this, Keys.DT_SC_MANIFEST_RELEASE_ID_FK, null);

        return _release;
    }

    private transient DtScPath _dtSc;

    /**
     * Get the implicit join path to the <code>oagi.dt_sc</code> table.
     */
    public DtScPath dtSc() {
        if (_dtSc == null)
            _dtSc = new DtScPath(this, Keys.DT_SC_MANIFEST_DT_SC_ID_FK, null);

        return _dtSc;
    }

    private transient DtManifestPath _dtManifest;

    /**
     * Get the implicit join path to the <code>oagi.dt_manifest</code> table.
     */
    public DtManifestPath dtManifest() {
        if (_dtManifest == null)
            _dtManifest = new DtManifestPath(this, Keys.DT_SC_MANIFEST_OWNER_DT_MANIFEST_ID_FK, null);

        return _dtManifest;
    }

    private transient DtScManifestPath _basedDtScManifestIdFk;

    /**
     * Get the implicit join path to the <code>oagi.dt_sc_manifest</code> table,
     * via the <code>based_dt_sc_manifest_id_fk</code> key.
     */
    public DtScManifestPath basedDtScManifestIdFk() {
        if (_basedDtScManifestIdFk == null)
            _basedDtScManifestIdFk = new DtScManifestPath(this, Keys.BASED_DT_SC_MANIFEST_ID_FK, null);

        return _basedDtScManifestIdFk;
    }

    private transient DtScManifestPath _dtScReplacementDtScManifestIdFk;

    /**
     * Get the implicit join path to the <code>oagi.dt_sc_manifest</code> table,
     * via the <code>dt_sc_replacement_dt_sc_manifest_id_fk</code> key.
     */
    public DtScManifestPath dtScReplacementDtScManifestIdFk() {
        if (_dtScReplacementDtScManifestIdFk == null)
            _dtScReplacementDtScManifestIdFk = new DtScManifestPath(this, Keys.DT_SC_REPLACEMENT_DT_SC_MANIFEST_ID_FK, null);

        return _dtScReplacementDtScManifestIdFk;
    }

    private transient DtScManifestPath _dtScPrevDtScManifestIdFk;

    /**
     * Get the implicit join path to the <code>oagi.dt_sc_manifest</code> table,
     * via the <code>dt_sc_prev_dt_sc_manifest_id_fk</code> key.
     */
    public DtScManifestPath dtScPrevDtScManifestIdFk() {
        if (_dtScPrevDtScManifestIdFk == null)
            _dtScPrevDtScManifestIdFk = new DtScManifestPath(this, Keys.DT_SC_PREV_DT_SC_MANIFEST_ID_FK, null);

        return _dtScPrevDtScManifestIdFk;
    }

    private transient DtScManifestPath _dtScNextDtScManifestIdFk;

    /**
     * Get the implicit join path to the <code>oagi.dt_sc_manifest</code> table,
     * via the <code>dt_sc_next_dt_sc_manifest_id_fk</code> key.
     */
    public DtScManifestPath dtScNextDtScManifestIdFk() {
        if (_dtScNextDtScManifestIdFk == null)
            _dtScNextDtScManifestIdFk = new DtScManifestPath(this, Keys.DT_SC_NEXT_DT_SC_MANIFEST_ID_FK, null);

        return _dtScNextDtScManifestIdFk;
    }

    private transient BbieScPath _bbieSc;

    /**
     * Get the implicit to-many join path to the <code>oagi.bbie_sc</code> table
     */
    public BbieScPath bbieSc() {
        if (_bbieSc == null)
            _bbieSc = new BbieScPath(this, null, Keys.BBIE_SC_BASED_DT_SC_MANIFEST_ID_FK.getInverseKey());

        return _bbieSc;
    }

    private transient BdtScPriRestriPath _bdtScPriRestri;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.bdt_sc_pri_restri</code> table
     */
    public BdtScPriRestriPath bdtScPriRestri() {
        if (_bdtScPriRestri == null)
            _bdtScPriRestri = new BdtScPriRestriPath(this, null, Keys.BDT_SC_PRI_RESTRI_BDT_MANIFEST_ID_FK.getInverseKey());

        return _bdtScPriRestri;
    }

    @Override
    public DtScManifest as(String alias) {
        return new DtScManifest(DSL.name(alias), this);
    }

    @Override
    public DtScManifest as(Name alias) {
        return new DtScManifest(alias, this);
    }

    @Override
    public DtScManifest as(Table<?> alias) {
        return new DtScManifest(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DtScManifest rename(String name) {
        return new DtScManifest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DtScManifest rename(Name name) {
        return new DtScManifest(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DtScManifest rename(Table<?> name) {
        return new DtScManifest(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DtScManifest where(Condition condition) {
        return new DtScManifest(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DtScManifest where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DtScManifest where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DtScManifest where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DtScManifest where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DtScManifest where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DtScManifest where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DtScManifest where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DtScManifest whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DtScManifest whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
