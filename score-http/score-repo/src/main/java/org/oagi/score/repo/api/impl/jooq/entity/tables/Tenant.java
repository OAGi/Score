/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AppUser.AppUserPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BizCtx.BizCtxPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.TenantBusinessCtx.TenantBusinessCtxPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.UserTenant.UserTenantPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.TenantRecord;


/**
 * This table about the user tenant role.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tenant extends TableImpl<TenantRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.tenant</code>
     */
    public static final Tenant TENANT = new Tenant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TenantRecord> getRecordType() {
        return TenantRecord.class;
    }

    /**
     * The column <code>oagi.tenant.tenant_id</code>. Primary key column.
     */
    public final TableField<TenantRecord, ULong> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key column.");

    /**
     * The column <code>oagi.tenant.name</code>. The name of the tenant.
     */
    public final TableField<TenantRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "The name of the tenant.");

    private Tenant(Name alias, Table<TenantRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Tenant(Name alias, Table<TenantRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("This table about the user tenant role."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.tenant</code> table reference
     */
    public Tenant(String alias) {
        this(DSL.name(alias), TENANT);
    }

    /**
     * Create an aliased <code>oagi.tenant</code> table reference
     */
    public Tenant(Name alias) {
        this(alias, TENANT);
    }

    /**
     * Create a <code>oagi.tenant</code> table reference
     */
    public Tenant() {
        this(DSL.name("tenant"), null);
    }

    public <O extends Record> Tenant(Table<O> path, ForeignKey<O, TenantRecord> childPath, InverseForeignKey<O, TenantRecord> parentPath) {
        super(path, childPath, parentPath, TENANT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TenantPath extends Tenant implements Path<TenantRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TenantPath(Table<O> path, ForeignKey<O, TenantRecord> childPath, InverseForeignKey<O, TenantRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TenantPath(Name alias, Table<TenantRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TenantPath as(String alias) {
            return new TenantPath(DSL.name(alias), this);
        }

        @Override
        public TenantPath as(Name alias) {
            return new TenantPath(alias, this);
        }

        @Override
        public TenantPath as(Table<?> alias) {
            return new TenantPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<TenantRecord, ULong> getIdentity() {
        return (Identity<TenantRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<TenantRecord> getPrimaryKey() {
        return Keys.KEY_TENANT_PRIMARY;
    }

    private transient TenantBusinessCtxPath _tenantBusinessCtx;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.tenant_business_ctx</code> table
     */
    public TenantBusinessCtxPath tenantBusinessCtx() {
        if (_tenantBusinessCtx == null)
            _tenantBusinessCtx = new TenantBusinessCtxPath(this, null, Keys.TENANT_BUSINESS_CTX_TENANT_ID_FK.getInverseKey());

        return _tenantBusinessCtx;
    }

    private transient UserTenantPath _userTenant;

    /**
     * Get the implicit to-many join path to the <code>oagi.user_tenant</code>
     * table
     */
    public UserTenantPath userTenant() {
        if (_userTenant == null)
            _userTenant = new UserTenantPath(this, null, Keys.USER_TENANT_TENANT_ID_FK.getInverseKey());

        return _userTenant;
    }

    /**
     * Get the implicit many-to-many join path to the <code>oagi.biz_ctx</code>
     * table
     */
    public BizCtxPath bizCtx() {
        return tenantBusinessCtx().bizCtx();
    }

    /**
     * Get the implicit many-to-many join path to the <code>oagi.app_user</code>
     * table
     */
    public AppUserPath appUser() {
        return userTenant().appUser();
    }

    @Override
    public Tenant as(String alias) {
        return new Tenant(DSL.name(alias), this);
    }

    @Override
    public Tenant as(Name alias) {
        return new Tenant(alias, this);
    }

    @Override
    public Tenant as(Table<?> alias) {
        return new Tenant(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tenant rename(String name) {
        return new Tenant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tenant rename(Name name) {
        return new Tenant(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tenant rename(Table<?> name) {
        return new Tenant(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tenant where(Condition condition) {
        return new Tenant(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tenant where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tenant where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tenant where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tenant where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tenant where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tenant where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tenant where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tenant whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tenant whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
