/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.OasParameterRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OasParameter extends TableImpl<OasParameterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.oas_parameter</code>
     */
    public static final OasParameter OAS_PARAMETER = new OasParameter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OasParameterRecord> getRecordType() {
        return OasParameterRecord.class;
    }

    /**
     * The column <code>oagi.oas_parameter.oas_parameter_id</code>. The primary
     * key of the record.
     */
    public final TableField<OasParameterRecord, ULong> OAS_PARAMETER_ID = createField(DSL.name("oas_parameter_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "The primary key of the record.");

    /**
     * The column <code>oagi.oas_parameter.guid</code>. The GUID of the record.
     */
    public final TableField<OasParameterRecord, String> GUID = createField(DSL.name("guid"), SQLDataType.VARCHAR(41).nullable(false), this, "The GUID of the record.");

    /**
     * The column <code>oagi.oas_parameter.name</code>. REQUIRED. The name of
     * the parameter. Parameter names are case sensitive.
     * If in is "path", the name field MUST correspond to a template expression
     * occurring within the path field in the Paths Object. See Path Templating
     * for further information.
     * If in is "header" and the name field is "Accept", "Content-Type" or
     * "Authorization", the parameter definition SHALL be ignored.
     * For all other cases, the name corresponds to the parameter name used by
     * the in property.
     */
    public final TableField<OasParameterRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(200).nullable(false), this, "REQUIRED. The name of the parameter. Parameter names are case sensitive.\nIf in is \"path\", the name field MUST correspond to a template expression occurring within the path field in the Paths Object. See Path Templating for further information.\nIf in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\nFor all other cases, the name corresponds to the parameter name used by the in property.");

    /**
     * The column <code>oagi.oas_parameter.in</code>. REQUIRED. The location of
     * the parameter. Possible values are "query", "header", "path" or "cookie".
     */
    public final TableField<OasParameterRecord, String> IN = createField(DSL.name("in"), SQLDataType.VARCHAR(100).nullable(false), this, "REQUIRED. The location of the parameter. Possible values are \"query\", \"header\", \"path\" or \"cookie\".");

    /**
     * The column <code>oagi.oas_parameter.required</code>. Determines whether
     * this parameter is mandatory. If the parameter location is "path", this
     * property is REQUIRED and its value MUST be true. Otherwise, the property
     * MAY be included and its default value is false.
     */
    public final TableField<OasParameterRecord, Byte> REQUIRED = createField(DSL.name("required"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Determines whether this parameter is mandatory. If the parameter location is \"path\", this property is REQUIRED and its value MUST be true. Otherwise, the property MAY be included and its default value is false.");

    /**
     * The column <code>oagi.oas_parameter.description</code>. A brief
     * description of the parameter. This could contain examples of use.
     * CommonMark syntax MAY be used for rich text representation.
     */
    public final TableField<OasParameterRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "A brief description of the parameter. This could contain examples of use. CommonMark syntax MAY be used for rich text representation.");

    /**
     * The column <code>oagi.oas_parameter.schema_type_reference</code>. A
     * reference of the schema defining the type used for the parameter.
     */
    public final TableField<OasParameterRecord, String> SCHEMA_TYPE_REFERENCE = createField(DSL.name("schema_type_reference"), SQLDataType.CLOB.nullable(false), this, "A reference of the schema defining the type used for the parameter.");

    /**
     * The column <code>oagi.oas_parameter.allow_reserved</code>. Determines
     * whether the parameter value SHOULD allow reserved characters, as defined
     * by RFC3986 :/?#[]@!$&amp;'()*+,;= to be included without
     * percent-encoding. This property only applies to parameters with an in
     * value of query. The default value is false.
     */
    public final TableField<OasParameterRecord, Byte> ALLOW_RESERVED = createField(DSL.name("allow_reserved"), SQLDataType.TINYINT.defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Determines whether the parameter value SHOULD allow reserved characters, as defined by RFC3986 :/?#[]@!$&'()*+,;= to be included without percent-encoding. This property only applies to parameters with an in value of query. The default value is false.");

    /**
     * The column <code>oagi.oas_parameter.deprecated</code>. Specifies that a
     * parameter is deprecated and SHOULD be transitioned out of usage. Default
     * value is false.
     */
    public final TableField<OasParameterRecord, Byte> DEPRECATED = createField(DSL.name("deprecated"), SQLDataType.TINYINT.defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Specifies that a parameter is deprecated and SHOULD be transitioned out of usage. Default value is false.");

    /**
     * The column <code>oagi.oas_parameter.oas_http_header_id</code>. IF IN =
     * Header, Then select form OAS_HTTP_HEADER table
     */
    public final TableField<OasParameterRecord, ULong> OAS_HTTP_HEADER_ID = createField(DSL.name("oas_http_header_id"), SQLDataType.BIGINTUNSIGNED, this, "IF IN = Header, Then select form OAS_HTTP_HEADER table");

    /**
     * The column <code>oagi.oas_parameter.created_by</code>. The user who
     * creates the record.
     */
    public final TableField<OasParameterRecord, ULong> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The user who creates the record.");

    /**
     * The column <code>oagi.oas_parameter.last_updated_by</code>. The user who
     * last updates the record.
     */
    public final TableField<OasParameterRecord, ULong> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The user who last updates the record.");

    /**
     * The column <code>oagi.oas_parameter.creation_timestamp</code>. The
     * timestamp when the record is created.
     */
    public final TableField<OasParameterRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "The timestamp when the record is created.");

    /**
     * The column <code>oagi.oas_parameter.last_update_timestamp</code>. The
     * timestamp when the record is last updated.
     */
    public final TableField<OasParameterRecord, LocalDateTime> LAST_UPDATE_TIMESTAMP = createField(DSL.name("last_update_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "The timestamp when the record is last updated.");

    private OasParameter(Name alias, Table<OasParameterRecord> aliased) {
        this(alias, aliased, null);
    }

    private OasParameter(Name alias, Table<OasParameterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>oagi.oas_parameter</code> table reference
     */
    public OasParameter(String alias) {
        this(DSL.name(alias), OAS_PARAMETER);
    }

    /**
     * Create an aliased <code>oagi.oas_parameter</code> table reference
     */
    public OasParameter(Name alias) {
        this(alias, OAS_PARAMETER);
    }

    /**
     * Create a <code>oagi.oas_parameter</code> table reference
     */
    public OasParameter() {
        this(DSL.name("oas_parameter"), null);
    }

    public <O extends Record> OasParameter(Table<O> child, ForeignKey<O, OasParameterRecord> key) {
        super(child, key, OAS_PARAMETER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<OasParameterRecord, ULong> getIdentity() {
        return (Identity<OasParameterRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<OasParameterRecord> getPrimaryKey() {
        return Keys.KEY_OAS_PARAMETER_PRIMARY;
    }

    @Override
    public List<ForeignKey<OasParameterRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OAS_PARAMETER_OAS_HTTP_HEADER_ID_FK, Keys.OAS_PARAMETER_CREATED_BY_FK, Keys.OAS_PARAMETER_LAST_UPDATED_BY_FK);
    }

    private transient OasHttpHeader _oasHttpHeader;
    private transient AppUser _oasParameterCreatedByFk;
    private transient AppUser _oasParameterLastUpdatedByFk;

    /**
     * Get the implicit join path to the <code>oagi.oas_http_header</code>
     * table.
     */
    public OasHttpHeader oasHttpHeader() {
        if (_oasHttpHeader == null)
            _oasHttpHeader = new OasHttpHeader(this, Keys.OAS_PARAMETER_OAS_HTTP_HEADER_ID_FK);

        return _oasHttpHeader;
    }

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>oas_parameter_created_by_fk</code> key.
     */
    public AppUser oasParameterCreatedByFk() {
        if (_oasParameterCreatedByFk == null)
            _oasParameterCreatedByFk = new AppUser(this, Keys.OAS_PARAMETER_CREATED_BY_FK);

        return _oasParameterCreatedByFk;
    }

    /**
     * Get the implicit join path to the <code>oagi.app_user</code> table, via
     * the <code>oas_parameter_last_updated_by_fk</code> key.
     */
    public AppUser oasParameterLastUpdatedByFk() {
        if (_oasParameterLastUpdatedByFk == null)
            _oasParameterLastUpdatedByFk = new AppUser(this, Keys.OAS_PARAMETER_LAST_UPDATED_BY_FK);

        return _oasParameterLastUpdatedByFk;
    }

    @Override
    public OasParameter as(String alias) {
        return new OasParameter(DSL.name(alias), this);
    }

    @Override
    public OasParameter as(Name alias) {
        return new OasParameter(alias, this);
    }

    @Override
    public OasParameter as(Table<?> alias) {
        return new OasParameter(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OasParameter rename(String name) {
        return new OasParameter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OasParameter rename(Name name) {
        return new OasParameter(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OasParameter rename(Table<?> name) {
        return new OasParameter(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<ULong, String, String, String, Byte, String, String, Byte, Byte, ULong, ULong, ULong, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super ULong, ? super String, ? super String, ? super String, ? super Byte, ? super String, ? super String, ? super Byte, ? super Byte, ? super ULong, ? super ULong, ? super ULong, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super ULong, ? super String, ? super String, ? super String, ? super Byte, ? super String, ? super String, ? super Byte, ? super Byte, ? super ULong, ? super ULong, ? super ULong, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
