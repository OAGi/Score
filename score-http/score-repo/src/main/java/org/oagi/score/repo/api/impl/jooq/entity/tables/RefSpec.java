/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CdtRefSpec.CdtRefSpecPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CdtScRefSpec.CdtScRefSpecPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.RefSpecRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RefSpec extends TableImpl<RefSpecRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.ref_spec</code>
     */
    public static final RefSpec REF_SPEC = new RefSpec();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RefSpecRecord> getRecordType() {
        return RefSpecRecord.class;
    }

    /**
     * The column <code>oagi.ref_spec.ref_spec_id</code>.
     */
    public final TableField<RefSpecRecord, ULong> REF_SPEC_ID = createField(DSL.name("ref_spec_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.ref_spec.spec</code>.
     */
    public final TableField<RefSpecRecord, String> SPEC = createField(DSL.name("spec"), SQLDataType.VARCHAR(30).nullable(false).defaultValue(DSL.field(DSL.raw("''"), SQLDataType.VARCHAR)), this, "");

    private RefSpec(Name alias, Table<RefSpecRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RefSpec(Name alias, Table<RefSpecRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.ref_spec</code> table reference
     */
    public RefSpec(String alias) {
        this(DSL.name(alias), REF_SPEC);
    }

    /**
     * Create an aliased <code>oagi.ref_spec</code> table reference
     */
    public RefSpec(Name alias) {
        this(alias, REF_SPEC);
    }

    /**
     * Create a <code>oagi.ref_spec</code> table reference
     */
    public RefSpec() {
        this(DSL.name("ref_spec"), null);
    }

    public <O extends Record> RefSpec(Table<O> path, ForeignKey<O, RefSpecRecord> childPath, InverseForeignKey<O, RefSpecRecord> parentPath) {
        super(path, childPath, parentPath, REF_SPEC);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RefSpecPath extends RefSpec implements Path<RefSpecRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> RefSpecPath(Table<O> path, ForeignKey<O, RefSpecRecord> childPath, InverseForeignKey<O, RefSpecRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RefSpecPath(Name alias, Table<RefSpecRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RefSpecPath as(String alias) {
            return new RefSpecPath(DSL.name(alias), this);
        }

        @Override
        public RefSpecPath as(Name alias) {
            return new RefSpecPath(alias, this);
        }

        @Override
        public RefSpecPath as(Table<?> alias) {
            return new RefSpecPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<RefSpecRecord, ULong> getIdentity() {
        return (Identity<RefSpecRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<RefSpecRecord> getPrimaryKey() {
        return Keys.KEY_REF_SPEC_PRIMARY;
    }

    private transient CdtRefSpecPath _cdtRefSpec;

    /**
     * Get the implicit to-many join path to the <code>oagi.cdt_ref_spec</code>
     * table
     */
    public CdtRefSpecPath cdtRefSpec() {
        if (_cdtRefSpec == null)
            _cdtRefSpec = new CdtRefSpecPath(this, null, Keys.CDT_REF_SPEC_REF_SPEC_ID_FK.getInverseKey());

        return _cdtRefSpec;
    }

    private transient CdtScRefSpecPath _cdtScRefSpec;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.cdt_sc_ref_spec</code> table
     */
    public CdtScRefSpecPath cdtScRefSpec() {
        if (_cdtScRefSpec == null)
            _cdtScRefSpec = new CdtScRefSpecPath(this, null, Keys.CDT_SC_REF_SPEC_REF_SPEC_ID_FK.getInverseKey());

        return _cdtScRefSpec;
    }

    @Override
    public RefSpec as(String alias) {
        return new RefSpec(DSL.name(alias), this);
    }

    @Override
    public RefSpec as(Name alias) {
        return new RefSpec(alias, this);
    }

    @Override
    public RefSpec as(Table<?> alias) {
        return new RefSpec(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RefSpec rename(String name) {
        return new RefSpec(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RefSpec rename(Name name) {
        return new RefSpec(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RefSpec rename(Table<?> name) {
        return new RefSpec(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RefSpec where(Condition condition) {
        return new RefSpec(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RefSpec where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RefSpec where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RefSpec where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RefSpec where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RefSpec where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RefSpec where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RefSpec where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RefSpec whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RefSpec whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
