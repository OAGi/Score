/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CdtAwdPriXpsTypeMap.CdtAwdPriXpsTypeMapPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CdtPri.CdtPriPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Dt.DtPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.CdtAwdPriRecord;


/**
 * This table capture allowed primitives of the CDT?s Content Component.  The
 * information in this table is captured from the Allowed Primitive column in
 * each of the CDT Content Component section/table in CCTS DTC3.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CdtAwdPri extends TableImpl<CdtAwdPriRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.cdt_awd_pri</code>
     */
    public static final CdtAwdPri CDT_AWD_PRI = new CdtAwdPri();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CdtAwdPriRecord> getRecordType() {
        return CdtAwdPriRecord.class;
    }

    /**
     * The column <code>oagi.cdt_awd_pri.cdt_awd_pri_id</code>. Primary,
     * internal database key.
     */
    public final TableField<CdtAwdPriRecord, ULong> CDT_AWD_PRI_ID = createField(DSL.name("cdt_awd_pri_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary, internal database key.");

    /**
     * The column <code>oagi.cdt_awd_pri.cdt_id</code>. Foreign key pointing to
     * a CDT in the DT table.
     */
    public final TableField<CdtAwdPriRecord, ULong> CDT_ID = createField(DSL.name("cdt_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key pointing to a CDT in the DT table.");

    /**
     * The column <code>oagi.cdt_awd_pri.cdt_pri_id</code>. Foreign key from the
     * CDT_PRI table. It indicates the primative allowed for the CDT identified
     * in the CDT_ID column. 
     */
    public final TableField<CdtAwdPriRecord, ULong> CDT_PRI_ID = createField(DSL.name("cdt_pri_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Foreign key from the CDT_PRI table. It indicates the primative allowed for the CDT identified in the CDT_ID column. ");

    /**
     * The column <code>oagi.cdt_awd_pri.is_default</code>. Indicating a default
     * primitive for the CDT?s Content Component. True for a default primitive;
     * False otherwise.
     */
    public final TableField<CdtAwdPriRecord, Byte> IS_DEFAULT = createField(DSL.name("is_default"), SQLDataType.TINYINT.nullable(false), this, "Indicating a default primitive for the CDT?s Content Component. True for a default primitive; False otherwise.");

    private CdtAwdPri(Name alias, Table<CdtAwdPriRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CdtAwdPri(Name alias, Table<CdtAwdPriRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("This table capture allowed primitives of the CDT?s Content Component.  The information in this table is captured from the Allowed Primitive column in each of the CDT Content Component section/table in CCTS DTC3."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.cdt_awd_pri</code> table reference
     */
    public CdtAwdPri(String alias) {
        this(DSL.name(alias), CDT_AWD_PRI);
    }

    /**
     * Create an aliased <code>oagi.cdt_awd_pri</code> table reference
     */
    public CdtAwdPri(Name alias) {
        this(alias, CDT_AWD_PRI);
    }

    /**
     * Create a <code>oagi.cdt_awd_pri</code> table reference
     */
    public CdtAwdPri() {
        this(DSL.name("cdt_awd_pri"), null);
    }

    public <O extends Record> CdtAwdPri(Table<O> path, ForeignKey<O, CdtAwdPriRecord> childPath, InverseForeignKey<O, CdtAwdPriRecord> parentPath) {
        super(path, childPath, parentPath, CDT_AWD_PRI);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CdtAwdPriPath extends CdtAwdPri implements Path<CdtAwdPriRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CdtAwdPriPath(Table<O> path, ForeignKey<O, CdtAwdPriRecord> childPath, InverseForeignKey<O, CdtAwdPriRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CdtAwdPriPath(Name alias, Table<CdtAwdPriRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CdtAwdPriPath as(String alias) {
            return new CdtAwdPriPath(DSL.name(alias), this);
        }

        @Override
        public CdtAwdPriPath as(Name alias) {
            return new CdtAwdPriPath(alias, this);
        }

        @Override
        public CdtAwdPriPath as(Table<?> alias) {
            return new CdtAwdPriPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<CdtAwdPriRecord, ULong> getIdentity() {
        return (Identity<CdtAwdPriRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CdtAwdPriRecord> getPrimaryKey() {
        return Keys.KEY_CDT_AWD_PRI_PRIMARY;
    }

    @Override
    public List<ForeignKey<CdtAwdPriRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CDT_AWD_PRI_CDT_ID_FK, Keys.CDT_AWD_PRI_CDT_PRI_ID_FK);
    }

    private transient DtPath _dt;

    /**
     * Get the implicit join path to the <code>oagi.dt</code> table.
     */
    public DtPath dt() {
        if (_dt == null)
            _dt = new DtPath(this, Keys.CDT_AWD_PRI_CDT_ID_FK, null);

        return _dt;
    }

    private transient CdtPriPath _cdtPri;

    /**
     * Get the implicit join path to the <code>oagi.cdt_pri</code> table.
     */
    public CdtPriPath cdtPri() {
        if (_cdtPri == null)
            _cdtPri = new CdtPriPath(this, Keys.CDT_AWD_PRI_CDT_PRI_ID_FK, null);

        return _cdtPri;
    }

    private transient CdtAwdPriXpsTypeMapPath _cdtAwdPriXpsTypeMap;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.cdt_awd_pri_xps_type_map</code> table
     */
    public CdtAwdPriXpsTypeMapPath cdtAwdPriXpsTypeMap() {
        if (_cdtAwdPriXpsTypeMap == null)
            _cdtAwdPriXpsTypeMap = new CdtAwdPriXpsTypeMapPath(this, null, Keys.CDT_AWD_PRI_XPS_TYPE_MAP_CDT_AWD_PRI_ID_FK.getInverseKey());

        return _cdtAwdPriXpsTypeMap;
    }

    @Override
    public CdtAwdPri as(String alias) {
        return new CdtAwdPri(DSL.name(alias), this);
    }

    @Override
    public CdtAwdPri as(Name alias) {
        return new CdtAwdPri(alias, this);
    }

    @Override
    public CdtAwdPri as(Table<?> alias) {
        return new CdtAwdPri(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CdtAwdPri rename(String name) {
        return new CdtAwdPri(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CdtAwdPri rename(Name name) {
        return new CdtAwdPri(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CdtAwdPri rename(Table<?> name) {
        return new CdtAwdPri(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CdtAwdPri where(Condition condition) {
        return new CdtAwdPri(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CdtAwdPri where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CdtAwdPri where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CdtAwdPri where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CdtAwdPri where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CdtAwdPri where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CdtAwdPri where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CdtAwdPri where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CdtAwdPri whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CdtAwdPri whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
