/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AccManifest.AccManifestPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Bbie.BbiePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Bcc.BccPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BccManifest.BccManifestPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BccpManifest.BccpManifestPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Release.ReleasePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.SeqKey.SeqKeyPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BccManifestRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BccManifest extends TableImpl<BccManifestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.bcc_manifest</code>
     */
    public static final BccManifest BCC_MANIFEST = new BccManifest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BccManifestRecord> getRecordType() {
        return BccManifestRecord.class;
    }

    /**
     * The column <code>oagi.bcc_manifest.bcc_manifest_id</code>.
     */
    public final TableField<BccManifestRecord, ULong> BCC_MANIFEST_ID = createField(DSL.name("bcc_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.bcc_manifest.release_id</code>.
     */
    public final TableField<BccManifestRecord, ULong> RELEASE_ID = createField(DSL.name("release_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>oagi.bcc_manifest.bcc_id</code>.
     */
    public final TableField<BccManifestRecord, ULong> BCC_ID = createField(DSL.name("bcc_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.bcc_manifest.seq_key_id</code>.
     */
    public final TableField<BccManifestRecord, ULong> SEQ_KEY_ID = createField(DSL.name("seq_key_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>oagi.bcc_manifest.from_acc_manifest_id</code>.
     */
    public final TableField<BccManifestRecord, ULong> FROM_ACC_MANIFEST_ID = createField(DSL.name("from_acc_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.bcc_manifest.to_bccp_manifest_id</code>.
     */
    public final TableField<BccManifestRecord, ULong> TO_BCCP_MANIFEST_ID = createField(DSL.name("to_bccp_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.bcc_manifest.den</code>. DEN (dictionary entry
     * name) of the BCC. This column can be derived from QUALIFIER and
     * OBJECT_CLASS_TERM of the FROM_ACC_ID and DEN of the TO_BCCP_ID as
     * QUALIFIER + "_ " + OBJECT_CLASS_TERM + ". " + DEN.
     */
    public final TableField<BccManifestRecord, String> DEN = createField(DSL.name("den"), SQLDataType.VARCHAR(351).nullable(false), this, "DEN (dictionary entry name) of the BCC. This column can be derived from QUALIFIER and OBJECT_CLASS_TERM of the FROM_ACC_ID and DEN of the TO_BCCP_ID as QUALIFIER + \"_ \" + OBJECT_CLASS_TERM + \". \" + DEN.");

    /**
     * The column <code>oagi.bcc_manifest.conflict</code>. This indicates that
     * there is a conflict between self and relationship.
     */
    public final TableField<BccManifestRecord, Byte> CONFLICT = createField(DSL.name("conflict"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "This indicates that there is a conflict between self and relationship.");

    /**
     * The column <code>oagi.bcc_manifest.replacement_bcc_manifest_id</code>.
     * This refers to a replacement manifest if the record is deprecated.
     */
    public final TableField<BccManifestRecord, ULong> REPLACEMENT_BCC_MANIFEST_ID = createField(DSL.name("replacement_bcc_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "This refers to a replacement manifest if the record is deprecated.");

    /**
     * The column <code>oagi.bcc_manifest.prev_bcc_manifest_id</code>.
     */
    public final TableField<BccManifestRecord, ULong> PREV_BCC_MANIFEST_ID = createField(DSL.name("prev_bcc_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>oagi.bcc_manifest.next_bcc_manifest_id</code>.
     */
    public final TableField<BccManifestRecord, ULong> NEXT_BCC_MANIFEST_ID = createField(DSL.name("next_bcc_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "");

    private BccManifest(Name alias, Table<BccManifestRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BccManifest(Name alias, Table<BccManifestRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.bcc_manifest</code> table reference
     */
    public BccManifest(String alias) {
        this(DSL.name(alias), BCC_MANIFEST);
    }

    /**
     * Create an aliased <code>oagi.bcc_manifest</code> table reference
     */
    public BccManifest(Name alias) {
        this(alias, BCC_MANIFEST);
    }

    /**
     * Create a <code>oagi.bcc_manifest</code> table reference
     */
    public BccManifest() {
        this(DSL.name("bcc_manifest"), null);
    }

    public <O extends Record> BccManifest(Table<O> path, ForeignKey<O, BccManifestRecord> childPath, InverseForeignKey<O, BccManifestRecord> parentPath) {
        super(path, childPath, parentPath, BCC_MANIFEST);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BccManifestPath extends BccManifest implements Path<BccManifestRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BccManifestPath(Table<O> path, ForeignKey<O, BccManifestRecord> childPath, InverseForeignKey<O, BccManifestRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BccManifestPath(Name alias, Table<BccManifestRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BccManifestPath as(String alias) {
            return new BccManifestPath(DSL.name(alias), this);
        }

        @Override
        public BccManifestPath as(Name alias) {
            return new BccManifestPath(alias, this);
        }

        @Override
        public BccManifestPath as(Table<?> alias) {
            return new BccManifestPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<BccManifestRecord, ULong> getIdentity() {
        return (Identity<BccManifestRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<BccManifestRecord> getPrimaryKey() {
        return Keys.KEY_BCC_MANIFEST_PRIMARY;
    }

    @Override
    public List<ForeignKey<BccManifestRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BCC_MANIFEST_BCC_ID_FK, Keys.BCC_MANIFEST_FROM_ACC_MANIFEST_ID_FK, Keys.BCC_MANIFEST_NEXT_BCC_MANIFEST_ID_FK, Keys.BCC_MANIFEST_PREV_BCC_MANIFEST_ID_FK, Keys.BCC_MANIFEST_RELEASE_ID_FK, Keys.BCC_MANIFEST_SEQ_KEY_ID_FK, Keys.BCC_MANIFEST_TO_BCCP_MANIFEST_ID_FK, Keys.BCC_REPLACEMENT_BCC_MANIFEST_ID_FK);
    }

    private transient BccPath _bcc;

    /**
     * Get the implicit join path to the <code>oagi.bcc</code> table.
     */
    public BccPath bcc() {
        if (_bcc == null)
            _bcc = new BccPath(this, Keys.BCC_MANIFEST_BCC_ID_FK, null);

        return _bcc;
    }

    private transient AccManifestPath _accManifest;

    /**
     * Get the implicit join path to the <code>oagi.acc_manifest</code> table.
     */
    public AccManifestPath accManifest() {
        if (_accManifest == null)
            _accManifest = new AccManifestPath(this, Keys.BCC_MANIFEST_FROM_ACC_MANIFEST_ID_FK, null);

        return _accManifest;
    }

    private transient BccManifestPath _bccManifestNextBccManifestIdFk;

    /**
     * Get the implicit join path to the <code>oagi.bcc_manifest</code> table,
     * via the <code>bcc_manifest_next_bcc_manifest_id_fk</code> key.
     */
    public BccManifestPath bccManifestNextBccManifestIdFk() {
        if (_bccManifestNextBccManifestIdFk == null)
            _bccManifestNextBccManifestIdFk = new BccManifestPath(this, Keys.BCC_MANIFEST_NEXT_BCC_MANIFEST_ID_FK, null);

        return _bccManifestNextBccManifestIdFk;
    }

    private transient BccManifestPath _bccManifestPrevBccManifestIdFk;

    /**
     * Get the implicit join path to the <code>oagi.bcc_manifest</code> table,
     * via the <code>bcc_manifest_prev_bcc_manifest_id_fk</code> key.
     */
    public BccManifestPath bccManifestPrevBccManifestIdFk() {
        if (_bccManifestPrevBccManifestIdFk == null)
            _bccManifestPrevBccManifestIdFk = new BccManifestPath(this, Keys.BCC_MANIFEST_PREV_BCC_MANIFEST_ID_FK, null);

        return _bccManifestPrevBccManifestIdFk;
    }

    private transient ReleasePath _release;

    /**
     * Get the implicit join path to the <code>oagi.release</code> table.
     */
    public ReleasePath release() {
        if (_release == null)
            _release = new ReleasePath(this, Keys.BCC_MANIFEST_RELEASE_ID_FK, null);

        return _release;
    }

    private transient SeqKeyPath _seqKey;

    /**
     * Get the implicit join path to the <code>oagi.seq_key</code> table.
     */
    public SeqKeyPath seqKey() {
        if (_seqKey == null)
            _seqKey = new SeqKeyPath(this, Keys.BCC_MANIFEST_SEQ_KEY_ID_FK, null);

        return _seqKey;
    }

    private transient BccpManifestPath _bccpManifest;

    /**
     * Get the implicit join path to the <code>oagi.bccp_manifest</code> table.
     */
    public BccpManifestPath bccpManifest() {
        if (_bccpManifest == null)
            _bccpManifest = new BccpManifestPath(this, Keys.BCC_MANIFEST_TO_BCCP_MANIFEST_ID_FK, null);

        return _bccpManifest;
    }

    private transient BccManifestPath _bccReplacementBccManifestIdFk;

    /**
     * Get the implicit join path to the <code>oagi.bcc_manifest</code> table,
     * via the <code>bcc_replacement_bcc_manifest_id_fk</code> key.
     */
    public BccManifestPath bccReplacementBccManifestIdFk() {
        if (_bccReplacementBccManifestIdFk == null)
            _bccReplacementBccManifestIdFk = new BccManifestPath(this, Keys.BCC_REPLACEMENT_BCC_MANIFEST_ID_FK, null);

        return _bccReplacementBccManifestIdFk;
    }

    private transient BbiePath _bbie;

    /**
     * Get the implicit to-many join path to the <code>oagi.bbie</code> table
     */
    public BbiePath bbie() {
        if (_bbie == null)
            _bbie = new BbiePath(this, null, Keys.BBIE_BASED_BCC_MANIFEST_ID_FK.getInverseKey());

        return _bbie;
    }

    @Override
    public BccManifest as(String alias) {
        return new BccManifest(DSL.name(alias), this);
    }

    @Override
    public BccManifest as(Name alias) {
        return new BccManifest(alias, this);
    }

    @Override
    public BccManifest as(Table<?> alias) {
        return new BccManifest(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BccManifest rename(String name) {
        return new BccManifest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BccManifest rename(Name name) {
        return new BccManifest(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BccManifest rename(Table<?> name) {
        return new BccManifest(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BccManifest where(Condition condition) {
        return new BccManifest(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BccManifest where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BccManifest where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BccManifest where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BccManifest where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BccManifest where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BccManifest where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BccManifest where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BccManifest whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BccManifest whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
