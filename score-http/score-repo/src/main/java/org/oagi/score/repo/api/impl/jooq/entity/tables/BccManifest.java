/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BccManifestRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BccManifest extends TableImpl<BccManifestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.bcc_manifest</code>
     */
    public static final BccManifest BCC_MANIFEST = new BccManifest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BccManifestRecord> getRecordType() {
        return BccManifestRecord.class;
    }

    /**
     * The column <code>oagi.bcc_manifest.bcc_manifest_id</code>.
     */
    public final TableField<BccManifestRecord, ULong> BCC_MANIFEST_ID = createField(DSL.name("bcc_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.bcc_manifest.release_id</code>.
     */
    public final TableField<BccManifestRecord, ULong> RELEASE_ID = createField(DSL.name("release_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.bcc_manifest.bcc_id</code>.
     */
    public final TableField<BccManifestRecord, ULong> BCC_ID = createField(DSL.name("bcc_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.bcc_manifest.seq_key_id</code>.
     */
    public final TableField<BccManifestRecord, ULong> SEQ_KEY_ID = createField(DSL.name("seq_key_id"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>oagi.bcc_manifest.from_acc_manifest_id</code>.
     */
    public final TableField<BccManifestRecord, ULong> FROM_ACC_MANIFEST_ID = createField(DSL.name("from_acc_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.bcc_manifest.to_bccp_manifest_id</code>.
     */
    public final TableField<BccManifestRecord, ULong> TO_BCCP_MANIFEST_ID = createField(DSL.name("to_bccp_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.bcc_manifest.conflict</code>. This indicates that there is a conflict between self and relationship.
     */
    public final TableField<BccManifestRecord, Byte> CONFLICT = createField(DSL.name("conflict"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "This indicates that there is a conflict between self and relationship.");

    /**
     * The column <code>oagi.bcc_manifest.replacement_bcc_manifest_id</code>. This refers to a replacement manifest if the record is deprecated.
     */
    public final TableField<BccManifestRecord, ULong> REPLACEMENT_BCC_MANIFEST_ID = createField(DSL.name("replacement_bcc_manifest_id"), SQLDataType.BIGINTUNSIGNED, this, "This refers to a replacement manifest if the record is deprecated.");

    /**
     * The column <code>oagi.bcc_manifest.prev_bcc_manifest_id</code>.
     */
    public final TableField<BccManifestRecord, ULong> PREV_BCC_MANIFEST_ID = createField(DSL.name("prev_bcc_manifest_id"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>oagi.bcc_manifest.next_bcc_manifest_id</code>.
     */
    public final TableField<BccManifestRecord, ULong> NEXT_BCC_MANIFEST_ID = createField(DSL.name("next_bcc_manifest_id"), SQLDataType.BIGINTUNSIGNED, this, "");

    private BccManifest(Name alias, Table<BccManifestRecord> aliased) {
        this(alias, aliased, null);
    }

    private BccManifest(Name alias, Table<BccManifestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>oagi.bcc_manifest</code> table reference
     */
    public BccManifest(String alias) {
        this(DSL.name(alias), BCC_MANIFEST);
    }

    /**
     * Create an aliased <code>oagi.bcc_manifest</code> table reference
     */
    public BccManifest(Name alias) {
        this(alias, BCC_MANIFEST);
    }

    /**
     * Create a <code>oagi.bcc_manifest</code> table reference
     */
    public BccManifest() {
        this(DSL.name("bcc_manifest"), null);
    }

    public <O extends Record> BccManifest(Table<O> child, ForeignKey<O, BccManifestRecord> key) {
        super(child, key, BCC_MANIFEST);
    }

    @Override
    public Schema getSchema() {
        return Oagi.OAGI;
    }

    @Override
    public Identity<BccManifestRecord, ULong> getIdentity() {
        return (Identity<BccManifestRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<BccManifestRecord> getPrimaryKey() {
        return Keys.KEY_BCC_MANIFEST_PRIMARY;
    }

    @Override
    public List<UniqueKey<BccManifestRecord>> getKeys() {
        return Arrays.<UniqueKey<BccManifestRecord>>asList(Keys.KEY_BCC_MANIFEST_PRIMARY);
    }

    @Override
    public List<ForeignKey<BccManifestRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BccManifestRecord, ?>>asList(Keys.BCC_MANIFEST_RELEASE_ID_FK, Keys.BCC_MANIFEST_BCC_ID_FK, Keys.BCC_MANIFEST_SEQ_KEY_ID_FK, Keys.BCC_MANIFEST_FROM_ACC_MANIFEST_ID_FK, Keys.BCC_MANIFEST_TO_BCCP_MANIFEST_ID_FK, Keys.BCC_REPLACEMENT_BCC_MANIFEST_ID_FK, Keys.BCC_MANIFEST_PREV_BCC_MANIFEST_ID_FK, Keys.BCC_MANIFEST_NEXT_BCC_MANIFEST_ID_FK);
    }

    public Release release() {
        return new Release(this, Keys.BCC_MANIFEST_RELEASE_ID_FK);
    }

    public Bcc bcc() {
        return new Bcc(this, Keys.BCC_MANIFEST_BCC_ID_FK);
    }

    public SeqKey seqKey() {
        return new SeqKey(this, Keys.BCC_MANIFEST_SEQ_KEY_ID_FK);
    }

    public AccManifest accManifest() {
        return new AccManifest(this, Keys.BCC_MANIFEST_FROM_ACC_MANIFEST_ID_FK);
    }

    public BccpManifest bccpManifest() {
        return new BccpManifest(this, Keys.BCC_MANIFEST_TO_BCCP_MANIFEST_ID_FK);
    }

    public BccManifest bccReplacementBccManifestIdFk() {
        return new BccManifest(this, Keys.BCC_REPLACEMENT_BCC_MANIFEST_ID_FK);
    }

    public BccManifest bccManifestPrevBccManifestIdFk() {
        return new BccManifest(this, Keys.BCC_MANIFEST_PREV_BCC_MANIFEST_ID_FK);
    }

    public BccManifest bccManifestNextBccManifestIdFk() {
        return new BccManifest(this, Keys.BCC_MANIFEST_NEXT_BCC_MANIFEST_ID_FK);
    }

    @Override
    public BccManifest as(String alias) {
        return new BccManifest(DSL.name(alias), this);
    }

    @Override
    public BccManifest as(Name alias) {
        return new BccManifest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BccManifest rename(String name) {
        return new BccManifest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BccManifest rename(Name name) {
        return new BccManifest(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<ULong, ULong, ULong, ULong, ULong, ULong, Byte, ULong, ULong, ULong> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
