/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AccManifest.AccManifestPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Asbie.AsbiePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Ascc.AsccPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AsccManifest.AsccManifestPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AsccpManifest.AsccpManifestPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Release.ReleasePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.SeqKey.SeqKeyPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.AsccManifestRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AsccManifest extends TableImpl<AsccManifestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.ascc_manifest</code>
     */
    public static final AsccManifest ASCC_MANIFEST = new AsccManifest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AsccManifestRecord> getRecordType() {
        return AsccManifestRecord.class;
    }

    /**
     * The column <code>oagi.ascc_manifest.ascc_manifest_id</code>.
     */
    public final TableField<AsccManifestRecord, ULong> ASCC_MANIFEST_ID = createField(DSL.name("ascc_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.ascc_manifest.release_id</code>.
     */
    public final TableField<AsccManifestRecord, ULong> RELEASE_ID = createField(DSL.name("release_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>oagi.ascc_manifest.ascc_id</code>.
     */
    public final TableField<AsccManifestRecord, ULong> ASCC_ID = createField(DSL.name("ascc_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.ascc_manifest.seq_key_id</code>.
     */
    public final TableField<AsccManifestRecord, ULong> SEQ_KEY_ID = createField(DSL.name("seq_key_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>oagi.ascc_manifest.from_acc_manifest_id</code>.
     */
    public final TableField<AsccManifestRecord, ULong> FROM_ACC_MANIFEST_ID = createField(DSL.name("from_acc_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.ascc_manifest.to_asccp_manifest_id</code>.
     */
    public final TableField<AsccManifestRecord, ULong> TO_ASCCP_MANIFEST_ID = createField(DSL.name("to_asccp_manifest_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>oagi.ascc_manifest.den</code>. DEN (dictionary entry
     * name) of the ASCC. This column can be derived from Qualifier and
     * OBJECT_CLASS_TERM of the FROM_ACC_ID and DEN of the TO_ASCCP_ID as
     * Qualifier + "_ " + OBJECT_CLASS_TERM + ". " + DEN.
     */
    public final TableField<AsccManifestRecord, String> DEN = createField(DSL.name("den"), SQLDataType.VARCHAR(304).nullable(false), this, "DEN (dictionary entry name) of the ASCC. This column can be derived from Qualifier and OBJECT_CLASS_TERM of the FROM_ACC_ID and DEN of the TO_ASCCP_ID as Qualifier + \"_ \" + OBJECT_CLASS_TERM + \". \" + DEN.");

    /**
     * The column <code>oagi.ascc_manifest.conflict</code>. This indicates that
     * there is a conflict between self and relationship.
     */
    public final TableField<AsccManifestRecord, Byte> CONFLICT = createField(DSL.name("conflict"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "This indicates that there is a conflict between self and relationship.");

    /**
     * The column <code>oagi.ascc_manifest.replacement_ascc_manifest_id</code>.
     * This refers to a replacement manifest if the record is deprecated.
     */
    public final TableField<AsccManifestRecord, ULong> REPLACEMENT_ASCC_MANIFEST_ID = createField(DSL.name("replacement_ascc_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "This refers to a replacement manifest if the record is deprecated.");

    /**
     * The column <code>oagi.ascc_manifest.prev_ascc_manifest_id</code>.
     */
    public final TableField<AsccManifestRecord, ULong> PREV_ASCC_MANIFEST_ID = createField(DSL.name("prev_ascc_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>oagi.ascc_manifest.next_ascc_manifest_id</code>.
     */
    public final TableField<AsccManifestRecord, ULong> NEXT_ASCC_MANIFEST_ID = createField(DSL.name("next_ascc_manifest_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "");

    private AsccManifest(Name alias, Table<AsccManifestRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AsccManifest(Name alias, Table<AsccManifestRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.ascc_manifest</code> table reference
     */
    public AsccManifest(String alias) {
        this(DSL.name(alias), ASCC_MANIFEST);
    }

    /**
     * Create an aliased <code>oagi.ascc_manifest</code> table reference
     */
    public AsccManifest(Name alias) {
        this(alias, ASCC_MANIFEST);
    }

    /**
     * Create a <code>oagi.ascc_manifest</code> table reference
     */
    public AsccManifest() {
        this(DSL.name("ascc_manifest"), null);
    }

    public <O extends Record> AsccManifest(Table<O> path, ForeignKey<O, AsccManifestRecord> childPath, InverseForeignKey<O, AsccManifestRecord> parentPath) {
        super(path, childPath, parentPath, ASCC_MANIFEST);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AsccManifestPath extends AsccManifest implements Path<AsccManifestRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AsccManifestPath(Table<O> path, ForeignKey<O, AsccManifestRecord> childPath, InverseForeignKey<O, AsccManifestRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AsccManifestPath(Name alias, Table<AsccManifestRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AsccManifestPath as(String alias) {
            return new AsccManifestPath(DSL.name(alias), this);
        }

        @Override
        public AsccManifestPath as(Name alias) {
            return new AsccManifestPath(alias, this);
        }

        @Override
        public AsccManifestPath as(Table<?> alias) {
            return new AsccManifestPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<AsccManifestRecord, ULong> getIdentity() {
        return (Identity<AsccManifestRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<AsccManifestRecord> getPrimaryKey() {
        return Keys.KEY_ASCC_MANIFEST_PRIMARY;
    }

    @Override
    public List<ForeignKey<AsccManifestRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ASCC_MANIFEST_ASCC_ID_FK, Keys.ASCC_MANIFEST_FROM_ACC_MANIFEST_ID_FK, Keys.ASCC_MANIFEST_NEXT_ASCC_MANIFEST_ID_FK, Keys.ASCC_MANIFEST_PREV_ASCC_MANIFEST_ID_FK, Keys.ASCC_MANIFEST_RELEASE_ID_FK, Keys.ASCC_MANIFEST_SEQ_KEY_ID_FK, Keys.ASCC_MANIFEST_TO_ASCCP_MANIFEST_ID_FK, Keys.ASCC_REPLACEMENT_ASCC_MANIFEST_ID_FK);
    }

    private transient AsccPath _ascc;

    /**
     * Get the implicit join path to the <code>oagi.ascc</code> table.
     */
    public AsccPath ascc() {
        if (_ascc == null)
            _ascc = new AsccPath(this, Keys.ASCC_MANIFEST_ASCC_ID_FK, null);

        return _ascc;
    }

    private transient AccManifestPath _accManifest;

    /**
     * Get the implicit join path to the <code>oagi.acc_manifest</code> table.
     */
    public AccManifestPath accManifest() {
        if (_accManifest == null)
            _accManifest = new AccManifestPath(this, Keys.ASCC_MANIFEST_FROM_ACC_MANIFEST_ID_FK, null);

        return _accManifest;
    }

    private transient AsccManifestPath _asccManifestNextAsccManifestIdFk;

    /**
     * Get the implicit join path to the <code>oagi.ascc_manifest</code> table,
     * via the <code>ascc_manifest_next_ascc_manifest_id_fk</code> key.
     */
    public AsccManifestPath asccManifestNextAsccManifestIdFk() {
        if (_asccManifestNextAsccManifestIdFk == null)
            _asccManifestNextAsccManifestIdFk = new AsccManifestPath(this, Keys.ASCC_MANIFEST_NEXT_ASCC_MANIFEST_ID_FK, null);

        return _asccManifestNextAsccManifestIdFk;
    }

    private transient AsccManifestPath _asccManifestPrevAsccManifestIdFk;

    /**
     * Get the implicit join path to the <code>oagi.ascc_manifest</code> table,
     * via the <code>ascc_manifest_prev_ascc_manifest_id_fk</code> key.
     */
    public AsccManifestPath asccManifestPrevAsccManifestIdFk() {
        if (_asccManifestPrevAsccManifestIdFk == null)
            _asccManifestPrevAsccManifestIdFk = new AsccManifestPath(this, Keys.ASCC_MANIFEST_PREV_ASCC_MANIFEST_ID_FK, null);

        return _asccManifestPrevAsccManifestIdFk;
    }

    private transient ReleasePath _release;

    /**
     * Get the implicit join path to the <code>oagi.release</code> table.
     */
    public ReleasePath release() {
        if (_release == null)
            _release = new ReleasePath(this, Keys.ASCC_MANIFEST_RELEASE_ID_FK, null);

        return _release;
    }

    private transient SeqKeyPath _seqKey;

    /**
     * Get the implicit join path to the <code>oagi.seq_key</code> table.
     */
    public SeqKeyPath seqKey() {
        if (_seqKey == null)
            _seqKey = new SeqKeyPath(this, Keys.ASCC_MANIFEST_SEQ_KEY_ID_FK, null);

        return _seqKey;
    }

    private transient AsccpManifestPath _asccpManifest;

    /**
     * Get the implicit join path to the <code>oagi.asccp_manifest</code> table.
     */
    public AsccpManifestPath asccpManifest() {
        if (_asccpManifest == null)
            _asccpManifest = new AsccpManifestPath(this, Keys.ASCC_MANIFEST_TO_ASCCP_MANIFEST_ID_FK, null);

        return _asccpManifest;
    }

    private transient AsccManifestPath _asccReplacementAsccManifestIdFk;

    /**
     * Get the implicit join path to the <code>oagi.ascc_manifest</code> table,
     * via the <code>ascc_replacement_ascc_manifest_id_fk</code> key.
     */
    public AsccManifestPath asccReplacementAsccManifestIdFk() {
        if (_asccReplacementAsccManifestIdFk == null)
            _asccReplacementAsccManifestIdFk = new AsccManifestPath(this, Keys.ASCC_REPLACEMENT_ASCC_MANIFEST_ID_FK, null);

        return _asccReplacementAsccManifestIdFk;
    }

    private transient AsbiePath _asbie;

    /**
     * Get the implicit to-many join path to the <code>oagi.asbie</code> table
     */
    public AsbiePath asbie() {
        if (_asbie == null)
            _asbie = new AsbiePath(this, null, Keys.ASBIE_BASED_ASCC_MANIFEST_ID_FK.getInverseKey());

        return _asbie;
    }

    @Override
    public AsccManifest as(String alias) {
        return new AsccManifest(DSL.name(alias), this);
    }

    @Override
    public AsccManifest as(Name alias) {
        return new AsccManifest(alias, this);
    }

    @Override
    public AsccManifest as(Table<?> alias) {
        return new AsccManifest(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AsccManifest rename(String name) {
        return new AsccManifest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AsccManifest rename(Name name) {
        return new AsccManifest(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AsccManifest rename(Table<?> name) {
        return new AsccManifest(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AsccManifest where(Condition condition) {
        return new AsccManifest(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AsccManifest where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AsccManifest where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AsccManifest where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AsccManifest where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AsccManifest where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AsccManifest where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AsccManifest where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AsccManifest whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AsccManifest whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
