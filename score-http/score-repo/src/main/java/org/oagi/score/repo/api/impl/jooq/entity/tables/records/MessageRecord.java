/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables.records;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Message;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessageRecord extends UpdatableRecordImpl<MessageRecord> implements Record8<ULong, ULong, ULong, String, String, String, Byte, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>oagi.message.message_id</code>.
     */
    public void setMessageId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>oagi.message.message_id</code>.
     */
    public ULong getMessageId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>oagi.message.sender_id</code>. The user who created this record.
     */
    public void setSenderId(ULong value) {
        set(1, value);
    }

    /**
     * Getter for <code>oagi.message.sender_id</code>. The user who created this record.
     */
    public ULong getSenderId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>oagi.message.recipient_id</code>. The user who is a target to possess this record.
     */
    public void setRecipientId(ULong value) {
        set(2, value);
    }

    /**
     * Getter for <code>oagi.message.recipient_id</code>. The user who is a target to possess this record.
     */
    public ULong getRecipientId() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>oagi.message.subject</code>. A subject of the message
     */
    public void setSubject(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>oagi.message.subject</code>. A subject of the message
     */
    public String getSubject() {
        return (String) get(3);
    }

    /**
     * Setter for <code>oagi.message.body</code>. A body of the message.
     */
    public void setBody(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>oagi.message.body</code>. A body of the message.
     */
    public String getBody() {
        return (String) get(4);
    }

    /**
     * Setter for <code>oagi.message.body_content_type</code>. A content type of the body
     */
    public void setBodyContentType(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>oagi.message.body_content_type</code>. A content type of the body
     */
    public String getBodyContentType() {
        return (String) get(5);
    }

    /**
     * Setter for <code>oagi.message.is_read</code>. An indicator whether this record is read or not.
     */
    public void setIsRead(Byte value) {
        set(6, value);
    }

    /**
     * Getter for <code>oagi.message.is_read</code>. An indicator whether this record is read or not.
     */
    public Byte getIsRead() {
        return (Byte) get(6);
    }

    /**
     * Setter for <code>oagi.message.creation_timestamp</code>. The timestamp when the record was first created.
     */
    public void setCreationTimestamp(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>oagi.message.creation_timestamp</code>. The timestamp when the record was first created.
     */
    public LocalDateTime getCreationTimestamp() {
        return (LocalDateTime) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<ULong, ULong, ULong, String, String, String, Byte, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<ULong, ULong, ULong, String, String, String, Byte, LocalDateTime> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return Message.MESSAGE.MESSAGE_ID;
    }

    @Override
    public Field<ULong> field2() {
        return Message.MESSAGE.SENDER_ID;
    }

    @Override
    public Field<ULong> field3() {
        return Message.MESSAGE.RECIPIENT_ID;
    }

    @Override
    public Field<String> field4() {
        return Message.MESSAGE.SUBJECT;
    }

    @Override
    public Field<String> field5() {
        return Message.MESSAGE.BODY;
    }

    @Override
    public Field<String> field6() {
        return Message.MESSAGE.BODY_CONTENT_TYPE;
    }

    @Override
    public Field<Byte> field7() {
        return Message.MESSAGE.IS_READ;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return Message.MESSAGE.CREATION_TIMESTAMP;
    }

    @Override
    public ULong component1() {
        return getMessageId();
    }

    @Override
    public ULong component2() {
        return getSenderId();
    }

    @Override
    public ULong component3() {
        return getRecipientId();
    }

    @Override
    public String component4() {
        return getSubject();
    }

    @Override
    public String component5() {
        return getBody();
    }

    @Override
    public String component6() {
        return getBodyContentType();
    }

    @Override
    public Byte component7() {
        return getIsRead();
    }

    @Override
    public LocalDateTime component8() {
        return getCreationTimestamp();
    }

    @Override
    public ULong value1() {
        return getMessageId();
    }

    @Override
    public ULong value2() {
        return getSenderId();
    }

    @Override
    public ULong value3() {
        return getRecipientId();
    }

    @Override
    public String value4() {
        return getSubject();
    }

    @Override
    public String value5() {
        return getBody();
    }

    @Override
    public String value6() {
        return getBodyContentType();
    }

    @Override
    public Byte value7() {
        return getIsRead();
    }

    @Override
    public LocalDateTime value8() {
        return getCreationTimestamp();
    }

    @Override
    public MessageRecord value1(ULong value) {
        setMessageId(value);
        return this;
    }

    @Override
    public MessageRecord value2(ULong value) {
        setSenderId(value);
        return this;
    }

    @Override
    public MessageRecord value3(ULong value) {
        setRecipientId(value);
        return this;
    }

    @Override
    public MessageRecord value4(String value) {
        setSubject(value);
        return this;
    }

    @Override
    public MessageRecord value5(String value) {
        setBody(value);
        return this;
    }

    @Override
    public MessageRecord value6(String value) {
        setBodyContentType(value);
        return this;
    }

    @Override
    public MessageRecord value7(Byte value) {
        setIsRead(value);
        return this;
    }

    @Override
    public MessageRecord value8(LocalDateTime value) {
        setCreationTimestamp(value);
        return this;
    }

    @Override
    public MessageRecord values(ULong value1, ULong value2, ULong value3, String value4, String value5, String value6, Byte value7, LocalDateTime value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MessageRecord
     */
    public MessageRecord() {
        super(Message.MESSAGE);
    }

    /**
     * Create a detached, initialised MessageRecord
     */
    public MessageRecord(ULong messageId, ULong senderId, ULong recipientId, String subject, String body, String bodyContentType, Byte isRead, LocalDateTime creationTimestamp) {
        super(Message.MESSAGE);

        setMessageId(messageId);
        setSenderId(senderId);
        setRecipientId(recipientId);
        setSubject(subject);
        setBody(body);
        setBodyContentType(bodyContentType);
        setIsRead(isRead);
        setCreationTimestamp(creationTimestamp);
    }
}
