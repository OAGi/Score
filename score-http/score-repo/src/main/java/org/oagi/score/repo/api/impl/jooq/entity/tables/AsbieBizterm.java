/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Asbie.AsbiePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.AsccBizterm.AsccBiztermPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.AsbieBiztermRecord;


/**
 * The asbie_bizterm table stores information about the aggregation between the
 * ascc_bizterm and ASBIE. TODO: Placeholder, definition is missing.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AsbieBizterm extends TableImpl<AsbieBiztermRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.asbie_bizterm</code>
     */
    public static final AsbieBizterm ASBIE_BIZTERM = new AsbieBizterm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AsbieBiztermRecord> getRecordType() {
        return AsbieBiztermRecord.class;
    }

    /**
     * The column <code>oagi.asbie_bizterm.asbie_bizterm_id</code>. An internal,
     * primary database key of an asbie_bizterm record.
     */
    public final TableField<AsbieBiztermRecord, ULong> ASBIE_BIZTERM_ID = createField(DSL.name("asbie_bizterm_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "An internal, primary database key of an asbie_bizterm record.");

    /**
     * The column <code>oagi.asbie_bizterm.ascc_bizterm_id</code>. An internal
     * ID of the ascc_business_term record.
     */
    public final TableField<AsbieBiztermRecord, ULong> ASCC_BIZTERM_ID = createField(DSL.name("ascc_bizterm_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "An internal ID of the ascc_business_term record.");

    /**
     * The column <code>oagi.asbie_bizterm.asbie_id</code>. An internal ID of
     * the associated ASBIE
     */
    public final TableField<AsbieBiztermRecord, ULong> ASBIE_ID = createField(DSL.name("asbie_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "An internal ID of the associated ASBIE");

    /**
     * The column <code>oagi.asbie_bizterm.primary_indicator</code>. The
     * indicator shows if the business term is primary for the assigned ASBIE.
     */
    public final TableField<AsbieBiztermRecord, Byte> PRIMARY_INDICATOR = createField(DSL.name("primary_indicator"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "The indicator shows if the business term is primary for the assigned ASBIE.");

    /**
     * The column <code>oagi.asbie_bizterm.type_code</code>. The type code of
     * the assignment.
     */
    public final TableField<AsbieBiztermRecord, String> TYPE_CODE = createField(DSL.name("type_code"), SQLDataType.CHAR(30).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CHAR)), this, "The type code of the assignment.");

    /**
     * The column <code>oagi.asbie_bizterm.created_by</code>. A foreign key
     * referring to the user who creates the asbie_bizterm record. The creator
     * of the asbie_bizterm is also its owner by default.
     */
    public final TableField<AsbieBiztermRecord, ULong> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A foreign key referring to the user who creates the asbie_bizterm record. The creator of the asbie_bizterm is also its owner by default.");

    /**
     * The column <code>oagi.asbie_bizterm.last_updated_by</code>. A foreign key
     * referring to the last user who has updated the asbie_bizterm record. This
     * may be the user who is in the same group as the creator.
     */
    public final TableField<AsbieBiztermRecord, ULong> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A foreign key referring to the last user who has updated the asbie_bizterm record. This may be the user who is in the same group as the creator.");

    /**
     * The column <code>oagi.asbie_bizterm.creation_timestamp</code>. Timestamp
     * when the asbie_bizterm record was first created.
     */
    public final TableField<AsbieBiztermRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Timestamp when the asbie_bizterm record was first created.");

    /**
     * The column <code>oagi.asbie_bizterm.last_update_timestamp</code>. The
     * timestamp when the asbie_bizterm was last updated.
     */
    public final TableField<AsbieBiztermRecord, LocalDateTime> LAST_UPDATE_TIMESTAMP = createField(DSL.name("last_update_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "The timestamp when the asbie_bizterm was last updated.");

    private AsbieBizterm(Name alias, Table<AsbieBiztermRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AsbieBizterm(Name alias, Table<AsbieBiztermRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("The asbie_bizterm table stores information about the aggregation between the ascc_bizterm and ASBIE. TODO: Placeholder, definition is missing."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.asbie_bizterm</code> table reference
     */
    public AsbieBizterm(String alias) {
        this(DSL.name(alias), ASBIE_BIZTERM);
    }

    /**
     * Create an aliased <code>oagi.asbie_bizterm</code> table reference
     */
    public AsbieBizterm(Name alias) {
        this(alias, ASBIE_BIZTERM);
    }

    /**
     * Create a <code>oagi.asbie_bizterm</code> table reference
     */
    public AsbieBizterm() {
        this(DSL.name("asbie_bizterm"), null);
    }

    public <O extends Record> AsbieBizterm(Table<O> path, ForeignKey<O, AsbieBiztermRecord> childPath, InverseForeignKey<O, AsbieBiztermRecord> parentPath) {
        super(path, childPath, parentPath, ASBIE_BIZTERM);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AsbieBiztermPath extends AsbieBizterm implements Path<AsbieBiztermRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AsbieBiztermPath(Table<O> path, ForeignKey<O, AsbieBiztermRecord> childPath, InverseForeignKey<O, AsbieBiztermRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AsbieBiztermPath(Name alias, Table<AsbieBiztermRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AsbieBiztermPath as(String alias) {
            return new AsbieBiztermPath(DSL.name(alias), this);
        }

        @Override
        public AsbieBiztermPath as(Name alias) {
            return new AsbieBiztermPath(alias, this);
        }

        @Override
        public AsbieBiztermPath as(Table<?> alias) {
            return new AsbieBiztermPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<AsbieBiztermRecord, ULong> getIdentity() {
        return (Identity<AsbieBiztermRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<AsbieBiztermRecord> getPrimaryKey() {
        return Keys.KEY_ASBIE_BIZTERM_PRIMARY;
    }

    @Override
    public List<ForeignKey<AsbieBiztermRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ASBIE_BIZTERM_ASCC_BIZTERM_FK, Keys.ASBIE_BIZTERM_ASBIE_FK);
    }

    private transient AsccBiztermPath _asccBizterm;

    /**
     * Get the implicit join path to the <code>oagi.ascc_bizterm</code> table.
     */
    public AsccBiztermPath asccBizterm() {
        if (_asccBizterm == null)
            _asccBizterm = new AsccBiztermPath(this, Keys.ASBIE_BIZTERM_ASCC_BIZTERM_FK, null);

        return _asccBizterm;
    }

    private transient AsbiePath _asbie;

    /**
     * Get the implicit join path to the <code>oagi.asbie</code> table.
     */
    public AsbiePath asbie() {
        if (_asbie == null)
            _asbie = new AsbiePath(this, Keys.ASBIE_BIZTERM_ASBIE_FK, null);

        return _asbie;
    }

    @Override
    public AsbieBizterm as(String alias) {
        return new AsbieBizterm(DSL.name(alias), this);
    }

    @Override
    public AsbieBizterm as(Name alias) {
        return new AsbieBizterm(alias, this);
    }

    @Override
    public AsbieBizterm as(Table<?> alias) {
        return new AsbieBizterm(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AsbieBizterm rename(String name) {
        return new AsbieBizterm(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AsbieBizterm rename(Name name) {
        return new AsbieBizterm(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AsbieBizterm rename(Table<?> name) {
        return new AsbieBizterm(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AsbieBizterm where(Condition condition) {
        return new AsbieBizterm(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AsbieBizterm where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AsbieBizterm where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AsbieBizterm where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AsbieBizterm where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AsbieBizterm where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AsbieBizterm where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AsbieBizterm where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AsbieBizterm whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AsbieBizterm whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
