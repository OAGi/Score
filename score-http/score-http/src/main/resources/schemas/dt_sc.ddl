CREATE TABLE `dt_sc`
(
    `dt_sc_id`              bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Internal, primary database key.',
    `guid`                  char(32) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL COMMENT 'A globally unique identifier (GUID).',
    `object_class_term`     varchar(60)  DEFAULT NULL COMMENT 'Object class term of the SC.',
    `property_term`         varchar(60)  DEFAULT NULL COMMENT 'Property term of the SC.',
    `representation_term`   varchar(20)  DEFAULT NULL COMMENT 'Representation of the supplementary component.',
    `definition`            text         DEFAULT NULL COMMENT 'Description of the supplementary component.',
    `definition_source`     varchar(200) DEFAULT NULL COMMENT 'This is typically a URL identifying the source of the DEFINITION column.',
    `owner_dt_id`           bigint(20) unsigned DEFAULT NULL COMMENT 'Foreigned key to the DT table indicating the data type, to which this supplementary component belongs.',
    `cardinality_min`       int(11) NOT NULL DEFAULT 0 COMMENT 'The minimum occurrence constraint associated with the supplementary component. The valid values zero or one.',
    `cardinality_max`       int(11) DEFAULT NULL COMMENT 'The maximum occurrence constraint associated with the supplementary component. The valid values are zero or one. Zero is used when the SC is restricted from an instantiation in the data type.',
    `based_dt_sc_id`        bigint(20) unsigned DEFAULT NULL COMMENT 'Foreign key to the DT_SC table itself. This column is used when the SC is derived from the based DT.',
    `default_value`         text         DEFAULT NULL COMMENT 'This column specifies the default value constraint. Default and fixed value constraints cannot be used at the same time.',
    `fixed_value`           text         DEFAULT NULL COMMENT 'This column captures the fixed value constraint. Default and fixed value constraints cannot be used at the same time.',
    `is_deprecated`         tinyint(1) NOT NULL DEFAULT 0 COMMENT 'Indicates whether this is deprecated and should not be reused (i.e., no new reference to this record should be created).',
    `replacement_dt_sc_id`  bigint(20) unsigned DEFAULT NULL COMMENT 'This refers to a replacement if the record is deprecated.',
    `created_by`            bigint(20) unsigned NOT NULL COMMENT 'Foreign key to the APP_USER table. It indicates the user who created the code list.',
    `owner_user_id`         bigint(20) unsigned NOT NULL COMMENT 'Foreign key to the APP_USER table. This is the user who owns the entity, is allowed to edit the entity, and who can transfer the ownership to another user.\n\nThe ownership can change throughout the history, but undoing shouldn''t rollback the ownership.',
    `last_updated_by`       bigint(20) unsigned NOT NULL COMMENT 'Foreign key to the APP_USER table. It identifies the user who last updated the code list.',
    `creation_timestamp`    datetime(6) NOT NULL DEFAULT current_timestamp (6) COMMENT 'Timestamp when the code list was created.',
    `last_update_timestamp` datetime(6) NOT NULL DEFAULT current_timestamp (6) COMMENT 'Timestamp when the code list was last updated.',
    `prev_dt_sc_id`         bigint(20) unsigned DEFAULT NULL COMMENT 'A self-foreign key to indicate the previous history record.',
    `next_dt_sc_id`         bigint(20) unsigned DEFAULT NULL COMMENT 'A self-foreign key to indicate the next history record.',
    PRIMARY KEY (`dt_sc_id`),
    KEY                     `dt_sc_owner_dt_id_fk` (`owner_dt_id`),
    KEY                     `dt_sc_based_dt_sc_id_fk` (`based_dt_sc_id`),
    KEY                     `dt_sc_guid_idx` (`guid`),
    KEY                     `dt_sc_replacement_dt_sc_id_fk` (`replacement_dt_sc_id`),
    KEY                     `dt_sc_created_by_fk` (`created_by`),
    KEY                     `dt_sc_owner_user_id_fk` (`owner_user_id`),
    KEY                     `dt_sc_last_updated_by_fk` (`last_updated_by`),
    KEY                     `dt_sc_prev_dt_sc_id_fk` (`prev_dt_sc_id`),
    KEY                     `dt_sc_next_dt_sc_id_fk` (`next_dt_sc_id`),
    CONSTRAINT `dt_sc_based_dt_sc_id_fk` FOREIGN KEY (`based_dt_sc_id`) REFERENCES `dt_sc` (`dt_sc_id`),
    CONSTRAINT `dt_sc_created_by_fk` FOREIGN KEY (`created_by`) REFERENCES `app_user` (`app_user_id`),
    CONSTRAINT `dt_sc_last_updated_by_fk` FOREIGN KEY (`last_updated_by`) REFERENCES `app_user` (`app_user_id`),
    CONSTRAINT `dt_sc_next_dt_sc_id_fk` FOREIGN KEY (`next_dt_sc_id`) REFERENCES `dt_sc` (`dt_sc_id`),
    CONSTRAINT `dt_sc_owner_dt_id_fk` FOREIGN KEY (`owner_dt_id`) REFERENCES `dt` (`dt_id`),
    CONSTRAINT `dt_sc_owner_user_id_fk` FOREIGN KEY (`owner_user_id`) REFERENCES `app_user` (`app_user_id`),
    CONSTRAINT `dt_sc_prev_dt_sc_id_fk` FOREIGN KEY (`prev_dt_sc_id`) REFERENCES `dt_sc` (`dt_sc_id`),
    CONSTRAINT `dt_sc_replacement_dt_sc_id_fk` FOREIGN KEY (`replacement_dt_sc_id`) REFERENCES `dt_sc` (`dt_sc_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci COMMENT='This table represents the supplementary component (SC) of a DT. Revision is not tracked at the supplementary component. It is considered intrinsic part of the DT. In other words, when a new revision of a DT is created a new set of supplementary components is created along with it. ';