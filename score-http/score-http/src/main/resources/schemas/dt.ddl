CREATE TABLE `dt`
(
    `dt_id`                        bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Internal, primary database key.',
    `guid`                         char(32) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL COMMENT 'A globally unique identifier (GUID).',
    `data_type_term`               varchar(45)  DEFAULT NULL COMMENT 'This is the data type term assigned to the DT. The allowed set of data type terms are defined in the DTC specification. This column is derived from the Based_DT_ID when the column is not blank. ',
    `qualifier`                    varchar(100) DEFAULT NULL COMMENT 'This column shall be blank when the DT_TYPE is CDT. When the DT_TYPE is BDT, this is optional. If the column is not blank it is a qualified BDT. If blank then the row may be a default BDT or an unqualified BDT. Default BDT is OAGIS concrete implementation of the CDT, these are the DT with numbers in the name, e.g., CodeType_1E7368 (DEN is ''Code_1E7368. Type''). Default BDTs are almost like permutation of the CDT options into concrete data types. Unqualified BDT is a BDT that OAGIS model schema generally used for its canonical. A handful of default BDTs were selected; and each of them is wrapped with another type definition that has a simpler name such as CodeType and NormalizedString type - we call these "unqualified BDTs". ',
    `representation_term`          varchar(100) DEFAULT NULL,
    `six_digit_id`                 varchar(45)  DEFAULT NULL COMMENT 'The six number suffix comes from the UN/CEFACT XML Schema NDR.',
    `based_dt_id`                  bigint(20) unsigned DEFAULT NULL COMMENT 'Foreign key pointing to the DT table itself. This column must be blank when the DT_TYPE is CDT. This column must not be blank when the DT_TYPE is BDT.',
    `den`                          varchar(200)                                          NOT NULL COMMENT 'Dictionary Entry Name of the data type. ',
    `definition`                   text         DEFAULT NULL COMMENT 'Description of the data type.',
    `definition_source`            varchar(200) DEFAULT NULL COMMENT 'This is typically a URL identifying the source of the DEFINITION column.',
    `namespace_id`                 bigint(20) unsigned DEFAULT NULL COMMENT 'Foreign key to the NAMESPACE table. This is the namespace to which the entity belongs. This namespace column is primarily used in the case the component is a user''s component because there is also a namespace assigned at the release level.',
    `content_component_definition` text         DEFAULT NULL COMMENT 'Description of the content component of the data type.',
    `state`                        varchar(20)  DEFAULT NULL COMMENT 'Deleted, WIP, Draft, QA, Candidate, Production, Release Draft, Published. This the revision life cycle state of the DT.\n\nState change can''t be undone. But the history record can still keep the records of when the state was changed.',
    `commonly_used`                tinyint(1) NOT NULL DEFAULT 0 COMMENT 'This is a flag to indicate commonly used DT(s) by BCCPs.',
    `created_by`                   bigint(20) unsigned NOT NULL COMMENT 'Foreign key to the APP_USER table. It indicates the user who created this DT.',
    `last_updated_by`              bigint(20) unsigned NOT NULL COMMENT 'Foreign key to the APP_USER table referring to the last user who updated the record. \n\nIn the history record, this should always be the user who is editing the entity (perhaps except when the ownership has just been changed).',
    `owner_user_id`                bigint(20) unsigned NOT NULL COMMENT 'Foreign key to the APP_USER table. This is the user who owns the entity, is allowed to edit the entity, and who can transfer the ownership to another user.\\n\\nThe ownership can change throughout the history, but undoing shouldn''t rollback the ownership. ',
    `creation_timestamp`           datetime(6) NOT NULL COMMENT 'Timestamp when the revision of the DT was created. \n\nThis never change for a revision.',
    `last_update_timestamp`        datetime(6) NOT NULL COMMENT 'Timestamp when the record was last updated.\n\nThe value of this column in the latest history record should be the same as that of the current record. This column keeps the record of when the revision has occurred.',
    `is_deprecated`                tinyint(1) NOT NULL DEFAULT 0 COMMENT 'Indicates whether the CC is deprecated and should not be reused (i.e., no new reference to this record should be created).',
    `replacement_dt_id`            bigint(20) unsigned DEFAULT NULL COMMENT 'This refers to a replacement if the record is deprecated.',
    `prev_dt_id`                   bigint(20) unsigned DEFAULT NULL COMMENT 'A self-foreign key to indicate the previous history record.',
    `next_dt_id`                   bigint(20) unsigned DEFAULT NULL COMMENT 'A self-foreign key to indicate the next history record.',
    PRIMARY KEY (`dt_id`),
    KEY                            `dt_based_dt_id_fk` (`based_dt_id`),
    KEY                            `dt_created_by_fk` (`created_by`),
    KEY                            `dt_last_updated_by_fk` (`last_updated_by`),
    KEY                            `dt_owner_user_id_fk` (`owner_user_id`),
    KEY                            `dt_namespace_id_fk` (`namespace_id`),
    KEY                            `dt_prev_dt_id_fk` (`prev_dt_id`),
    KEY                            `dt_next_dt_id_fk` (`next_dt_id`),
    KEY                            `dt_guid_idx` (`guid`),
    KEY                            `dt_last_update_timestamp_desc_idx` (`last_update_timestamp`),
    KEY                            `dt_replacement_dt_id_fk` (`replacement_dt_id`),
    CONSTRAINT `dt_based_dt_id_fk` FOREIGN KEY (`based_dt_id`) REFERENCES `dt` (`dt_id`),
    CONSTRAINT `dt_created_by_fk` FOREIGN KEY (`created_by`) REFERENCES `app_user` (`app_user_id`),
    CONSTRAINT `dt_last_updated_by_fk` FOREIGN KEY (`last_updated_by`) REFERENCES `app_user` (`app_user_id`),
    CONSTRAINT `dt_namespace_id_fk` FOREIGN KEY (`namespace_id`) REFERENCES `namespace` (`namespace_id`),
    CONSTRAINT `dt_next_dt_id_fk` FOREIGN KEY (`next_dt_id`) REFERENCES `dt` (`dt_id`),
    CONSTRAINT `dt_owner_user_id_fk` FOREIGN KEY (`owner_user_id`) REFERENCES `app_user` (`app_user_id`),
    CONSTRAINT `dt_prev_dt_id_fk` FOREIGN KEY (`prev_dt_id`) REFERENCES `dt` (`dt_id`),
    CONSTRAINT `dt_replacement_dt_id_fk` FOREIGN KEY (`replacement_dt_id`) REFERENCES `dt` (`dt_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci COMMENT='The DT table stores both CDT and BDT. The two types of DTs are differentiated by the TYPE column.';