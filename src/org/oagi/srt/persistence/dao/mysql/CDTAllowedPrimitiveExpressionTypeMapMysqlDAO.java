package org.oagi.srt.persistence.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import org.chanchan.common.persistence.db.BfPersistenceException;
import org.chanchan.common.persistence.db.DBAgent;
import org.oagi.srt.common.QueryCondition;
import org.oagi.srt.common.SRTObject;
import org.oagi.srt.persistence.dao.SRTDAO;
import org.oagi.srt.persistence.dao.SRTDAOException;
import org.oagi.srt.persistence.dto.CDTAllowedPrimitiveExpressionTypeMapVO;
import org.oagi.srt.persistence.dto.DTVO;

/**
*
* @author Jaehun Lee
* @version 1.0
*
*/
public class CDTAllowedPrimitiveExpressionTypeMapMysqlDAO extends SRTDAO{
	private final String _tableName = "cdt_awd_pri_xps_type_map";

	private final String _FIND_ALL_CDT_Allowed_Primitive_Expression_Type_Map_STATEMENT = 
			"SELECT cdt_awd_pri_xps_type_map_id, cdt_awd_pri_id, xbt_id FROM " + _tableName;

	private final String _FIND_CDT_Allowed_Primitive_Expression_Type_Map_STATEMENT = 
			"SELECT cdt_awd_pri_xps_type_map_id, cdt_awd_pri_id, xbt_id FROM " + _tableName;

	private final String _INSERT_CDT_Allowed_Primitive_Expression_Type_Map_STATEMENT = 
			"INSERT INTO " + _tableName + " (cdt_awd_pri_id, xbt_id) VALUES (?, ?)";

	private final String _UPDATE_CDT_Allowed_Primitive_Expression_Type_Map_STATEMENT = 
			"UPDATE " + _tableName
			+ " SET cdt_awd_pri_id = ?, CDT_Allowed_Primitive_ID = ?, xbt_id = ? WHERE cdt_awd_pri_xps_type_map_id = ?";

	private final String _DELETE_CDT_Allowed_Primitive_Expression_Type_Map_STATEMENT = 
			"DELETE FROM " + _tableName + " WHERE cdt_awd_pri_xps_type_map_id = ?";

	@Override
	public int findMaxId() throws SRTDAOException {
		// TODO Auto-generated method stub
		return 0;
	}
	
	public int insertObject(SRTObject obj) throws SRTDAOException {
		DBAgent tx = new DBAgent();
		CDTAllowedPrimitiveExpressionTypeMapVO cdtallowedprimitiveexpressiontypemapVO = (CDTAllowedPrimitiveExpressionTypeMapVO) obj; 
		
		try {
			Connection conn = tx.open();
			PreparedStatement ps = null;
			ps = conn.prepareStatement(_INSERT_CDT_Allowed_Primitive_Expression_Type_Map_STATEMENT);
			ps.setInt(1, cdtallowedprimitiveexpressiontypemapVO.getCDTAllowedPrimitiveID());
			ps.setInt(2, cdtallowedprimitiveexpressiontypemapVO.getXSDBuiltInTypeID());

			ps.executeUpdate();

			ResultSet tableKeys = ps.getGeneratedKeys();
			tableKeys.next();
			//int autoGeneratedID = tableKeys.getInt(1);

			ps.close();
			tx.commit();
		} catch (BfPersistenceException e) {
			tx.rollback();
			throw new SRTDAOException(SRTDAOException.DAO_INSERT_ERROR, e);
		} catch (SQLException e) {
			e.printStackTrace();
			tx.rollback();
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			tx.close();
		}
		return 1;
	}

	public SRTObject findObject(QueryCondition qc) throws SRTDAOException {
		DBAgent tx = new DBAgent();
		PreparedStatement ps = null;
		ResultSet rs = null;
		CDTAllowedPrimitiveExpressionTypeMapVO cdtallowedprimitiveexpressiontypemapVO = new CDTAllowedPrimitiveExpressionTypeMapVO();
		
		try {
			Connection conn = tx.open();
			String sql = _FIND_CDT_Allowed_Primitive_Expression_Type_Map_STATEMENT;

			String WHERE_OR_AND = " WHERE ";
			int nCond = qc.getSize();
			if (nCond > 0) {
				for (int n = 0; n < nCond; n++) {
					sql += WHERE_OR_AND + qc.getField(n) + " = ?";
					WHERE_OR_AND = " AND ";
				}
			}
			ps = conn.prepareStatement(sql);
			if (nCond > 0) {
				for (int n = 0; n < nCond; n++) {
					Object value = qc.getValue(n);
					if (value instanceof String) {
						ps.setString(n+1, (String) value);
					} else if (value instanceof Integer) {
						ps.setInt(n+1, ((Integer) value).intValue());
					}
				}
			}

			rs = ps.executeQuery();
			if (rs.next()) {
				cdtallowedprimitiveexpressiontypemapVO.setCDTPrimitiveExpressionTypeMapID(rs.getInt("cdt_awd_pri_xps_type_map_id"));
				cdtallowedprimitiveexpressiontypemapVO.setCDTAllowedPrimitiveID(rs.getInt("cdt_awd_pri_id"));
				cdtallowedprimitiveexpressiontypemapVO.setXSDBuiltInTypeID(rs.getInt("xbt_id"));
			}
			tx.commit();
			conn.close();
		} catch (BfPersistenceException e) {
			throw new SRTDAOException(SRTDAOException.DAO_FIND_ERROR, e);
		} catch (SQLException e) {
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			if(ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {}
			}
			if(rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {}
			}
			tx.close();
		}
		return cdtallowedprimitiveexpressiontypemapVO;
	}

	public ArrayList<SRTObject> findObjects() throws SRTDAOException {
		ArrayList<SRTObject> list = new ArrayList<SRTObject>();

		DBAgent tx = new DBAgent();
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			Connection conn = tx.open();
			String sql = _FIND_ALL_CDT_Allowed_Primitive_Expression_Type_Map_STATEMENT;
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			while (rs.next()) {
				CDTAllowedPrimitiveExpressionTypeMapVO cdtallowedprimitiveexpressiontypemapVO = new CDTAllowedPrimitiveExpressionTypeMapVO();
				cdtallowedprimitiveexpressiontypemapVO.setCDTPrimitiveExpressionTypeMapID(rs.getInt("cdt_awd_pri_xps_type_map_id"));
				cdtallowedprimitiveexpressiontypemapVO.setCDTAllowedPrimitiveID(rs.getInt("cdt_awd_pri_id"));
				cdtallowedprimitiveexpressiontypemapVO.setXSDBuiltInTypeID(rs.getInt("xbt_id"));
				list.add(cdtallowedprimitiveexpressiontypemapVO);
			}
			tx.commit();
			conn.close();
		} catch (BfPersistenceException e) {
			throw new SRTDAOException(SRTDAOException.DAO_FIND_ERROR, e);
		} catch (SQLException e) {
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			if(ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {}
			}
			if(rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {}
			}
			tx.close();
		}

		return list;
	}

	public boolean updateObject(SRTObject obj) throws SRTDAOException {
		DBAgent tx = new DBAgent();
		CDTAllowedPrimitiveExpressionTypeMapVO cdtallowedprimitiveexpressiontypemapVO = (CDTAllowedPrimitiveExpressionTypeMapVO) obj; 
		PreparedStatement ps = null;
		try {
			Connection conn = tx.open();

			ps = conn.prepareStatement(_UPDATE_CDT_Allowed_Primitive_Expression_Type_Map_STATEMENT);

			ps.setInt(1, cdtallowedprimitiveexpressiontypemapVO.getCDTAllowedPrimitiveID());
			ps.setInt(2, cdtallowedprimitiveexpressiontypemapVO.getXSDBuiltInTypeID());
			ps.setInt(3, cdtallowedprimitiveexpressiontypemapVO.getCDTPrimitiveExpressionTypeMapID());
			ps.executeUpdate();

			tx.commit();
		} catch (BfPersistenceException e) {
			tx.rollback(e);
			throw new SRTDAOException(SRTDAOException.DAO_UPDATE_ERROR, e);
		} catch (SQLException e) {
			tx.rollback(e);
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			if(ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {}
			}
			tx.close();
		}

		return true;
	}

	public boolean deleteObject(SRTObject obj) throws SRTDAOException {
		CDTAllowedPrimitiveExpressionTypeMapVO cdtallowedprimitiveexpressiontypemapVO = (CDTAllowedPrimitiveExpressionTypeMapVO) obj; 

		DBAgent tx = new DBAgent();
		PreparedStatement ps = null;
		try {
			Connection conn = tx.open();

			ps = conn.prepareStatement(_DELETE_CDT_Allowed_Primitive_Expression_Type_Map_STATEMENT);
			ps.setInt(1, cdtallowedprimitiveexpressiontypemapVO.getCDTPrimitiveExpressionTypeMapID());
			ps.executeUpdate();

			tx.commit();
		} catch (BfPersistenceException e) {
			tx.rollback(e);
			throw new SRTDAOException(SRTDAOException.DAO_DELETE_ERROR, e);
		} catch (SQLException e) {
			tx.rollback(e);
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			if(ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {}
			}
			tx.close();
		}

		return true;

	}

	@Override
	public ArrayList<SRTObject> findObjects(QueryCondition qc)
			throws SRTDAOException {
		ArrayList<SRTObject> list = new ArrayList<SRTObject>();
		DBAgent tx = new DBAgent();
		PreparedStatement ps = null;
		ResultSet rs = null;
		
		try {
			Connection conn = tx.open();
			String sql = _FIND_CDT_Allowed_Primitive_Expression_Type_Map_STATEMENT;

			String WHERE_OR_AND = " WHERE ";
			int nCond = qc.getSize();
			if (nCond > 0) {
				for (int n = 0; n < nCond; n++) {
					sql += WHERE_OR_AND + qc.getField(n) + " = ?";
					WHERE_OR_AND = " AND ";
				}
			}
			ps = conn.prepareStatement(sql);
			if (nCond > 0) {
				for (int n = 0; n < nCond; n++) {
					Object value = qc.getValue(n);
					if (value instanceof String) {
						ps.setString(n+1, (String) value);
					} else if (value instanceof Integer) {
						ps.setInt(n+1, ((Integer) value).intValue());
					}
				}
			}

			rs = ps.executeQuery();
			while (rs.next()) {
				CDTAllowedPrimitiveExpressionTypeMapVO cdtallowedprimitiveexpressiontypemapVO = new CDTAllowedPrimitiveExpressionTypeMapVO();
				cdtallowedprimitiveexpressiontypemapVO.setCDTPrimitiveExpressionTypeMapID(rs.getInt("cdt_awd_pri_xps_type_map_id"));
				cdtallowedprimitiveexpressiontypemapVO.setCDTAllowedPrimitiveID(rs.getInt("cdt_awd_pri_id"));
				cdtallowedprimitiveexpressiontypemapVO.setXSDBuiltInTypeID(rs.getInt("xbt_id"));
				list.add(cdtallowedprimitiveexpressiontypemapVO);
			}
			tx.commit();
			conn.close();
		} catch (BfPersistenceException e) {
			throw new SRTDAOException(SRTDAOException.DAO_FIND_ERROR, e);
		} catch (SQLException e) {
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			if(ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {}
			}
			if(rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {}
			}
			tx.close();
		}
		return list;
	}

	@Override
	public SRTObject findObject(QueryCondition qc, Connection conn)
			throws SRTDAOException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		CDTAllowedPrimitiveExpressionTypeMapVO cdtallowedprimitiveexpressiontypemapVO = null;
		
		try {
			String sql = _FIND_CDT_Allowed_Primitive_Expression_Type_Map_STATEMENT;

			String WHERE_OR_AND = " WHERE ";
			int nCond = qc.getSize();
			if (nCond > 0) {
				for (int n = 0; n < nCond; n++) {
					sql += WHERE_OR_AND + qc.getField(n) + " = ?";
					WHERE_OR_AND = " AND ";
				}
			}
			
			int nCond2 = qc.getLikeSize();
			if (nCond2 > 0) {
				for (int n = 0; n < nCond2; n++) {
					sql += WHERE_OR_AND + qc.getLikeField(n) + " like ?";
					WHERE_OR_AND = " AND ";
				}
			}
			
			ps = conn.prepareStatement(sql);
			if (nCond > 0) {
				for (int n = 0; n < nCond; n++) {
					Object value = qc.getValue(n);
					if (value instanceof String) {
						ps.setString(n+1, (String) value);
					} else if (value instanceof Integer) {
						ps.setInt(n+1, ((Integer) value).intValue());
					}
				}
			}
			
			if (nCond2 > 0) {
				for (int n = 0; n < nCond2; n++) {
					Object value = qc.getLikeValue(n);
					if (value instanceof String) {
						ps.setString(nCond + n + 1, (String) value);
					} else if (value instanceof Integer) {
						ps.setInt(nCond + n + 1, ((Integer) value).intValue());
					}
				}
			}

			rs = ps.executeQuery();
			if (rs.next()) {
				cdtallowedprimitiveexpressiontypemapVO = new CDTAllowedPrimitiveExpressionTypeMapVO();
				cdtallowedprimitiveexpressiontypemapVO.setCDTPrimitiveExpressionTypeMapID(rs.getInt("cdt_awd_pri_xps_type_map_id"));
				cdtallowedprimitiveexpressiontypemapVO.setCDTAllowedPrimitiveID(rs.getInt("cdt_awd_pri_id"));
				cdtallowedprimitiveexpressiontypemapVO.setXSDBuiltInTypeID(rs.getInt("xbt_id"));
			}
			
		} catch (SQLException e) {
			throw new SRTDAOException(SRTDAOException.SQL_EXECUTION_FAILED, e);
		} finally {
			if(ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {}
			}
			if(rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {}
			}
		}
		return cdtallowedprimitiveexpressiontypemapVO;

	}

	@Override
	public ArrayList<SRTObject> findObjects(QueryCondition qc, Connection conn)
			throws SRTDAOException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ArrayList<SRTObject> findObjects(Connection conn)
			throws SRTDAOException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int insertObject(SRTObject obj, Connection conn)
			throws SRTDAOException {
		// TODO Auto-generated method stub
		return 0;
	}
}
